#include "../../ray.conf"
#include "../../ray_advanced.conf"
#include "../../shader/math.fxsub"
#include "../../shader/common.fxsub"
#include "../../shader/shadowcommon.fxsub"

float mRange : CONTROLOBJECT < string name="(OffscreenOwner)"; string item = "Range+"; >;
float3 mPosition : CONTROLOBJECT < string name="(OffscreenOwner)"; string item = "Position"; >;
float3 mDirection : CONTROLOBJECT < string name="(OffscreenOwner)"; string item = "Direction"; >;

static float LightRange = 50 + mRange * 150;
static float3 LightPosition = mPosition;
static float3 LightDirection = normalize(mDirection - mPosition);

static float4x4 matLightProject = CreateOrthoProject(LightRange, LightRange, mLightZMin, mLightZMax);
static float4x4 matLightView = CreateLightViewMatrix(LightDirection, LightPosition);
static float4x4 matLightViewProject = mul(matLightView, matLightProject);

#if CASTER_ALPHA_MAP_ENABLE
texture DiffuseMap : MATERIALTEXTURE;
sampler DiffuseMapSamp = sampler_state 
{
	texture = <DiffuseMap>;
	MINFILTER = LINEAR;
	MAGFILTER = LINEAR;
	MIPFILTER = LINEAR;
	ADDRESSU  = WRAP;
	ADDRESSV  = WRAP;
};
#endif

void ShadowMapVS(
	in float4 Position : POSITION,
	in float4 Texcoord : TEXCOORD0,
	in float3 Normal : NORMAL,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1,
	out float4 oPosition : POSITION)
{
	float cosAngle = 1 - saturate(dot(Normal, -LightDirection));
	oTexcoord0 = Texcoord;
	oTexcoord1 = oPosition = mul(Position + float4(Normal * cosAngle * 0.05, 0), matLightViewProject);
}

float4 ShadowMapPS(in float4 coord : TEXCOORD0, in float4 position : TEXCOORD1) : COLOR
{
#if CASTER_ALPHA_ENABLE
	clip(!opadd - 0.001f);
	
	float alpha = MaterialDiffuse.a;
#if CASTER_ALPHA_MAP_ENABLE
	if (use_texture) alpha *= tex2D(DiffuseMapSamp, coord.xy).a;
#endif
	clip(alpha - CasterAlphaThreshold);
#endif
	return position.z;
}

technique DepthTecSS0 <string MMDPass = "object_ss";> {
	pass DrawObject {
		AlphaBlendEnable = FALSE; AlphaTestEnable = FALSE;
		VertexShader = compile vs_3_0 ShadowMapVS();
		PixelShader  = compile ps_3_0 ShadowMapPS();
	}
}

technique DepthTec0 < string MMDPass = "object"; >{}
technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTec < string MMDPass = "shadow"; > {}
technique ZplotTec < string MMDPass = "zplot"; > {}