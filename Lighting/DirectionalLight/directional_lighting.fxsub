#include "../../ray.conf"
#include "../../shader/math.fxsub"
#include "../../shader/common.fxsub"
#include "../../shader/gbuffer.fxsub"
#include "../../shader/gbuffer_sampler.fxsub"
#include "../../shader/lighting.fxsub"
#include "../../shader/shadowcommon.fxsub"

float mR : CONTROLOBJECT < string name="(self)"; string item = "R+"; >;
float mG : CONTROLOBJECT < string name="(self)"; string item = "G+"; >;
float mB : CONTROLOBJECT < string name="(self)"; string item = "B+"; >;
float mIntensityP : CONTROLOBJECT < string name="(self)"; string item = "Intensity+"; >;
float mIntensityM : CONTROLOBJECT < string name="(self)"; string item = "Intensity-"; >;
float mRange : CONTROLOBJECT < string name="(self)"; string item = "Range+"; >;
float mBlink : CONTROLOBJECT < string name="(self)"; string item = "Blink"; >;
float3 mPosition : CONTROLOBJECT < string name="(self)"; string item = "Position"; >;
float3 mDirection : CONTROLOBJECT < string name="(self)"; string item = "Direction"; >;

static float LightIntensity = (1 - mIntensityM) * LIGHTSOURCE_MIN_INTENSITY + mIntensityP * LIGHTSOURCE_MAX_INTENSITY;

static float LightRange = 50 + mRange * 100;
static float3 LightPosition = mPosition;
static float3 LightDirection = normalize(mDirection - mPosition);
static float3 viewLightPosition = mul(float4(mDirection, 1), matView).xyz;
static float3 viewLightDirection = normalize(mul(LightDirection, (float3x3)matView));

static float4x4 matLightProject = CreateOrthoProject(LightRange, LightRange, LightPlaneNear, LightPlaneFar);
static float4x4 matLightView = CreateLightViewMatrix(LightDirection, LightPosition);
static float4x4 matLightViewProject = mul(matLightView, matLightProject);
static float4x4 matLightProjectToCameraView = mul(matViewInverse, matLightViewProject);

#undef SHADOW_MAP_SIZE

#if SHADOW_MAP_ENABLE
#if SHADOW_MAP_QUALITY == 0
#   define SHADOW_MAP_SIZE 512
#elif SHADOW_MAP_QUALITY == 1
#   define SHADOW_MAP_SIZE 1024
#elif SHADOW_MAP_QUALITY >= 2
#   define SHADOW_MAP_SIZE 2048
#elif SHADOW_MAP_QUALITY >= 3
#   define SHADOW_MAP_SIZE 4086
#else
#   define SHADOW_MAP_SIZE 512
#endif

texture ShadowMap: OFFSCREENRENDERTARGET <
    string Description = "Shadow Rendering for DirectionalLight";
    int Width = SHADOW_MAP_SIZE;
    int Height = SHADOW_MAP_SIZE;
    string Format = "R32F";
    float4 ClearColor = { 0, 0, 0, 0 };
    float ClearDepth = 1.0;
    int MipLevels = 1;
    string DefaultEffect = 
        "self = hide;"
        "ray_controller.pmx=hide;"
        "*.pmx = directional_shadow.fx;"
        "*.pmd = directional_shadow.fx;"
        "* = hide";
>;
sampler ShadowMapSamp = sampler_state {
    texture = <ShadowMap>;
    MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
    AddressU = CLAMP; AddressV = CLAMP;
};

static float2 ShadowmapOffset  = float2(0.5 / SHADOW_MAP_SIZE, 0.5 / SHADOW_MAP_SIZE);
static float2 ShadowmapOffset2 = float2(1.0 / SHADOW_MAP_SIZE, 1.0 / SHADOW_MAP_SIZE);

float ShadowPCF(float3 viewPosition, int samples) 
{
    float4 proj = mul(float4(viewPosition, 1), matLightProjectToCameraView);
    proj.xy = PosToCoord(proj.xy / proj.w);
    proj.xy += ShadowmapOffset;
    proj.z -= ShadowSlopeScaledBias(proj.z);
    proj.z = exp(-(proj.z / proj.w) * 200);

    if (proj.x <= 0.0 || proj.x >= 1.0 ||
        proj.y <= 0.0 || proj.y >= 1.0)
    {
#if DIRECTIONLIGHT_OUT_OF_RANGE
        return 1;
#else
        float2 v = proj.xy - saturate(proj.xy);
        float falloff = smoothstep(0.0001, 0.0, dot(v, v));
        return saturate(falloff);
#endif
    }

    float angle = dot(viewLightDirection, viewPosition - viewLightPosition);
    if (angle < 0)
    {
        return 1;
    }
    else
    {
#if SHADOW_MAP_SOFT_QUALITY > 0
        float shadow = 0.0;

        [unroll]
        for (int x = -samples; x <= samples; x++) 
        {
            [unroll]
            for (int y = -samples; y <= samples; y++)
            {
                float2 pos = proj.xy + float2(x, y) * ShadowmapOffset2;
                shadow += saturate(tex2D(ShadowMapSamp, pos).r * proj.z);
            }
        }
        
        samples = samples * 2 + 1;
        
        return saturate(shadow / (samples * samples));
#else
        return saturate(tex2D(ShadowMapSamp, proj.xy).r * proj.z); 
#endif
    }
}

#endif

float4 ShadingMaterial(MaterialParam material, float3 V)
{
    float3 P = V * material.linearDepth / V.z;
    float3 L = -viewLightDirection;
    float3 L2 = normalize(L);
    
    float atten = saturate(dot(material.normal, L2));
    
    float4 lighting = 0.0f;
    lighting.rgb = material.albedo * DiffuseBRDF(material.normal, L2, V, material.smoothness, material.transmittance);
    lighting.rgb += SpecularBRDF(material.normal, L2, V, material.smoothness, material.specular);
    lighting.rgb *= atten * float3(mR, mG, mB) * LightIntensity;
    lighting *= saturate(1 - SmoothTriangleWave(time * (mBlink * 10)));
    
    return lighting;
}

float4 ShadingShadow(MaterialParam material, MaterialParam materialAlpha, float3 V)
{
    float linearDepth = material.linearDepth;
    float linearDepth2 = materialAlpha.linearDepth;
    linearDepth = linearDepth2 > 1.0 ? min(linearDepth, linearDepth2) : linearDepth;
    
    float3 L = -viewLightDirection;
    float3 L2 = normalize(L);

    float shadow = 1;
#if SHADOW_MAP_ENABLE
    float3 P = V * linearDepth / V.z;
    #if SHADOW_MAP_SOFT_QUALITY == 1
        shadow *= ShadowPCF(P, 1);
    #elif SHADOW_MAP_SOFT_QUALITY >= 2
        shadow *= ShadowPCF(P, 2);
    #elif SHADOW_MAP_SOFT_QUALITY >= 3
        shadow *= ShadowPCF(P, 3);
    #else
        shadow *= ShadowPCF(P, 0);
    #endif
#endif

    return shadow;
}

void LightSourceVS(
    in float4 Position : POSITION,
    in float3 Normal : NORMAL,
    in float2 Texcoord : TEXCOORD0,
    out float4 oTexcoord0 : TEXCOORD0,
    out float4 oTexcoord1 : TEXCOORD1,
    out float4 oPosition  : POSITION)
{   
    oPosition = float4(CoordToPos(Texcoord), 0, 1);
    oTexcoord0 = Texcoord.xyxy + ViewportOffset.xyxy;
    oTexcoord1 = -mul(oPosition, matProjectInverse);
}

void LightSourcePS(
    float2 coord : TEXCOORD0, 
    float3 viewdir : TEXCOORD1,
    out float4 oColor0 : COLOR0,
    out float4 oColor1 : COLOR1)
{
    float4 MRT1 = tex2D(Gbuffer1Map, coord);
    float4 MRT2 = tex2D(Gbuffer2Map, coord);
    float4 MRT3 = tex2D(Gbuffer3Map, coord);
    float4 MRT4 = tex2D(Gbuffer4Map, coord);

    MaterialParam material;
    DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);
    
    float4 MRT5 = tex2D(Gbuffer5Map, coord);
    float4 MRT6 = tex2D(Gbuffer6Map, coord);
    float4 MRT7 = tex2D(Gbuffer7Map, coord);
    float4 MRT8 = tex2D(Gbuffer8Map, coord);

    MaterialParam materialAlpha;
    DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);
    
    float3 sum1 = material.albedo + material.specular;
    float3 sum2 = material.albedo + material.specular;
    clip(sum(sum1 + sum2 - 1e-5));

    float3 V = normalize(viewdir);
    
    oColor0 = ShadingMaterial(material, V);
    oColor1 = ShadingMaterial(materialAlpha, V);
    
    clip(sum(oColor0 + oColor1) - 1e-5);
    
    float shadow = ShadingShadow(material, materialAlpha, V);
    oColor0 *= shadow;
    oColor1 *= shadow;
}

void LightSourceShadowlessPS(
    float2 coord : TEXCOORD0, 
    float3 viewdir : TEXCOORD1,
    out float4 oColor0 : COLOR0,
    out float4 oColor1 : COLOR1)
{
    float4 MRT1 = tex2D(Gbuffer1Map, coord);
    float4 MRT2 = tex2D(Gbuffer2Map, coord);
    float4 MRT3 = tex2D(Gbuffer3Map, coord);
    float4 MRT4 = tex2D(Gbuffer4Map, coord);

    MaterialParam material;
    DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);
    
    float4 MRT5 = tex2D(Gbuffer5Map, coord);
    float4 MRT6 = tex2D(Gbuffer6Map, coord);
    float4 MRT7 = tex2D(Gbuffer7Map, coord);
    float4 MRT8 = tex2D(Gbuffer8Map, coord);

    MaterialParam materialAlpha;
    DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);
    
    float3 sum1 = material.albedo + material.specular;
    float3 sum2 = material.albedo + material.specular;
    clip(sum(sum1 + sum2 - 1e-5));
    
    float3 V = normalize(viewdir);
    
    oColor0 = ShadingMaterial(material, V);
    oColor1 = ShadingMaterial(materialAlpha, V);
}

technique MainTech0 < string MMDPass = "object";
    string Script = 
        "RenderColorTarget0=;"
        "RenderColorTarget1=LightAlphaMap;"
        "Pass=DrawObject;"
;>{
    pass DrawObject {
        ZEnable = false; ZWriteEnable = false;
        AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
        SrcBlend = ONE; DestBlend = ONE;
        CullMode = NONE;
        VertexShader = compile vs_3_0 LightSourceVS();
        PixelShader  = compile ps_3_0 LightSourceShadowlessPS();
    }
}

technique MainTecBS0 < string MMDPass = "object_ss";
    string Script = 
        "RenderColorTarget0=;"
        "RenderColorTarget1=LightAlphaMap;"
        "Pass=DrawObject;"
;>{
    pass DrawObject {
        ZEnable = false; ZWriteEnable = false;
        AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
        SrcBlend = ONE; DestBlend = ONE;
        CullMode = NONE;
        VertexShader = compile vs_3_0 LightSourceVS();
        PixelShader  = compile ps_3_0 LightSourcePS();
    }
}

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}