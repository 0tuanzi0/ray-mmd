#include "../../../ray.conf"
#include "../../../ray_advanced.conf"
#include "../../../shader/math.fxsub"
#include "../../../shader/common.fxsub"
#include "../../../shader/gbuffer.fxsub"
#include "../../../shader/gbuffer_sampler.fxsub"
#include "../../../shader/lighting.fxsub"

#if SHADOW_MAP_ENABLE
#	include "../../../shader/shadowcommon.fxsub"
#endif

float mR : CONTROLOBJECT<string name="(self)"; string item = "R+";>;
float mG : CONTROLOBJECT<string name="(self)"; string item = "G+";>;
float mB : CONTROLOBJECT<string name="(self)"; string item = "B+";>;
float mRange : CONTROLOBJECT<string name="(self)"; string item = "Range+";>;
float mBlink : CONTROLOBJECT<string name="(self)"; string item = "Blink";>;
float mIntensityP : CONTROLOBJECT<string name="(self)"; string item = "Intensity+";>;
float mIntensityM : CONTROLOBJECT<string name="(self)"; string item = "Intensity-";>;
float mMultiLightP : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "MultiLight+";>;
float mMultiLightM : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "MultiLight-";>;

float3 mPosition : CONTROLOBJECT<string name="(self)"; string item = "Position";>;
float3 mDirection : CONTROLOBJECT<string name="(self)"; string item = "Direction";>;

static float LightRange = lerp(50, 200, mRange);
static float LightIntensity = lerp(lerp(LIGHTSOURCE_MIN_INTENSITY, LIGHTSOURCE_MAX_INTENSITY, mIntensityP), 0, mIntensityM);
static float LightIntensity2 = lerp(lerp(mLightIntensityMin, mLightIntensityMax, mMultiLightP), 0, mMultiLightM);

static float3 LightPosition = mPosition;
static float3 LightDirection = normalize(mDirection - mPosition);
static float3 LightColor = float3(mR, mG, mB) * saturate(1 - SmoothTriangleWave(time * (mBlink * 10)));

static float3 viewLightPosition = mul(float4(mDirection, 1), matView).xyz;
static float3 viewLightDirection = normalize(mul(-LightDirection, (float3x3)matView));

#if SHADOW_MAP_ENABLE
	static float4x4 matLightProject = CreateOrthoProject(LightRange, LightRange, mLightZMin, mLightZMax);
	static float4x4 matLightView = CreateLightViewMatrix(LightDirection, LightPosition);
	static float4x4 matLightViewProject = mul(matLightView, matLightProject);
	static float4x4 matLightViewFromCameraView = mul(matViewInverse, matLightView);
	static float4x4 matLightProjectFromCameraView = mul(matViewInverse, matLightViewProject);
#endif

#if SHADOW_MAP_ENABLE
#if SHADOW_MAP_QUALITY == 0
#   define SHADOW_MAP_SIZE 512
#elif SHADOW_MAP_QUALITY == 1
#   define SHADOW_MAP_SIZE 1024
#elif SHADOW_MAP_QUALITY >= 2
#   define SHADOW_MAP_SIZE 2048
#elif SHADOW_MAP_QUALITY >= 3
#   define SHADOW_MAP_SIZE 4086
#else
#   define SHADOW_MAP_SIZE 512
#endif

texture ShadowMap: OFFSCREENRENDERTARGET <
	string Description = "Shadow Rendering for DirectionalLight";
	int Width = SHADOW_MAP_SIZE;
	int Height = SHADOW_MAP_SIZE;
	string Format = "G32R32F";
	float4 ClearColor = { 0, 0, 0, 0 };
	float ClearDepth = 1.0;
	int MipLevels = 1;
	string DefaultEffect = 
		"self = hide;"
		"*fog.pmx=hide;"
		"*controller.pmx=hide;"
		"*.pmx = ../directional_shadow.fx;"
		"*.pmd = ../directional_shadow.fx;"
		"* = hide";
>;
sampler ShadowMapSamp = sampler_state {
	texture = <ShadowMap>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

static float2 ShadowmapOffset  = float2(0.5 / SHADOW_MAP_SIZE, 0.5 / SHADOW_MAP_SIZE);
static float2 ShadowmapOffset2 = float2(1.0 / SHADOW_MAP_SIZE, 1.0 / SHADOW_MAP_SIZE);

float ShadowPCF(float3 viewPosition) 
{
	float4 proj = mul(float4(viewPosition, 1), matLightProjectFromCameraView);
	proj.xy = PosToCoord(proj.xy / proj.w);
	proj.xy += ShadowmapOffset;

	if (proj.x <= 0.0 || proj.x >= 1.0 ||
		proj.y <= 0.0 || proj.y >= 1.0)
	{
#if DIRECTIONLIGHT_OUT_OF_RANGE
		return 1;
#else
		float2 v = proj.xy - saturate(proj.xy);
		float falloff = smoothstep(0.0001, 0.0, dot(v, v));
		return saturate(falloff);
#endif
	}

#if SHADOW_MAP_SOFT_QUALITY > 0
	float2 shadow = 0.0;
	float shadowWeight = 0.0;

	static const float width = 7;
	float radius = (width - 1) / 2;
	float kernel[width];

	float3 incrementalGaussian = IncrementalGaussianCofficent(width);

	[unroll]
	for (int i = 0; i <= radius; ++i)
	{
		incrementalGaussian = IncrementalGaussian(incrementalGaussian);
		kernel[radius - i] = incrementalGaussian.x;
		kernel[radius + i] = incrementalGaussian.x;
	}

	[unroll]
	for (int i = 0; i < width; ++i)
	{
		shadowWeight += kernel[i];
	}

	[unroll]
	for (int x = -radius; x <= radius; x++) 
	{
		[unroll]
		for (int y = -radius; y <= radius; y++)
		{
			float2 pos = proj.xy + float2(x, y) * ShadowmapOffset2;
			float weight = kernel[radius+x] * kernel[radius+y];
			shadow += tex2Dlod(ShadowMapSamp, float4(pos, 0, 0)).rg * weight;
		}
	}

	shadow = shadow / (shadowWeight * shadowWeight);

	float linearDepth = dot(float4(viewPosition,1), matLightViewFromCameraView._13_23_33_43);
	return ChebyshevUpperBound(shadow, linearDepth, 0.1, 0.2);
#else
	float2 shadow = tex2Dlod(ShadowMapSamp, float4(proj.xy, 0, 0)).rg;
	float linearDepth = dot(float4(viewPosition,1), matLightViewFromCameraView._13_23_33_43);
	return ChebyshevUpperBound(shadow, linearDepth, 0.1, 0.2);
#endif
}

float ShadingShadow(MaterialParam material, float3 V)
{
	float angle = saturate(dot(material.normal, viewLightDirection));
	if (angle < 0.0)
	{
		clip(-1);
	}

	float3 P = V * material.linearDepth / V.z;
	float shadow = ShadowPCF(P);
	return shadow;
}

#endif

void ShadingMaterial(MaterialParam material, float3 V, out float3 diffuse, out float3 specular)
{
	float3 P = V * material.linearDepth / V.z;
	float3 L = viewLightDirection;
	float3 L2 = normalize(L);

	float4 energy = SurfaceEnergy(material, material.normal, L2, L2, V, 1.0);
	diffuse = energy.r + SubsurfaceShading(material, material.normal, L, V).rgb;
	specular = energy.gba;

	diffuse *= LightColor * LightIntensity * LightIntensity2;
	specular *= LightColor * LightIntensity * LightIntensity2;
}

void LightSourceVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1,
	out float4 oPosition  : POSITION)
{   
	oPosition = float4(CoordToPos(Texcoord), 0, 1);
	oTexcoord0 = Texcoord.xyxy + ViewportOffset.xyxy;
	oTexcoord1 = -mul(oPosition, matProjectInverse);
}

void LightSourcePS(
	float2 coord : TEXCOORD0, 
	float3 viewdir : TEXCOORD1,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1,
	out float4 oColor2 : COLOR2)
{
	float4 MRT1 = tex2Dlod(Gbuffer1Map, float4(coord, 0, 0));
	float4 MRT2 = tex2Dlod(Gbuffer2Map, float4(coord, 0, 0));
	float4 MRT3 = tex2Dlod(Gbuffer3Map, float4(coord, 0, 0));
	float4 MRT4 = tex2Dlod(Gbuffer4Map, float4(coord, 0, 0));

	MaterialParam material;
	DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);

	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	MaterialParam materialAlpha;
	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);

	clip(sum(materialAlpha.albedo + materialAlpha.specular) - 1e-5);

	float3 V = normalize(viewdir);

	float3 diffuse, specular;
	ShadingMaterial(material, V, diffuse, specular);

	float3 diffuseAlpha, specularAlpha;
	ShadingMaterial(materialAlpha, V, diffuseAlpha, specularAlpha);

#if SSSS_QUALITY
	oColor0 = float4(diffuse, 0);
#else
	oColor0 = float4(diffuse * material.albedo, 0);
#endif
	oColor1 = float4(specular, 0);
	oColor2 = float4(diffuseAlpha * materialAlpha.albedo + specularAlpha, 0);

#if SHADOW_MAP_ENABLE
	clip(sum(oColor0 + oColor1 + oColor2) - 1e-5);

	float shadow = ShadingShadow(materialAlpha, V);
	oColor0 *= shadow;
	oColor1 *= shadow;
	oColor2 *= shadow;
#endif
}

void LightSourceShadowlessPS(
	float2 coord : TEXCOORD0, 
	float3 viewdir : TEXCOORD1,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1,
	out float4 oColor2 : COLOR2)
{
	float4 MRT1 = tex2Dlod(Gbuffer1Map, float4(coord, 0, 0));
	float4 MRT2 = tex2Dlod(Gbuffer2Map, float4(coord, 0, 0));
	float4 MRT3 = tex2Dlod(Gbuffer3Map, float4(coord, 0, 0));
	float4 MRT4 = tex2Dlod(Gbuffer4Map, float4(coord, 0, 0));

	MaterialParam material;
	DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);

	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	MaterialParam materialAlpha;
	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);

	clip(sum(materialAlpha.albedo + materialAlpha.specular) - 1e-5);

	float3 V = normalize(viewdir);

	float3 diffuse, specular;
	ShadingMaterial(material, V, diffuse, specular);

	float3 diffuseAlpha, specularAlpha;
	ShadingMaterial(materialAlpha, V, diffuseAlpha, specularAlpha);

#if SSSS_QUALITY
	oColor0 = float4(diffuse, 0);
#else
	oColor0 = float4(diffuse * material.albedo, 0);
#endif
	oColor1 = float4(specular, 0);
	oColor2 = float4(diffuseAlpha * materialAlpha.albedo + specularAlpha, 0);
}

technique MainTech0<string MMDPass = "object";
	string Script = 
		"RenderColorTarget0=;"
		"RenderColorTarget1=LightSpecMap;"
		"RenderColorTarget2=LightAlphaMap;"
		"Pass=DrawObject;"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = NONE;
		VertexShader = compile vs_3_0 LightSourceVS();
		PixelShader  = compile ps_3_0 LightSourceShadowlessPS();
	}
}

technique MainTecBS0<string MMDPass = "object_ss";
	string Script = 
		"RenderColorTarget0=;"
		"RenderColorTarget1=LightSpecMap;"
		"RenderColorTarget2=LightAlphaMap;"
		"Pass=DrawObject;"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = NONE;
		VertexShader = compile vs_3_0 LightSourceVS();
		PixelShader  = compile ps_3_0 LightSourcePS();
	}
}

technique EdgeTec<string MMDPass = "edge";> {}
technique ShadowTech<string MMDPass = "shadow";> {}
technique ZplotTec<string MMDPass = "zplot";> {}