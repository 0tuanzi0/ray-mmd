#include "../../../ray.conf"
#include "../../../ray_advanced.conf"
#include "../../../shader/math.fxsub"
#include "../../../shader/common.fxsub"
#include "../../../shader/gbuffer.fxsub"
#include "../../../shader/gbuffer_sampler.fxsub"
#include "../../../shader/BRDF.fxsub"

#if SHADOW_MAP_FROM >= 1
#	include "../../../shader/ShadowMapCascaded.fxsub"
#endif

float mR : CONTROLOBJECT<string name = "(self)"; string item = "R+";>;
float mG : CONTROLOBJECT<string name = "(self)"; string item = "G+";>;
float mB : CONTROLOBJECT<string name = "(self)"; string item = "B+";>;
float mRangeP : CONTROLOBJECT<string name = "(self)"; string item = "Range+";>;
float mRangeM : CONTROLOBJECT<string name = "(self)"; string item = "Range-";>;
float mBlink : CONTROLOBJECT<string name = "(self)"; string item = "Blink";>;
float mIntensityP : CONTROLOBJECT<string name = "(self)"; string item = "Intensity+";>;
float mIntensityM : CONTROLOBJECT<string name = "(self)"; string item = "Intensity-";>;
float mHardnessP : CONTROLOBJECT<string name = "(self)"; string item = "Hardness";>;
float mMultiLightP : CONTROLOBJECT<string name = "ray_controller.pmx"; string item = "MultiLight+";>;
float mMultiLightM : CONTROLOBJECT<string name = "ray_controller.pmx"; string item = "MultiLight-";>;

float3 mPosition : CONTROLOBJECT<string name = "(self)"; string item = "Position";>;
float3 mDirection : CONTROLOBJECT<string name = "(self)"; string item = "Direction";>;

static const float LightRange = lerp(lerp(1000, 2000, mRangeP), 0, mRangeM);
static const float LightHardness = lerp(0.15, 0.5, mHardnessP);
static const float LightBlink = saturate(1 - SmoothTriangleWave(time * mBlink * 10));
static const float LightIntensity = lerp(lerp(lightIntensityLimits.x, lightIntensityLimits.y, mIntensityP), 0, mIntensityM);
static const float LightIntensity2 = lerp(lerp(mLightIntensityMin, mLightIntensityMax, mMultiLightP), 0, mMultiLightM);

static const float3 LightPosition = mPosition;
static const float3 LightDirection = normalize(mDirection - mPosition);
static const float3 LightColor = float3(mR, mG, mB) * LightIntensity * LightIntensity2 * LightBlink;

static const float3 viewLightPosition = mul(float4(mDirection, 1), matView).xyz;
static const float3 viewLightDirection = normalize(mul(-LightDirection, (float3x3)matView));

#if SHADOW_MAP_FROM >= 1
#if SHADOW_QUALITY == 1
#	define SHADOW_MAP_SIZE 1024
#elif SHADOW_QUALITY == 2
#	define SHADOW_MAP_SIZE 2048
#elif SHADOW_QUALITY == 3
#	define SHADOW_MAP_SIZE 4096
#elif SHADOW_QUALITY == 4
#	define SHADOW_MAP_SIZE 8192
#else
#	define SHADOW_MAP_SIZE 2048
#endif

texture PSSM1 : OFFSCREENRENDERTARGET<
	string Description = "Shadow Rendering for DirectionalLight";
	int2 Dimensions = {SHADOW_MAP_SIZE, SHADOW_MAP_SIZE};
	string Format = "G32R32F";
	float4 ClearColor = { 0, 0, 0, 0 };
	float ClearDepth = 1.0;
	string DefaultEffect = 
		"self = hide;"
		"*fog.pmx=hide;"
		"*controller.pmx=hide;"
		"*editor*.pmx=hide;"
		"*.pmx = ../PSSM1.fx;"
		"*.pmd = ../PSSM1.fx;"
		"* = hide";
>;
texture PSSM2 : OFFSCREENRENDERTARGET<
	string Description = "Shadow Rendering for DirectionalLight";
	int2 Dimensions = {SHADOW_MAP_SIZE, SHADOW_MAP_SIZE};
	string Format = "G32R32F";
	float4 ClearColor = { 0, 0, 0, 0 };
	float ClearDepth = 1.0;
	string DefaultEffect = 
		"self = hide;"
		"*fog.pmx=hide;"
		"*controller.pmx=hide;"
		"*editor*.pmx=hide;"
		"*.pmx = ../PSSM2.fx;"
		"*.pmd = ../PSSM2.fx;"
		"* = hide";
>;
texture PSSM3 : OFFSCREENRENDERTARGET<
	string Description = "Shadow Rendering for DirectionalLight";
	int2 Dimensions = {SHADOW_MAP_SIZE, SHADOW_MAP_SIZE};
	string Format = "G32R32F";
	float4 ClearColor = { 0, 0, 0, 0 };
	float ClearDepth = 1.0;
	string DefaultEffect = 
		"self = hide;"
		"*fog.pmx=hide;"
		"*controller.pmx=hide;"
		"*editor*.pmx=hide;"
		"*.pmx = ../PSSM3.fx;"
		"*.pmd = ../PSSM3.fx;"
		"* = hide";
>;
texture PSSM4 : OFFSCREENRENDERTARGET<
	string Description = "Shadow Rendering for DirectionalLight";
	int2 Dimensions = {SHADOW_MAP_SIZE, SHADOW_MAP_SIZE};
	string Format = "G32R32F";
	float4 ClearColor = { 0, 0, 0, 0 };
	float ClearDepth = 1.0;
	string DefaultEffect = 
		"self = hide;"
		"*fog.pmx=hide;"
		"*controller.pmx=hide;"
		"*editor*.pmx=hide;"
		"*.pmx = ../PSSM4.fx;"
		"*.pmd = ../PSSM4.fx;"
		"* = hide";
>;
sampler PSSM1Samp = sampler_state {
	texture = <PSSM1>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};
sampler PSSM2Samp = sampler_state {
	texture = <PSSM2>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};
sampler PSSM3Samp = sampler_state {
	texture = <PSSM3>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};
sampler PSSM4Samp = sampler_state {
	texture = <PSSM4>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

static const float2 ShadowmapOffset  = 0.5 / SHADOW_MAP_SIZE;
static const float2 ShadowmapOffset2 = 1.0 / SHADOW_MAP_SIZE;

static const float4x4 matLightProject = CreateOrthoProject(2.0, 2.0, mPSSMDepthZMin, mPSSMDepthZMax);
static const float4x4 matLightView = CreateLightViewMatrix(LightDirection, -LightDirection, LightRange);
static const float4x4 matLightViewProject = mul(matLightView, matLightProject);
static const float4x4 matLightViewFromCameraView = mul(matViewInverse, matLightView);
static const float4x4 matLightProjectFromCameraView = mul(matViewInverse, matLightViewProject);
static const float4x4 lightCropParams = CreateLightCropParams(matLightViewFromCameraView, SHADOW_MAP_SIZE);

float ShadowPCF(sampler source, float2 coord, float receiverDepth) 
{
	float2 shadow = 0.0;

	[unroll]
	for (int x = -sampleRadius; x <= sampleRadius; x++) 
	{
		[unroll]
		for (int y = -sampleRadius; y <= sampleRadius; y++)
		{
			float2 pos = coord + float2(x, y) * (1.0 / SHADOW_MAP_SIZE);
			shadow += tex2Dlod(source, float4(pos, 0, 0)).rg * sampleKernel[sampleRadius + x] * sampleKernel[sampleRadius + y];
		}
	}

	return ChebyshevUpperBound(shadow, receiverDepth, 0.25, LightHardness);
}

float ShadingShadow(MaterialParam material, float3 viewPosition)
{
	float3 view = normalize(viewPosition);
	float4 proj = mul(float4(viewPosition, 1), matLightProjectFromCameraView);

	float4 lightPPos01 = proj.xyxy * float4(lightCropParams[0].xy, lightCropParams[1].xy) + float4(lightCropParams[0].zw, lightCropParams[1].zw);
	float4 lightPPos23 = proj.xyxy * float4(lightCropParams[2].xy, lightCropParams[3].xy) + float4(lightCropParams[2].zw, lightCropParams[3].zw);

	float4 lightCoord01 = PosToCoord(lightPPos01);
	float4 lightCoord23 = PosToCoord(lightPPos23);

	float4 lightPPos0 = float4(lightCoord01.xy, min2(float2(1, 1) - abs(lightPPos01.xy)), 0);
	float4 lightPPos1 = float4(lightCoord01.zw, min2(float2(1, 1) - abs(lightPPos01.zw)), 1);
	float4 lightPPos2 = float4(lightCoord23.xy, min2(float2(1, 1) - abs(lightPPos23.xy)), 2);
	float4 lightPPos3 = float4(lightCoord23.zw, min2(float2(1, 1) - abs(lightPPos23.zw)), 3);

	float4 coord0 = lightPPos3;
	float4 coord1 = 0;
	if (lightPPos2.z > 0.0) { coord1 = coord0; coord0 = lightPPos2; }
	if (lightPPos1.z > 0.0) { coord1 = coord0; coord0 = lightPPos1; }
	if (lightPPos0.z > 0.0) { coord1 = coord0; coord0 = lightPPos0; }
	clip(coord0.z);

	coord0.xy += 0.5 / float(SHADOW_MAP_SIZE);
	coord1.xy += 0.5 / float(SHADOW_MAP_SIZE);

	float receiverDepth = proj.z;
	float depthSlope = ShadowSlopeScaledBias(proj.z / mPSSMDepthZMax) * mPSSMDepthZMax;
	receiverDepth -= (material.linearDepth + depthSlope) * 0.0035 + max(0, material.linearDepth - 100) * 0.007;

	float shadow = 0;

	[branch]
	if (coord0.w == 0)
		shadow = ShadowPCF(PSSM1Samp, coord0.xy, receiverDepth);
	else if (coord0.w == 1)
		shadow = ShadowPCF(PSSM2Samp, coord0.xy, receiverDepth);
	else if (coord0.w == 2)
		shadow = ShadowPCF(PSSM3Samp, coord0.xy, receiverDepth);
	else
		shadow = ShadowPCF(PSSM4Samp, coord0.xy, receiverDepth);

	return shadow;
}
#endif

void ShadingMaterial(MaterialParam material, float3 P, float3 V, float shadow, inout float3 diffuse, inout float3 specular)
{
	float3 L = viewLightDirection;
	float3 L2 = normalize(L);

	float2x3 energy = SurfaceEnergy(material, material.normal, L2, V, shadow);
	diffuse = energy[0] + SubsurfaceShading(material, material.normal, L2, V);
	diffuse *= LightColor;

#if LIGHT_PARAMS_TYPE == 0 || LIGHT_PARAMS_TYPE == 2
	specular = energy[1];
	specular *= LightColor;
#endif
}

void GetGbufferParams(float2 coord, out MaterialParam material, out MaterialParam materialAlpha)
{
	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);

	clip(sum(materialAlpha.albedo + materialAlpha.specular) - 1e-5);

	float4 MRT1 = tex2Dlod(Gbuffer1Map, float4(coord, 0, 0));
	float4 MRT2 = tex2Dlod(Gbuffer2Map, float4(coord, 0, 0));
	float4 MRT3 = tex2Dlod(Gbuffer3Map, float4(coord, 0, 0));
	float4 MRT4 = tex2Dlod(Gbuffer4Map, float4(coord, 0, 0));

	DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);
}

void LightSourceVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1,
	out float4 oPosition  : POSITION)
{
	oPosition = float4(CoordToPos(Texcoord), 0, 1);
	oTexcoord0 = Texcoord.xyxy + ViewportOffset.xyxy;
	oTexcoord1 = -mul(oPosition, matProjectInverse);
}

void LightSourcePS(
	float2 coord : TEXCOORD0, 
	float3 viewdir : TEXCOORD1,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1,
	out float4 oColor2 : COLOR2)
{
	MaterialParam material;
	MaterialParam materialAlpha;
	GetGbufferParams(coord, material, materialAlpha);

	float3 V = normalize(viewdir);

	float3 P1 = V * material.linearDepth / V.z;
	float3 P2 = V * materialAlpha.linearDepth / V.z;

	float shadow = 1;
#if SHADOW_MAP_FROM >= 1
	shadow = ShadingShadow(materialAlpha, P2);
	clip(shadow - 1e-5);
#endif

	float3 diffuse, specular = 0;
	ShadingMaterial(material, P1, V, shadow, diffuse, specular);

	float3 diffuseAlpha, specularAlpha = 0;
	ShadingMaterial(materialAlpha, P2, V, shadow, diffuseAlpha, specularAlpha);

	oColor0 = float4(diffuse, 0);
	oColor1 = float4(specular, 0);
	oColor2 = float4(diffuseAlpha * materialAlpha.albedo + specularAlpha, 0);
}

void LightSourceShadowlessPS(
	float2 coord : TEXCOORD0, 
	float3 viewdir : TEXCOORD1,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1,
	out float4 oColor2 : COLOR2)
{
	MaterialParam material;
	MaterialParam materialAlpha;
	GetGbufferParams(coord, material, materialAlpha);

	float3 V = normalize(viewdir);

	float3 P1 = V * material.linearDepth / V.z;
	float3 P2 = V * materialAlpha.linearDepth / V.z;

	float3 diffuse, specular = 0;
	ShadingMaterial(material, P1, V, 1, diffuse, specular);

	float3 diffuseAlpha, specularAlpha = 0;
	ShadingMaterial(materialAlpha, P2, V, 1, diffuseAlpha, specularAlpha);

	oColor0 = float4(diffuse, 0);
	oColor1 = float4(specular, 0);
	oColor2 = float4(diffuseAlpha * materialAlpha.albedo + specularAlpha, 0);
}

technique MainTech0<string MMDPass = "object";
	string Script = 
		"RenderColorTarget0=;"
		"RenderColorTarget1=LightSpecMap;"
		"RenderColorTarget2=LightAlphaMap;"
		"Pass=DrawObject;"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = NONE;
		VertexShader = compile vs_3_0 LightSourceVS();
		PixelShader  = compile ps_3_0 LightSourceShadowlessPS();
	}
}

technique MainTecBS0<string MMDPass = "object_ss";
	string Script = 
		"RenderColorTarget0=;"
		"RenderColorTarget1=LightSpecMap;"
		"RenderColorTarget2=LightAlphaMap;"
		"Pass=DrawObject;"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = NONE;
		VertexShader = compile vs_3_0 LightSourceVS();
		PixelShader  = compile ps_3_0 LightSourcePS();
	}
}

technique EdgeTec<string MMDPass = "edge";>{}
technique ShadowTech<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}