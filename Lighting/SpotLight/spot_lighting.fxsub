#include "../../../ray.conf"
#include "../../../ray_advanced.conf"
#include "../../../shader/math.fxsub"
#include "../../../shader/common.fxsub"
#include "../../../shader/gbuffer.fxsub"
#include "../../../shader/gbuffer_sampler.fxsub"
#include "../../../shader/BRDF.fxsub"
#include "../../../shader/arealight.fxsub"

#if SHADOW_MAP_FROM > 0
#	include "../../../shader/shadowcommon.fxsub"
#endif

float mR : CONTROLOBJECT<string name = "(self)"; string item = "R+";>;
float mG : CONTROLOBJECT<string name = "(self)"; string item = "G+";>;
float mB : CONTROLOBJECT<string name = "(self)"; string item = "B+";>;
float mBlink : CONTROLOBJECT<string name = "(self)"; string item = "Blink";>;
float mRangeP : CONTROLOBJECT<string name = "(self)"; string item = "Range+";>;
float mRangeM : CONTROLOBJECT<string name = "(self)"; string item = "Range-";>;
float mAngleP : CONTROLOBJECT<string name = "(self)"; string item = "Angle+";>;
float mAngleM : CONTROLOBJECT<string name = "(self)"; string item = "Angle-";>;
float mHardnessP : CONTROLOBJECT<string name = "(self)"; string item = "Hardness";>;
float mSoftnessP : CONTROLOBJECT<string name = "(self)"; string item = "Softness";>;
float mIntensityP : CONTROLOBJECT<string name = "(self)"; string item = "Intensity+";>;
float mIntensityM : CONTROLOBJECT<string name = "(self)"; string item = "Intensity-";>;
float mAttenuationBulbP : CONTROLOBJECT<string name = "(self)"; string item = "AttenuationBulb+";>;
float mAttenuationBulbM : CONTROLOBJECT<string name = "(self)"; string item = "AttenuationBulb-";>;
float mMultiLightP : CONTROLOBJECT<string name = "ray_controller.pmx"; string item = "MultiLight+";>;
float mMultiLightM : CONTROLOBJECT<string name = "ray_controller.pmx"; string item = "MultiLight-";>;

float3 mPosition : CONTROLOBJECT<string name = "(self)"; string item = "Position";>;
float3 mDirection : CONTROLOBJECT<string name = "(self)"; string item = "Direction";>;

static const float LightSoftness = lerp(shadowSoftness.x, shadowSoftness.y, mSoftnessP);
static const float LightHardness = lerp(shadowHardness.x, shadowHardness.y, mHardnessP);
static const float LightBlink = saturate(1 - SmoothTriangleWave(time * mBlink * 10));
static const float LightAngle = radians(lerp(lerp(45.0f, 60.0f, mAngleP), 30.0f, mAngleM));
static const float LightRange = lerp(lerp(lightRangeParams.x, lightRangeParams.z, mRangeP), lightRangeParams.y, mRangeM);
static const float LightAttenuationBulb = lerp(lerp(lightAttenuationBulbParams.x, lightAttenuationBulbParams.z, mAttenuationBulbP), lightAttenuationBulbParams.y, mAttenuationBulbM);
static const float LightIntensity = lerp(lerp(lightIntensityParams.x, lightIntensityParams.z, mIntensityP), lightIntensityParams.y, mIntensityM);
static const float LightIntensity2 = lerp(lerp(mLightIntensityMin, mLightIntensityMax, mMultiLightP), 0, mMultiLightM);

static const float3 LightPosition = mPosition;
static const float3 LightDirection = normalize(mDirection - mPosition);
static const float3 LightColor = float3(mR, mG, mB) * LightIntensity * LightIntensity2 * LightBlink;

static const float3 viewLightPosition = mul(float4(LightPosition, 1), matView).xyz;
static const float3 viewLightDirection = normalize(mul(-LightDirection, (float3x3)matView));

#if SHADOW_MAP_FROM > 0
#if SHADOW_MAP_QUALITY == 0
#   define SHADOW_MAP_SIZE 256
#elif SHADOW_MAP_QUALITY == 1
#   define SHADOW_MAP_SIZE 512
#elif SHADOW_MAP_QUALITY >= 2
#   define SHADOW_MAP_SIZE 1024
#elif SHADOW_MAP_QUALITY >= 3
#   define SHADOW_MAP_SIZE 2048
#else
#   define SHADOW_MAP_SIZE 256
#endif

texture ShadowMap: OFFSCREENRENDERTARGET<
	string Description = "Shadow Rendering for SpotLight";
	string Format = "G32R32F";
	int2 Dimensions = {SHADOW_MAP_SIZE, SHADOW_MAP_SIZE};
	float4 ClearColor = { 0, 0, 0, 0 };
	float ClearDepth = 1.0;
	string DefaultEffect = 
		"self = hide;"
		"*fog.pmx=hide;"
		"*controller*.pmx=hide;"
		"*editor*.pmx=hide;"
		"*.pmx = ../spot_shadow.fx;"
		"*.pmd = ../spot_shadow.fx;"
		"* = hide";
>;

sampler ShadowMapSamp = sampler_state {
	texture = <ShadowMap>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

static float2 ShadowMapOffset  = 0.5 / SHADOW_MAP_SIZE;
static float2 ShadowMapOffset2 = 1.0 / SHADOW_MAP_SIZE;

static float4x4 matLightProject = CreatePerspectiveProject(LightAngle, 1, mLightPlaneNear, mLightPlaneFar);
static float4x4 matLightView = CreateLightViewMatrix(LightDirection, LightPosition);
static float4x4 matLightViewProject = mul(matLightView, matLightProject);
static float4x4 matLightViewFromCameraView = mul(matViewInverse, matLightView);
static float4x4 matLightProjectFromCameraView = mul(matViewInverse, matLightViewProject);

#define SHADOW_POISSON_COUNT 25

static const float2 Poisson[SHADOW_POISSON_COUNT] =
{
	float2(-0.978698, -0.0884121),
	float2(-0.841121, 0.521165),
	float2(-0.71746, -0.50322),
	float2(-0.702933, 0.903134),
	float2(-0.663198, 0.15482),
	float2(-0.495102, -0.232887),
	float2(-0.364238, -0.961791),
	float2(-0.345866, -0.564379),
	float2(-0.325663, 0.64037),
	float2(-0.182714, 0.321329),
	float2(-0.142613, -0.0227363),
	float2(-0.0564287, -0.36729),
	float2(-0.0185858, 0.918882),
	float2(0.0381787, -0.728996),
	float2(0.16599, 0.093112),
	float2(0.253639, 0.719535),
	float2(0.369549, -0.655019),
	float2(0.423627, 0.429975),
	float2(0.530747, -0.364971),
	float2(0.566027, -0.940489),
	float2(0.639332, 0.0284127),
	float2(0.652089, 0.669668),
	float2(0.773797, 0.345012),
	float2(0.968871, 0.840449),
	float2(0.991882, -0.657338)
};

float2 Rotate(float2 pos, float2 rotation)
{
	return float2(pos.x * rotation.x - pos.y * rotation.y, pos.y * rotation.x + pos.x * rotation.y);
}

float ShadowPCF(sampler source, float2 coord, float2 radius, float2 rotation, float receiverDepth)
{
	float2 shadow = 0.0;

	for (int x = -sampleRadius; x <= sampleRadius; x++) 
	{
		for (int y = -sampleRadius; y <= sampleRadius; y++)
		{
			float2 pos = coord + Rotate(float2(x, y) * radius, rotation);
			shadow += tex2Dlod(source, float4(pos, 0.0, 0.0)).rg * sampleKernel[sampleRadius + x] * sampleKernel[sampleRadius + y];
		}
	}

	return ChebyshevUpperBound(shadow, receiverDepth, 1e-5, LightHardness);
}

float ShadowPCSS(sampler source, float2 coord, float lightRadius, float2 rotation, float receiverDepth)
{
	float depthAccum = 0.0;
	float depthAccumNums = 0.0;

	float sampleRadius = lightRadius * (receiverDepth - 1.0) / receiverDepth;

	for (int i = 0; i < SHADOW_POISSON_COUNT; ++i)
	{
		float2 offset = Rotate(Poisson[i] * sampleRadius, rotation);

		float shadowMapDepth = tex2Dlod(source, float4(coord + offset, 0.0, 0.0)).r;

		if (shadowMapDepth < (receiverDepth + dot(coord, offset)))
		{
			depthAccum += shadowMapDepth;
			depthAccumNums += 1.0;
		}
	}

	if (depthAccumNums == 0)
		return 1.0;

	float avgDepth = depthAccum / depthAccumNums;

	float weight = (receiverDepth - avgDepth) * sampleRadius;
	float filterRadius = 1.0 / (SHADOW_MAP_SIZE * weight);

	return ShadowPCF(source, coord, filterRadius, rotation, receiverDepth);
}

float ShadingShadow(MaterialParam material, float3 P)
{
	float4 proj = mul(float4(P, 1), matLightProjectFromCameraView);
	proj.xy = PosToCoord(proj.xy / proj.w);
	proj.xy += ShadowMapOffset;

	float linearDepth = length(mul(float4(P, 1), matLightViewFromCameraView));

	float rotationAngle = PseudoRandom(proj.xy * ViewportSize) * PI;
	float2 rotationTrig = float2(cos(rotationAngle), sin(rotationAngle));

#if SHADOW_MAP_TYPE == 1
	return ShadowPCSS(ShadowMapSamp, proj.xy, LightSoftness, rotationTrig, linearDepth);
#else
	return ShadowPCF(ShadowMapSamp, proj.xy, ShadowMapOffset2, rotationTrig, linearDepth);
#endif
}

#endif

void ShadingMaterial(MaterialParam material, float3 P, float3 V, float shadow, inout float3 diffuse, inout float3 specular)
{
	float3 L = viewLightPosition - P;
	float3 L2 = normalize(L);

	float3 atten = GetPhysicalLightAttenuation(L, LightRange, LightAttenuationBulb);
	atten *= GetSpotLightAttenuation(L2, viewLightDirection, LightAngle);
	atten *= LightColor;

	float2x3 energy = SurfaceEnergy(material, material.normal, L2, V, shadow);
	diffuse = energy[0] + SubsurfaceShading(material, material.normal, L2, V);
	diffuse *= atten;

#if LIGHT_PARAMS_TYPE == 0
	specular = energy[1];
	specular *= atten;
#endif
}

void GetGbufferParams(float4 texcoord, out MaterialParam material, out MaterialParam materialAlpha)
{
	float2 coord = texcoord.xy / texcoord.w;

	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);

	clip(sum(materialAlpha.albedo + materialAlpha.specular) - 1e-5);

	float4 MRT1 = tex2Dlod(Gbuffer1Map, float4(coord, 0, 0));
	float4 MRT2 = tex2Dlod(Gbuffer2Map, float4(coord, 0, 0));
	float4 MRT3 = tex2Dlod(Gbuffer3Map, float4(coord, 0, 0));
	float4 MRT4 = tex2Dlod(Gbuffer4Map, float4(coord, 0, 0));

	DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);
}

void LightSourceVS(
	in float4 Position : POSITION,
	in float3 Normal : NORMAL,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1,
	out float4 oPosition  : POSITION)
{
	Position.xyz = LightPosition + Normal * LightRange;
	oTexcoord1 = -mul(Position, matView);
	oTexcoord0 = oPosition = mul(Position, matViewProject);
	oTexcoord0.xy = PosToCoord(oTexcoord0.xy / oTexcoord0.w) + ViewportOffset;
	oTexcoord0.xy = oTexcoord0.xy * oTexcoord0.w;
}

void LightSourcePS(
	float4 texcoord : TEXCOORD0, 
	float3 viewdir : TEXCOORD1,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1,
	out float4 oColor2 : COLOR2)
{
	MaterialParam material;
	MaterialParam materialAlpha;
	GetGbufferParams(texcoord, material, materialAlpha);

	float3 V = normalize(viewdir);

	float3 P1 = V * material.linearDepth / V.z;
	float3 P2 = V * materialAlpha.linearDepth / V.z;

	float shadow = 1;
#if SHADOW_MAP_FROM
	shadow = ShadingShadow(materialAlpha, P2);
	clip(shadow - 1e-5);
#endif

	float3 diffuse, specular = 0;
	ShadingMaterial(material, P1, V, shadow, diffuse, specular);

	float3 diffuseAlpha, specularAlpha = 0;
	ShadingMaterial(materialAlpha, P2, V, shadow, diffuseAlpha, specularAlpha);

	oColor0 = float4(diffuse, 0);
	oColor1 = float4(specular, 0);
	oColor2 = float4(diffuseAlpha * materialAlpha.albedo + specularAlpha, 0);
}

void LightSourceShadowlessPS(
	float4 texcoord : TEXCOORD0, 
	float3 viewdir : TEXCOORD1,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1,
	out float4 oColor2 : COLOR2)
{
	MaterialParam material;
	MaterialParam materialAlpha;
	GetGbufferParams(texcoord, material, materialAlpha);

	float3 V = normalize(viewdir);
	
	float3 P1 = V * material.linearDepth / V.z;
	float3 P2 = V * materialAlpha.linearDepth / V.z;

	float3 diffuse, specular = 0;
	ShadingMaterial(material, P1, V, 1, diffuse, specular);

	float3 diffuseAlpha, specularAlpha = 0;
	ShadingMaterial(materialAlpha, P2, V, 1, diffuseAlpha, specularAlpha);

	oColor0 = float4(diffuse, 0);
	oColor1 = float4(specular, 0);
	oColor2 = float4(diffuseAlpha * materialAlpha.albedo + specularAlpha, 0);
}

technique MainTech0<string MMDPass = "object";
	string Script = 
		"RenderColorTarget0=;"
		"RenderColorTarget1=LightSpecMap;"
		"RenderColorTarget2=LightAlphaMap;"
		"Pass=DrawObject;"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = CW;
		VertexShader = compile vs_3_0 LightSourceVS();
		PixelShader  = compile ps_3_0 LightSourceShadowlessPS();
	}
}

technique MainTecBS0<string MMDPass = "object_ss";
	string Script = 
		"RenderColorTarget0=;"
		"RenderColorTarget1=LightSpecMap;"
		"RenderColorTarget2=LightAlphaMap;"
		"Pass=DrawObject;"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = CW;
		VertexShader = compile vs_3_0 LightSourceVS();
		PixelShader  = compile ps_3_0 LightSourcePS();
	}
}

technique EdgeTec<string MMDPass = "edge";>{}
technique ShadowTech<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}