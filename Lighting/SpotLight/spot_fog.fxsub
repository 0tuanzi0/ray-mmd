#include "../../../ray.conf"
#include "../../../ray_advanced.conf"
#include "../../../shader/math.fxsub"
#include "../../../shader/common.fxsub"
#include "../../../shader/shadowcommon.fxsub"
#include "../../../shader/gbuffer.fxsub"
#include "../../../shader/gbuffer_sampler.fxsub"
#include "../../../shader/PhaseFunctions.fxsub"
#include "../../../shader/lighting.fxsub"
#include "../../../shader/arealight.fxsub"

float mR : CONTROLOBJECT<string name="(self)"; string item = "R+";>;
float mG : CONTROLOBJECT<string name="(self)"; string item = "G+";>;
float mB : CONTROLOBJECT<string name="(self)"; string item = "B+";>;
float mRangeP : CONTROLOBJECT<string name="(self)"; string item = "Range+";>;
float mRangeM : CONTROLOBJECT<string name="(self)"; string item = "Range-";>;
float mIntensityP : CONTROLOBJECT<string name="(self)"; string item = "Intensity+";>;
float mIntensityM : CONTROLOBJECT<string name="(self)"; string item = "Intensity-";>;
float mAngleP : CONTROLOBJECT<string name = "(self)"; string item = "Angle+";>;
float mAngleM : CONTROLOBJECT<string name = "(self)"; string item = "Angle-";>;
float mBlink : CONTROLOBJECT<string name="(self)"; string item = "Blink";>;
float mAttenuationBulbP : CONTROLOBJECT<string name = "(self)"; string item = "AttenuationBulb+";>;
float mAttenuationBulbM : CONTROLOBJECT<string name = "(self)"; string item = "AttenuationBulb-";>;
float mMiePhaseP : CONTROLOBJECT<string name="(self)"; string item = "MiePhase+";>;
float mMiePhaseM : CONTROLOBJECT<string name="(self)"; string item = "MiePhase-";>;
float mMieDensityP : CONTROLOBJECT<string name="(self)"; string item = "MieDensity+";>;
float mMieDensityM : CONTROLOBJECT<string name="(self)"; string item = "MieDensity-";>;

float3 mPosition : CONTROLOBJECT<string name="(self)"; string item = "Position";>;
float3 mDirection : CONTROLOBJECT<string name = "(self)"; string item = "Direction";>;

static const float FogBlink = saturate(1 - SmoothTriangleWave(time * mBlink * 10));
static const float FogAngle = radians(lerp(lerp(FogAngleParams.x, FogAngleParams.z, mAngleP), FogAngleParams.y, mAngleM));
static const float FogMiePhase  = lerp(lerp(FogMieParams.x, FogMieParams.z, mMiePhaseP), FogMieParams.y, mMiePhaseM);
static const float FogRange = lerp(lerp(FogRangeParams.x, FogRangeParams.z, mRangeP), FogRangeParams.y, mRangeM);
static const float FogDensity = lerp(lerp(FogDensityParams.x, FogDensityParams.z, mMieDensityP), FogDensityParams.y, mMieDensityM);
static const float FogIntensity = lerp(lerp(FogIntensityParams.x, FogIntensityParams.z, mIntensityP), FogIntensityParams.y, mIntensityM);
static const float FogAttenuationBulb = lerp(lerp(FogAttenuationBulbParams.x, FogAttenuationBulbParams.z, mAttenuationBulbP), FogAttenuationBulbParams.y, mAttenuationBulbM);

static const float3 FogPosition = mPosition;
static const float3 FogDirection = normalize(mDirection - mPosition);
static const float3 FogColor = float3(mR, mG, mB) * FogIntensity * FogBlink;

static const float4x4 matLightProject = CreatePerspectiveProject(FogAngle, 1, mLightPlaneNear, mLightPlaneFar);
static const float4x4 matLightView = CreateLightViewMatrix(FogDirection, FogPosition);
static const float4x4 matLightViewProject = mul(matLightView, matLightProject);

#if VOLUMETRIC_FOG_ENABLE
#if VOLUMETRIC_FOG_QUALITY == 0
#	define VOLUMETRIC_FOG_SIZE 256
#elif VOLUMETRIC_FOG_QUALITY == 1
#	define VOLUMETRIC_FOG_SIZE 512
#elif VOLUMETRIC_FOG_QUALITY >= 2
#	define VOLUMETRIC_FOG_SIZE 1024
#elif VOLUMETRIC_FOG_QUALITY >= 3
#	define VOLUMETRIC_FOG_SIZE 2048
#else
#	define VOLUMETRIC_FOG_SIZE 256
#endif

texture VolumetricMap: OFFSCREENRENDERTARGET <
	string Description = "Volumetric fog Rendering for SpotLight";
	int Width = VOLUMETRIC_FOG_SIZE;
	int Height = VOLUMETRIC_FOG_SIZE;
	string Format = "R16F";
	float4 ClearColor = { 1, 1, 1, 1 };
	float ClearDepth = 1.0;
	string DefaultEffect = 
		"self = hide;"
		"*fog.pmx=hide;"
		"*controller.pmx=hide;"
		"*.pmx = ../spot_fog_shadow.fx;"
		"*.pmd = ../spot_fog_shadow.fx;"
		"* = hide";
>;
sampler VolumetricMapSamp = sampler_state {
	texture = <VolumetricMap>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

static float2 ShadowmapOffset  = 0.5 / VOLUMETRIC_FOG_SIZE;
static float2 ShadowmapOffset2 = 1.0 / VOLUMETRIC_FOG_SIZE;
#endif

struct FogParams
{
	float3 FogPosition;
	float3 FogDirection;
	float3 FogColor;

	float FogAngle;
	float FogRange;
	float FogDensity;
	float FogIntensity;
	float FogMiePhase;
	float FogAttenuationBulb;

#if VOLUMETRIC_FOG_ENABLE
	sampler shadowMap;
	float2 shadowOffset;

	float4x4 matLightView;
	float4x4 matLightProject;
#endif
};

float2 ComputeRaySphereIntersection(float3 position, float3 dir, float3 center, float radius)
{
	float3 origin = position - center;
	float B = dot(origin, dir);
	float C = dot(origin, origin) - radius * radius;
	float D = B * B - C;

	float2 minimaxIntersections;
	if (D < 0.0)
	{
		minimaxIntersections = float2(-1.0, -1.0);
	}
	else
	{
		D = sqrt(D);
		minimaxIntersections = float2(-B - D, -B + D);
	}

	return minimaxIntersections;
}

float ComputeOpticalDepth(FogParams param, float depth)
{
	return exp(-depth * param.FogDensity);
}

float HitShadowTest(FogParams param, sampler shadowMap, float2 shadowOffset, float4x4 matLightView, float4x4 matLightProject, float3 worldPosition)
{
	float4 proj = mul(float4(worldPosition, 1), matLightProject);
	proj.xy = PosToCoord(proj.xy / proj.w);
	proj.xy += shadowOffset;

	float linearDepth = length(mul(float4(worldPosition, 1), matLightView));
	return tex2Dlod(shadowMap, float4(proj.xy, 0, 0)).r < linearDepth ? 0 : 1;
}

float4 VolumetricFog(FogParams param, float3 V, float3 start, float3 end, int stepNum)
{
	float3 sampleStep = (end - start) / stepNum;
	float3 sampleStart = start + sampleStep;

	float sampleLength = length(sampleStep);

	float scatteringMie = 0;
	float sactteringDepth = sampleLength;

	for (int i = 0; i < stepNum; i++, sampleStart += sampleStep, sactteringDepth += sampleLength)
	{
		float density = sampleLength;
#if VOLUMETRIC_FOG_ENABLE
		density *= HitShadowTest(param, param.shadowMap, param.shadowOffset, param.matLightView, param.matLightProject, sampleStart);
#endif
		if (density > 0)
		{
			float3 L = sampleStart - param.FogPosition;
			float3 Lnormalized = normalize(L);

			float atten = GetPhysicalLightAttenuation(L, param.FogRange, param.FogAttenuationBulb);
			atten *= GetSpotLightAttenuation(Lnormalized, param.FogDirection, param.FogAngle, 2.0);
			atten *= ComputeOpticalDepth(param, sactteringDepth) * density;
#if VOLUMETRIC_FOG_ANISOTROPY
			atten *= ComputePhaseMieHG(dot(-V, Lnormalized), param.FogMiePhase);
#endif

			scatteringMie += atten;
		}
	}

	float3 scattering = scatteringMie;
	scattering *= param.FogColor * param.FogIntensity;

	return float4(scattering, 0);
}

void VolumetricFogVS(
	in float4 Position : POSITION,
	in float3 Normal : NORMAL,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float3 oTexcoord1 : TEXCOORD1,
	out float4 oPosition  : POSITION)
{
	float dist = distance(Position.xyz, FogPosition);
	float3 scale = Position.xyz + normalize(Position.xyz - mDirection) * (1.2 + FogAngle);

	Position.xyz = dist < 0.1 ? Position.xyz : lerp(mDirection, scale, FogAngle);
	Position.xyz = FogPosition + (Position.xyz - FogPosition) * FogRange / 2;

	oTexcoord0 = oPosition = mul(Position, matViewProject);
	oTexcoord0.xy = PosToCoord(oTexcoord0.xy / oTexcoord0.w) + ViewportOffset;
	oTexcoord0.xy = oTexcoord0.xy * oTexcoord0.w;

	oTexcoord1 = Position.xyz - CameraPosition;
}

float4 VolumetricFogPS(float4 texcoord : TEXCOORD0, float3 viewdir : TEXCOORD1) : COLOR
{
	FogParams param;
	param.FogPosition = FogPosition;
	param.FogDirection = FogDirection;
	param.FogAngle = FogAngle;
	param.FogRange = FogRange;
	param.FogIntensity = FogIntensity;
	param.FogColor = FogColor;
	param.FogMiePhase = FogMiePhase;
	param.FogAttenuationBulb = FogAttenuationBulb;
	param.FogDensity = FogDensity;

#if VOLUMETRIC_FOG_ENABLE
	param.shadowMap = VolumetricMapSamp;
	param.shadowOffset = ShadowmapOffset;

	param.matLightView = matLightView;
	param.matLightProject = matLightViewProject;
#endif

	float3 V = normalize(viewdir);
	float2 intersections = ComputeRaySphereIntersection(CameraPosition, V, param.FogPosition, param.FogRange);
	clip(intersections.y);

	float linearDepth = tex2Dlod(Gbuffer8Map, float4(texcoord.xy / texcoord.w, 0, 0)).r;

	float3 start = CameraPosition + V * max(0, intersections.x);
	float3 end = CameraPosition + V * min(linearDepth, intersections.y);

	return VolumetricFog(param, V, start, end, VOLUMETRIC_FOG_SAMPLES_LENGTH);
}

technique MainTechBS0<string MMDPass = "object_ss"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = CW;
		VertexShader = compile vs_3_0 VolumetricFogVS();
		PixelShader  = compile ps_3_0 VolumetricFogPS();
	}
}

technique EdgeTec<string MMDPass = "edge";> {}
technique ShadowTech<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}