#include "../../ray.conf"
#include "../../shader/math.fx"
#include "../../shader/common.fx"
#include "../../shader/gbuffer.fx"
#include "../../shader/gbuffer_sampler.fx"
#include "../../shader/lighting.fx"

float mR : CONTROLOBJECT < string name=POINTLIGHT_CONTROLLER; string item = "R+"; >;
float mG : CONTROLOBJECT < string name=POINTLIGHT_CONTROLLER; string item = "G+"; >;
float mB : CONTROLOBJECT < string name=POINTLIGHT_CONTROLLER; string item = "B+"; >;
float mRadiusP : CONTROLOBJECT < string name=POINTLIGHT_CONTROLLER; string item = "Radius+"; >;
float mIntensityM : CONTROLOBJECT < string name=POINTLIGHT_CONTROLLER; string item = "Intensity-"; >;
float3 mPosition : CONTROLOBJECT < string name=POINTLIGHT_CONTROLLER; string item = "Position"; >;

float mBlubP : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "Blub"; >;

static float LightRange = (1 + mRadiusP * POINTLIGHT_MAX_RADIUS);
static float LightIntensity = (1 - mIntensityM) * POINTLIGHT_MAX_INTENSITY;
static float3 LightPosition = mul(float4(mPosition, 1), matView).xyz;

void PointLightingVS(
    in float4 Position : POSITION,
    in float3 Normal   : NORMAL,
    in float2 Texcoord : TEXCOORD0,
    out float4 oTexcoord  : TEXCOORD0,
    out float4 oPosition  : SV_Position)
{
    Position.xyz = mPosition + Normal * LightRange;
    oTexcoord = oPosition = mul(Position, matViewProject);
}

float3 GetPosition(float2 uv)
{
    float depth = tex2D(Gbuffer4Map, uv).r;
    return ReconstructPos(uv, matProjectInverse, depth);
}

float4 PointLightingPS(in float4 texcoord : TEXCOORD0) : COLOR0
{
    float2 coord = texcoord.xy / texcoord.w;
    coord = PosToCoord(coord);
    coord += ViewportOffset;

    float4 MRT0 = tex2D(Gbuffer1Map, coord);
    float4 MRT1 = tex2D(Gbuffer2Map, coord);
    float4 MRT2 = tex2D(Gbuffer3Map, coord);

    MaterialParam material;
    DecodeGbuffer(MRT0, MRT1, MRT2, material);

    float3 P = GetPosition(coord);
    float3 V = normalize(-P);
    float3 L = normalize(LightPosition - P);

    float4 lighting = 0.0f;
    
    float vis = saturate(dot(material.normal, L));
    if (vis > 0)
    {
        if (material.lightModel == LIGHTINGMODEL_NORMAL || material.lightModel == LIGHTINGMODEL_EMISSIVE)
            lighting.rgb = DiffuseBRDF(material.normal, L, V, material.smoothness);
        else if (material.lightModel == LIGHTINGMODEL_TRANSMITTANCE)
            lighting.rgb = TranslucencyBRDF(material.normal, L, material.transmittance);
        
        lighting.rgb *= material.albedo;
        lighting.rgb += SpecularBRDF(material.normal, L, V, material.smoothness, material.specular);
        lighting.rgb *= float3(mR, mG, mB) * LightIntensity * vis;
        lighting *= GetPhysicalLightAttenuation(LightPosition, P, LightRange, 1 - mBlubP);
    }
    
    return lighting;
}

#define OBJECT_TEC(name, mmdpass) \
    technique name < string MMDPass = mmdpass;\
    > { \
        pass DrawObject { \
            ZEnable = false; ZWriteEnable = false;\
            AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;\
            SrcBlend = ONE; DestBlend = ONE;\
            CullMode = CW;\
            VertexShader = compile vs_3_0 PointLightingVS(); \
            PixelShader  = compile ps_3_0 PointLightingPS(); \
        } \
    }


OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}