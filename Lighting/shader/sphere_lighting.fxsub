#include "../../ray.conf"
#include "../../shader/math.fx"
#include "../../shader/common.fx"
#include "../../shader/gbuffer.fx"
#include "../../shader/gbuffer_sampler.fx"
#include "../../shader/lighting.fx"

float mR : CONTROLOBJECT < string name=SPHERELIGHT_CONTROLLER; string item = "R+"; >;
float mG : CONTROLOBJECT < string name=SPHERELIGHT_CONTROLLER; string item = "G+"; >;
float mB : CONTROLOBJECT < string name=SPHERELIGHT_CONTROLLER; string item = "B+"; >;
float mRangeP : CONTROLOBJECT < string name=SPHERELIGHT_CONTROLLER; string item = "Range+"; >;
float mSizeP : CONTROLOBJECT < string name=SPHERELIGHT_CONTROLLER; string item = "Size+"; >;
float mIntensityM : CONTROLOBJECT < string name=SPHERELIGHT_CONTROLLER; string item = "Intensity-"; >;
float3 mPosition : CONTROLOBJECT < string name=SPHERELIGHT_CONTROLLER; string item = "Position"; >;

float mBlubP : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "Blub"; >;

static float LightRange = (1 + mSizeP * SPHERELIGHT_MAX_SIZE);
static float LightRange2 = (1 + (mSizeP * SPHERELIGHT_MAX_SIZE + mRangeP * SPHERELIGHT_MAX_RADIUS)) * SPHERELIGHT_MAX_ATTENUATION;
static float LightIntensity = (1 - mIntensityM) * SPHERELIGHT_MAX_INTENSITY;

void SphereLightingVS(
    in float4 Position : POSITION,
    in float3 Normal   : NORMAL,
    in float2 Texcoord : TEXCOORD0,
    out float4 oTexcoord  : TEXCOORD0,
    out float4 oTexcoord2 : TEXCOORD1,
    out float4 oPosition  : SV_Position)
{
    Position.xyz = mPosition + Normal * LightRange2;
    
    oTexcoord = Texcoord.xyxy;
    oTexcoord2 = oPosition = mul(Position, matViewProject);
}

float3 GetPosition(float2 uv)
{
    float depth = tex2D(Gbuffer4Map, uv).r;
    return ReconstructPos(uv, matProjectInverse, depth);
}

float4 SphereLightingPS(in float4 texcoord : TEXCOORD0, in float4 texcoord2 : TEXCOORD1) : COLOR0
{
    float2 texCoord = texcoord2.xy / texcoord2.w;
    texCoord = PosToCoord(texCoord);
    texCoord += ViewportOffset;

    float4 MRT0 = tex2D(Gbuffer1Map, texCoord);
    float4 MRT1 = tex2D(Gbuffer2Map, texCoord);
    float4 MRT2 = tex2D(Gbuffer3Map, texCoord);

    MaterialParam material;
    DecodeGbuffer(MRT0, MRT1, MRT2, material);
    
    float3 LightPosition = mul(float4(mPosition, 1), matView).xyz;

    float3 P = GetPosition(texCoord);
    float3 V = normalize(-P);
    float3 L = LightPosition - P;
    float3 L2 = normalize(L);
    
    float4 lighting = 0.0f;
    
    if (material.lightModel == LIGHTINGMODEL_NORMAL || material.lightModel == LIGHTINGMODEL_EMISSIVE)
        lighting.rgb = DiffuseBRDF(material.normal, L2, V, material.smoothness);
    else if (material.lightModel == LIGHTINGMODEL_TRANSMITTANCE)
        lighting.rgb = TranslucencyBRDF(material.normal, L2, material.transmittance);
    
    lighting.rgb += SphereAreaLightBRDF(material.normal, V, L, LightRange, material.smoothness, material.specular);
    lighting.rgb *= float3(mR, mG, mB) * LightIntensity;
    lighting *= GetPhysicalLightAttenuation(L - L2 * LightRange, LightRange2, 1 - mBlubP);

    return lighting;
}

#define OBJECT_TEC(name, mmdpass) \
    technique name < string MMDPass = mmdpass;\
    > { \
        pass DrawObject { \
            ZEnable = false; ZWriteEnable = false;\
            AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;\
            SrcBlend = ONE; DestBlend = ONE;\
            CullMode = CW;\
            VertexShader = compile vs_3_0 SphereLightingVS(); \
            PixelShader  = compile ps_3_0 SphereLightingPS(); \
        } \
    }


OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}