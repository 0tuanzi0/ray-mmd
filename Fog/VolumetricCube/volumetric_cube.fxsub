#include "../../ray.conf"
#include "../../ray_advanced.conf"
#include "../../shader/math.fxsub"
#include "../../shader/common.fxsub"
#include "../../shader/shadowcommon.fxsub"
#include "../../shader/gbuffer.fxsub"
#include "../../shader/gbuffer_sampler.fxsub"
#include "../../shader/PhaseFunctions.fxsub"

float mR : CONTROLOBJECT<string name="(self)"; string item = "R+";>;
float mG : CONTROLOBJECT<string name="(self)"; string item = "G+";>;
float mB : CONTROLOBJECT<string name="(self)"; string item = "B+";>;
float mRangeP : CONTROLOBJECT<string name="(self)"; string item = "Range+";>;
float mRangeM : CONTROLOBJECT<string name="(self)"; string item = "Range-";>;
float mIntensityP : CONTROLOBJECT<string name="(self)"; string item = "Intensity+";>;
float mIntensityM : CONTROLOBJECT<string name="(self)"; string item = "Intensity-";>;
float mBlink : CONTROLOBJECT<string name="(self)"; string item = "Blink";>;
float mAttenuationBulbP : CONTROLOBJECT<string name = "(self)"; string item = "AttenuationBulb+";>;
float mAttenuationBulbM : CONTROLOBJECT<string name = "(self)"; string item = "AttenuationBulb-";>;
float mMiePhaseP : CONTROLOBJECT<string name="(self)"; string item = "MiePhase+";>;
float mMiePhaseM : CONTROLOBJECT<string name="(self)"; string item = "MiePhase-";>;
float mMieDensityP : CONTROLOBJECT<string name="(self)"; string item = "Density+";>;
float mMieDensityM : CONTROLOBJECT<string name="(self)"; string item = "Density-";>;

float3 mPosition : CONTROLOBJECT<string name="(self)"; string item = "Position";>;

static const float FogBlink = saturate(1 - SmoothTriangleWave(time * mBlink * 10));
static const float FogMiePhase  = lerp(lerp(FogMieParams.x, FogMieParams.z, mMiePhaseP), FogMieParams.y, mMiePhaseM);
static const float FogRange = lerp(lerp(FogRangeParams.x, FogRangeParams.z / 1.5, mRangeP), FogRangeParams.y, mRangeM);
static const float FogDensity = lerp(lerp(FogDensityParams.x, FogDensityParams.z, mMieDensityP), FogDensityParams.y, mMieDensityM);
static const float FogIntensity = lerp(lerp(FogIntensityParams.x, FogIntensityParams.z, mIntensityP), FogIntensityParams.y, mIntensityM);
static const float FogAttenuationBulb = lerp(lerp(FogAttenuationBulbParams.x, FogAttenuationBulbParams.z, mAttenuationBulbP), FogAttenuationBulbParams.y, mAttenuationBulbM);

static const float3 FogPosition = mPosition;
static const float3 FogColor = float3(mR, mG, mB) * FogIntensity * FogBlink;

struct FogParams
{
	float3 FogColor;
	float3 FogPosition;

	float FogRange;
	float FogDensity;
	float FogIntensity;
	float FogMiePhase;
	float FogAttenuationBulb;

#if VOLUMETRIC_FOG_ENABLE
	sampler shadowMap;
	float shadowSize;
#endif
};

float2 ComputeRayCubeIntersection(float3 p, float3 d, float3 symbol, float size)
{
	const float3 inv = 1.0 / (d + 1e-16);
	const float3 aabb[2] = { -float3(size, size, size), float3(size, size, size) };

	float tmin = 65535;
	float tmax = -65535;

    float tymin, tymax, tzmin, tzmax;
    tmin  = (aabb[1-symbol[0]].x - p.x) * inv.x;
    tmax  = (aabb[  symbol[0]].x - p.x) * inv.x;
    tymin = (aabb[1-symbol[1]].y - p.y) * inv.y;
    tymax = (aabb[  symbol[1]].y - p.y) * inv.y;
    tzmin = (aabb[1-symbol[2]].z - p.z) * inv.z;
    tzmax = (aabb[  symbol[2]].z - p.z) * inv.z;

    tmin = max(max(tmin, tymin), tzmin);
    tmax = min(min(tmax, tymax), tzmax);

    if (tmin > tmax)
    	return -1;

    return float2(tmin, tmax);
}

float ComputeOpticalDepth(FogParams param, float depth)
{
	return exp(-depth * param.FogDensity);
}

float4 VolumetricFog(FogParams param, float3 V, float3 L, float3 start, float3 end, float jitter, int stepNum = VOLUMETRIC_FOG_SAMPLES_LENGTH)
{
	float3 sampleStep = (end - start) / stepNum;
	float3 sampleStart = start + sampleStep * jitter;

	float sampleLength = length(sampleStep);
	float sampleOpticalDepth = ComputeOpticalDepth(param, sampleLength);

	float scatteringMie = 0;
	float scatteringDepth = 1;

	float3 symbol = step(0, L);

	for (int i = 0; i < stepNum; i++, sampleStart += sampleStep, scatteringDepth *= sampleOpticalDepth)
	{
		float2 intersections = ComputeRayCubeIntersection(sampleStart, L, symbol, param.FogRange);
		float3 sampleLightPoint = sampleStart + L * intersections.y;

		float scattering = exp(-distance(sampleLightPoint, sampleStart) * param.FogDensity);
		scattering *= sampleLength;
		scattering *= sampleOpticalDepth;
		scattering *= scatteringDepth;

		scatteringMie += scattering;
	}

	float3 scattering = param.FogColor * SunColor * scatteringMie;
	scattering *= param.FogIntensity;
#if VOLUMETRIC_FOG_ANISOTROPY
	scattering *= ComputePhaseMie(dot(V, L), -param.FogMiePhase);
#endif

	return float4(scattering, sampleLength * param.FogIntensity * stepNum * param.FogDensity);
}

void VolumetricCubeVS(
	in float4 Position : POSITION,
	in float3 Normal : NORMAL,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float3 oTexcoord1 : TEXCOORD1,
	out float4 oPosition  : POSITION)
{
	Position.xyz = FogPosition + Normal * FogRange;
	oTexcoord0 = oPosition = mul(Position, matViewProject);
	oTexcoord0.xy = PosToCoord(oTexcoord0.xy / oTexcoord0.w) + ViewportOffset;
	oTexcoord0.xy = oTexcoord0.xy * oTexcoord0.w;
	oTexcoord1 = normalize(Position.xyz - CameraPosition);
}

float4 VolumetricCubePS(float4 texcoord : TEXCOORD0, float3 viewdir : TEXCOORD1, in float4 screenPosition : SV_Position) : COLOR
{
	FogParams param;
	param.FogPosition = FogPosition;
	param.FogRange = sqrt(FogRange * FogRange) / 1.75;
	param.FogIntensity = FogIntensity;
	param.FogColor = FogColor;
	param.FogMiePhase = FogMiePhase;
	param.FogAttenuationBulb = FogAttenuationBulb;
	param.FogDensity = FogDensity;

#if VOLUMETRIC_FOG_ENABLE
	param.shadowMap = VolumetricMapSamp;
	param.shadowSize = VOLUMETRIC_FOG_HEIGHT;
#endif

	float3 V = normalize(viewdir);
	float2 intersection = ComputeRayCubeIntersection(CameraPosition, V, step(0, V), param.FogRange);
	clip(intersection.y);

	float linearDepth = tex2Dlod(Gbuffer8Map, float4(texcoord.xy / texcoord.w, 0, 0)).r;

	float3 start = CameraPosition + V * max(0, intersection.x);
	float3 end = CameraPosition + V * min(linearDepth, intersection.y);

	return VolumetricFog(param, V, normalize(-SunDirection), start, end, GetJitterOffset(screenPosition.xy + (time + PI)));
}

technique MainTechBS0<string MMDPass = "object_ss"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = CW;
		VertexShader = compile vs_3_0 VolumetricCubeVS();
		PixelShader  = compile ps_3_0 VolumetricCubePS();
	}
}

technique DepthTech<string MMDPass = "object";>{}
technique EdgeTec<string MMDPass = "edge";>{}
technique ShadowTech<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}