#include "../../ray.conf"
#include "../../ray_advanced.conf"
#include "../../shader/math.fxsub"
#include "../../shader/common.fxsub"
#include "../../shader/gbuffer.fxsub"
#include "../../shader/gbuffer_sampler.fxsub"

float mFogH :  CONTROLOBJECT < string name="(self)"; string item = "H+"; >;
float mFogS :  CONTROLOBJECT < string name="(self)"; string item = "S+"; >;
float mFogV :  CONTROLOBJECT < string name="(self)"; string item = "V-"; >;
float mFogRangeP :  CONTROLOBJECT < string name="(self)"; string item = "Range+"; >;
float mFogRangeM :  CONTROLOBJECT < string name="(self)"; string item = "Range-"; >;
float mFogDensity :  CONTROLOBJECT < string name="(self)"; string item = "Density+"; >;

const float mieCoefficient = 0.005;
const float reileighCoefficient = 10;
const float mieG = 0.98;
const float turbidity = 1;
const float3 lambda = float3(680E-9, 550E-9, 450E-9);
const float3 K = float3(0.686, 0.678, 0.666);
const float v = 4.0;
const float rayleighZenithLength = 8.4E3;
const float mieZenithLength = 1.25E3;
const float EE = 1000.0;
const float steepness = 1.5;
const float cutoffAngle = PI / 1.95;

float3 totalRayleigh(float3 lambda)
{
	float n = 1.0003;
	float n2 = n * n;
	float pi3 = PI * PI * PI;
	return (8.0 * pi3 * pow(n2 - 1.0, 2.0) * 6.105) / (3.0 * 2.545E25 * pow(lambda, 4.0) * 6.245);
}

float3 totalMie(float3 lambda, float3 K, float T)
{
	float c = (0.2 * T) * 10E-18;
	return 0.434 * c * PI * pow((2.0 * PI) / lambda, v - 2.0) * K;
}

void ComputePhaseFunctions(float3 inscatteringMie, float3 inscatteringRayleigh, float3 V, float3 L, float g, inout float3 inscattering)
{
	float gg = g * g;
	float g2 = 2 * g;
	
	float cosTheta = dot(V, L);
	float cosTheta2 = cosTheta * cosTheta;
	
	float leftTop = 3 * (1 - gg);
	float leftBottom = 2 * (2 + gg);
	float rightTop = 1.0 + cosTheta2;
	float rightBottom = pow(1.0 + gg - g2 * cosTheta, 1.5);
	
	float3 betaMie = inscatteringMie * (leftTop / leftBottom) * (rightTop / rightBottom) / (4.0 * PI);
	float3 betaRayleigh = inscatteringRayleigh * (cosTheta2 * 0.75 + 0.75) / (4.0 * PI);
	
	inscattering = (betaMie + betaRayleigh) / (inscatteringMie + inscatteringRayleigh);
}

void ComputeScatteringIntensity(float3 opticalDepthMie, float3 opticalDepthRayleigh, out float3 extinction)
{
	extinction = exp(-(opticalDepthRayleigh + opticalDepthMie));
}

float ComputeSunIntensity(float zenithAngleCos)
{
	return EE * max(0.0f, 1.0f - exp(-((cutoffAngle - acos(zenithAngleCos)) / steepness)));
}

float4 ApplySkyFog(float distance, float3 V)
{
	float3 L = float3(0, 1, 0);
	
	float3 inscatteringMie = totalMie(lambda, K, turbidity) * mieCoefficient;
	float3 inscatteringRayleigh = totalRayleigh(lambda) * reileighCoefficient;
	
	float3 inscattering = 0;
	ComputePhaseFunctions(inscatteringMie, inscatteringRayleigh, V, L, mieG, inscattering);
	
	float3 scatteringMie = inscatteringMie * distance * (1 + mFogRangeP * 10 - mFogRangeM);
	float3 scatteringRayleigh = inscatteringRayleigh * distance * (1 + mFogRangeP * 10 - mFogRangeM);

	float3 extinction = 0;
	ComputeScatteringIntensity(scatteringMie, scatteringRayleigh, extinction);
	
	float3 up = float3(0, 1, 0);
	float zenithAngleCos = dot(L, up);
	inscattering *= ComputeSunIntensity(zenithAngleCos);

	float3 Lin = inscattering * (1.0f - extinction);
	Lin *= lerp(1.0, pow(inscattering * extinction, 0.5), pow(1.0 - zenithAngleCos, 5.0));
	Lin *= hsv2rgb(float3(mFogH, mFogS, 1 - mFogV)) * mFogDensity;

	return float4(Lin, 0);
}

void GroundFogVS(
	in float4 Position : POSITION,
	in float3 Normal : NORMAL,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1,
	out float4 oPosition  : POSITION)
{
	oPosition = float4(CoordToPos(Texcoord), 0, 1);
	oTexcoord0 = Texcoord.xyxy + ViewportOffset.xyxy;
	oTexcoord1 = -mul(oPosition, matProjectInverse);
}

float4 GroundFogPS(float2 coord : TEXCOORD0, float3 viewdir : TEXCOORD1) : COLOR
{   
	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	MaterialParam material;
	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, material);

	float3 V = normalize(viewdir);    
	return ApplySkyFog(material.linearDepth, V);
}

#define OBJECT_TEC(name, mmdpass) \
	technique name < string MMDPass = mmdpass;>{\
		pass DrawObject {\
			ZEnable = false; ZWriteEnable = false;\
			AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;\
			SrcBlend = ONE; DestBlend = ONE;\
			CullMode = NONE;\
			VertexShader = compile vs_3_0 GroundFogVS();\
			PixelShader  = compile ps_3_0 GroundFogPS();\
		}\
	}

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")
	
technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}