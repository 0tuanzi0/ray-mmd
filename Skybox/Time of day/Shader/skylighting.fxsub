#define NUMS_SAMPLES_SUN 4

struct ScatteringParams
{
	float sunSize;
	float sunRadiance;

	float mieG;
	float mieHeight;

	float rayleighHeight;

	float3 waveLambda;
	float3 waveLambdaMie;
	float3 waveLambdaRayleigh;

	float earthRadius;
	float earthAtmTopRadius;
	float3 earthCenter;
};

float4 EncodeRGBT(float3 rgb, float range = 1024)
{
	float vmax = 0;
	vmax = max(max(rgb.r, rgb.g), max(rgb.b, 1e-6f));
	vmax = min(vmax, range);

	float4 encode;
	encode[3] = (range + 1) / range *  vmax / (1 + vmax);
	encode[3] = ceil(encode[3] * 255.0) / 255.0;
	
	float rcp = 1.0 / (encode[3] / (1.0 + 1.0 / range - encode[3]));

	encode[0] = rgb.r * rcp;
	encode[1] = rgb.g * rcp;
	encode[2] = rgb.b * rcp;
	
	return encode;
}

float3 DecodeRGBT(float4 rgbt, float range = 1024)
{
	rgbt.a = rgbt.a / (1 + 1 / range - rgbt.a);
	return rgbt.rgb * rgbt.a;
}

float3 FastBlur(sampler source, float2 uv, float2 offset, float level)
{
	float sz = pow(2.0, level);
	float mip = level + 1.0;

	float2 coord0 = (uv + sz * float2(-1.5, -0.5) * offset);
	float2 coord1 = (uv + sz * float2( 0.5, -1.5) * offset);
	float2 coord2 = (uv + sz * float2( 1.5,  0.5) * offset);
	float2 coord3 = (uv + sz * float2(-0.5,  1.5) * offset);

	float3 a = DecodeRGBT(tex2Dlod(source, float4(coord0, 0, mip)));
	float3 b = DecodeRGBT(tex2Dlod(source, float4(coord1, 0, mip)));
	float3 c = DecodeRGBT(tex2Dlod(source, float4(coord2, 0, mip)));
	float3 d = DecodeRGBT(tex2Dlod(source, float4(coord3, 0, mip)));
	float3 e = DecodeRGBT(tex2Dlod(source, float4(uv, 0, mip)));

    float3 blurred = 0;
    blurred += a* 4.0;
	blurred += b* 4.0;
	blurred += c* 4.0;
	blurred += d* 4.0;
	blurred += e;
    blurred /= 17;
    
    return blurred;
}

float2 ComputeRaySphereIntersection(float3 position, float3 dir, float3 center, float radius)
{
	float3 origin = position - center;
	float B = dot(origin, dir);
	float C = dot(origin, origin) - radius * radius;
	float D = B * B - C;

	float2 minimaxIntersections;
	if (D < 0.0)
	{
		minimaxIntersections = float2(-1.0, -1.0);
	}
	else
	{
		D = sqrt(D);
		minimaxIntersections = float2(-B - D, -B + D);
	}

	return minimaxIntersections;
}

float ChapmanApproximation(float X, float h, float cosZenith)
{
	float c = sqrt(X + h);
	float c_exp_h = c * exp2(-h);

	if (cosZenith >= 0)
	{
		return c_exp_h / (c * cosZenith + 1);
	}
	else
	{
		float x0 = sqrt(1 - cosZenith * cosZenith) * (X + h);
		float c0 = sqrt(x0);

		return 2 * c0 * exp2(X - x0) - c_exp_h / (1 - c * cosZenith);
	}
}

float GetOpticalDepthSchueler(float h, float H, float earthRadius, float cosZenith)
{
	return H * ChapmanApproximation(earthRadius / H, h / H, cosZenith);
}

float3 Transmittance(ScatteringParams setting, float3 r, float3 V)
{
	float rl = length(r);
	float h = (rl - setting.earthRadius) / setting.rayleighHeight;
	float cosZenith = dot(r / rl, V);
	float ch = GetOpticalDepthSchueler(h, setting.rayleighHeight, setting.earthRadius, cosZenith);
	return exp2(-(setting.waveLambdaMie + setting.waveLambdaRayleigh) * ch);
}

float2 ComputeOpticalDepth(ScatteringParams setting, float3 samplePoint, float3 V, float3 L, float neg)
{
	float rl = length(samplePoint);
	float h = rl - setting.earthRadius;
	float3 r = samplePoint / rl;

	float cos_chi_sun = dot(r, L);
	float cos_chi_ray = dot(r, V * neg);

	float opticalDepthSun = GetOpticalDepthSchueler(h, setting.rayleighHeight, setting.earthRadius, cos_chi_sun);
	float opticalDepthCamera = GetOpticalDepthSchueler(h, setting.rayleighHeight, setting.earthRadius, cos_chi_ray) * neg;

	return float2(opticalDepthSun, opticalDepthCamera);
}

void AerialPerspective(ScatteringParams setting, float3 start, float3 end, float3 V, float3 L, bool infinite, out float3 transmittance, out float3 insctrMie, out float3 insctrRayleigh)
{
	float inf_neg = infinite ? 1 : -1;

	float3 sampleStep = (end - start) / NUMS_SAMPLES_SUN;
	float3 samplePoint = end - sampleStep;
	float3 sampleLambda = setting.waveLambdaMie + setting.waveLambdaRayleigh;

	float sampleLength = length(sampleStep);

	float3 scattering = 0;
	float2 lastOpticalDepth = ComputeOpticalDepth(setting, end, V, L, inf_neg);

	for (int i = 1; i < NUMS_SAMPLES_SUN; i++, samplePoint -= sampleStep)
	{
		float2 opticalDepth = ComputeOpticalDepth(setting, samplePoint, V, L, inf_neg);

		float3 segment_s = exp2(-sampleLambda * (opticalDepth.x + lastOpticalDepth.x) * 0.5f);
		float3 segment_t = exp2(-sampleLambda * (opticalDepth.y - lastOpticalDepth.y));
		
		transmittance = transmittance * segment_t;
		
		scattering = scattering * segment_t;
		scattering += exp2(-(length(samplePoint) - setting.earthRadius) / setting.rayleighHeight) * segment_s * sampleLength;

		lastOpticalDepth = opticalDepth;
	}

	insctrMie = scattering;
	insctrRayleigh = scattering;
}

bool ComputeSkyboxChapman(ScatteringParams setting, float3 eye, float3 V, float3 L, out float3 transmittance, out float3 insctrMie, out float3 insctrRayleigh)
{
	bool neg = true;

	float2 outerIntersections = ComputeRaySphereIntersection(eye, V, setting.earthCenter, setting.earthAtmTopRadius);
	clip(outerIntersections.y);

	float2 innerIntersections = ComputeRaySphereIntersection(eye, V, setting.earthCenter, setting.earthRadius);
	if (innerIntersections.x > 0)
	{
		neg = false;
		outerIntersections.y = innerIntersections.x;
	}

	eye -= setting.earthCenter;

	float3 start = eye + V * max(0, outerIntersections.x);
	float3 end = eye + V * outerIntersections.y;

	AerialPerspective(setting, start, end, V, -L, neg, transmittance, insctrMie, insctrRayleigh);

	bool intersectionTest = innerIntersections.x < 0.0 && innerIntersections.y < 0.0;
	return intersectionTest;
}

float4 ComputeSkyInscattering(ScatteringParams setting, float3 eye, float3 V, float3 L)
{
	float3 insctrMie = 0.0;
	float3 insctrRayleigh = 0.0;
	float3 insctrOpticalLength = 1;
	bool intersectionTest = ComputeSkyboxChapman(setting, eye, V, L, insctrOpticalLength, insctrMie, insctrRayleigh);

	float phaseTheta = dot(V, -L);
	float phaseMie = ComputePhaseMie(phaseTheta, setting.mieG);
	float phaseSun = ComputePhaseMie(phaseTheta, setting.sunSize);
	float phaseRayleigh = ComputePhaseRayleigh(phaseTheta);
	float phaseNight = 1.0 - saturate(insctrOpticalLength.x * EPSILON);

	float3 insctrTotalSun = insctrMie * setting.waveLambdaMie * phaseSun;
	float3 insctrTotalMie = insctrMie * setting.waveLambdaMie * phaseMie;
	float3 insctrTotalRayleigh = insctrRayleigh * setting.waveLambdaRayleigh * phaseRayleigh;

	float3 sky = insctrTotalSun + insctrTotalMie + insctrTotalRayleigh;

	return float4(sky * setting.sunRadiance, phaseNight * intersectionTest);
}