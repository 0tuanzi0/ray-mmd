#define NUM_SAMPLES_STEP 8
#define NUM_SAMPLES_STEP2 4

struct ScatteringParams
{
	float sunSize;
	float sunRadiance;

	float mieG;
	float mieCoefficient;
	float mieHeight;

	float rayleighCoefficient;
	float rayleighHeight;

	float3 waveLambda;
	float3 waveLambdaMie;
	float3 waveLambdaRayleigh;

	float earthRadius;
	float earthAtmTopRadius;
	float3 earthCenter;
	
	float cloud;
	float cloudBias;
	float3 clouddir;
};

float3 ComputeWaveLengthMie(float density)
{
	return 2e-5f * density;
}

float3 ComputeWaveLengthMie(float3 lambda, float3 K, float T, float V)
{
	float c_pi = (0.6544 * T - 0.6510) * 1e-16 * PI;
	float mieConst = 0.434 * c_pi * pow(2.0 * PI, V - 2.0);
	return mieConst * K / pow(lambda, V - 2);
}

float3 ComputeWaveLengthRayleigh(float3 lambda)
{
	static const float n = 1.0003;
	static const float N = 2.545E25;
	static const float pn = 0.035;
	static const float n2 = n * n;
	static const float pi3 = PI * PI * PI;
	static const float rayleighConst = (8.0 * pi3 * pow2(n2 - 1.0)) / (3 * N) * ((6 + 3 * pn) / (6 - 7 * pn));
	return rayleighConst / (lambda * lambda * lambda * lambda);
}

float ComputeOpticalMass(float cosAngle)
{
	float cosAngleRadians = degrees(acos(cosAngle));
	return 1.0 / (cosAngle + 0.15 * pow(abs(93.885 - cosAngleRadians), -1.253));
}

float ComputePhaseMie(float theta, float g)
{
	float g2 = g * g;

	float theta2 = theta * theta;

	float leftTop = 3.0 * (1.0 - g2);
	float leftBottom = 2.0 * (2.0 + g2);
	float rightTop = 1.0 + theta2;
	float rightBottom = pow(saturate(1.0 + g2 - 2.0 * g * theta), 1.5);

	return ((leftTop / leftBottom) * (rightTop / rightBottom)) / (4.0 * PI);
}

float ComputePhaseRayleigh(float theta)
{
	float theta2 = theta * theta;
	return (theta2 * 0.75 + 0.75) / (4.0 * PI);
}

float3 ComputeScatteringFunctions(float3 inscatteringMie, float3 inscatteringRayleigh, float3 V, float3 L, float g)
{
	float cosTheta = dot(V, L);

	float3 betaMie = inscatteringMie * ComputePhaseMie(cosTheta, g);
	float3 betaRayleigh = inscatteringRayleigh * ComputePhaseRayleigh(cosTheta);

	float3 betaTotal = (betaMie + betaRayleigh);
	return betaTotal / (inscatteringMie + inscatteringRayleigh);
}

float3 ComputeScatteringFunctions(float3 inscatteringMie, float3 inscatteringRayleigh, float3 V, float3 L, float g, float g2, float clound)
{
	float sunTheta = dot(V, L);
	float sunFade = pow(saturate(V.y), 1.0 / 2.2);

	float3 betaMie1 = inscatteringMie * ComputePhaseMie(sunTheta, g);
	float3 betaMie2 = inscatteringMie * ComputePhaseMie(sunTheta, g2) * (1 - saturate(clound));
	float3 betaRayleigh = inscatteringRayleigh * ComputePhaseRayleigh(sunTheta);

	float3 betaTotal = (betaMie1 + betaMie2 * sunFade + betaRayleigh);
	return betaTotal / (inscatteringMie + inscatteringRayleigh);
}

float ComputeSunIntensity(float EE, float zenithAngleCos)
{
	float steepness = 1.0;
	float cutoffAngle = PI / 1.95;
	return EE * saturate(1.0f - exp(-((cutoffAngle - acos(zenithAngleCos)) / steepness)));
}

float4 ComputeSkyScattering(ScatteringParams setting, float3 V, float3 L)
{
	float3 up = float3(0, 1, 0);
	float3 sunDirection = normalize(-L);

	float zenithAngle = saturate(dot(V, up));
	float zenithAngleCos = dot(sunDirection, up);
	float zenithAngleMass = ComputeOpticalMass(zenithAngle);

	float3 inscatteringMie = setting.waveLambdaMie;
	float3 inscatteringRayleigh = setting.waveLambdaRayleigh;

	inscatteringMie *= setting.mieCoefficient;
	inscatteringRayleigh *= setting.rayleighCoefficient - saturate(1.0 - exp(sunDirection.y));

	float cloud = ComputeCloud(V);
	float3 inscattering = ComputeScatteringFunctions(inscatteringMie, inscatteringRayleigh, V, sunDirection, setting.mieG, setting.sunSize, cloud);

	float3 opticalMie = inscatteringMie * zenithAngleMass * setting.mieHeight + cloud;
	float3 opticalRayleigh = inscatteringRayleigh * zenithAngleMass * setting.rayleighHeight;
	
	float3 extinction = exp(-(opticalMie + opticalRayleigh));

	inscattering *= ComputeSunIntensity(setting.sunRadiance, zenithAngleCos);

	float3 Lin = inscattering * (1.0 - extinction);	
	// Lin *= lerp(1.0, pow(inscattering * extinction, 0.5), pow(1.0 - zenithAngleCos, 5.0)) * 0.025;
	
	return float4(Lin, saturate(cloud));
}

float3 ComputeSkyFog(ScatteringParams setting, float distance, float3 V, float3 L)
{
	float3 up = float3(0, 1, 0);
	float3 sunDirection = normalize(-L);

	float zenithAngle = saturate(dot(V, up));
	float zenithAngleCos = dot(sunDirection, up);
	float zenithAngleMass = ComputeOpticalMass(zenithAngle);

	float3 inscatteringMie = setting.waveLambdaMie;
	float3 inscatteringRayleigh = setting.waveLambdaRayleigh;

	inscatteringMie *= setting.mieCoefficient;
	inscatteringRayleigh *= setting.rayleighCoefficient - saturate(1.0 - exp(sunDirection.y));

	float3 inscattering = ComputeScatteringFunctions(inscatteringMie, inscatteringRayleigh, V, sunDirection, setting.mieG);

	float3 scatteringMie = inscatteringMie * distance;
	float3 scatteringRayleigh = inscatteringRayleigh * distance;
	float3 extinction = exp(-(scatteringMie + scatteringRayleigh));

	inscattering *= ComputeSunIntensity(setting.sunRadiance, zenithAngleCos);

	float3 Lin = inscattering * (1.0 - extinction) * (4 * PI);
	return Lin;
}

float2 ComputeRaySphereIntersection(float3 position, float3 dir, float3 center, float radius)
{
	float3 origin = position - center;
	float B = dot(origin, dir);
	float C = dot(origin, origin) - radius * radius;
	float D = B * B - C;

	float2 minimaxIntersections;
	if (D < 0.0)
	{
		minimaxIntersections = float2(-1.0, -1.0);
	}
	else
	{
		D = sqrt(D);
		minimaxIntersections = float2(-B - D, -B + D);
	}

	return minimaxIntersections;
}

void ComputeOpticalLength(ScatteringParams setting, float3 P, out float2 opticalLength)
{
	float height = length(P - setting.earthCenter) - setting.earthRadius;
	opticalLength = exp(-height / float2(setting.mieHeight, setting.rayleighHeight));
}

void ComputeOpticalLengthWithClound(ScatteringParams setting, float3 P, out float2 opticalLength)
{
	float height = length(P - setting.earthCenter) - setting.earthRadius;
	opticalLength = exp(-height / float2(setting.mieHeight, setting.rayleighHeight));
	
	float cloud = 0.0;

	if (5e3 < height && height < 10e3) 
	{
		P += float3(23175.7, 0.0, 0.0) + setting.clouddir;
		cloud = fbm(P * 2e-4 * 0.25, setting.cloudBias);
		cloud = smoothstep(0.404, 0.604, cloud) * 70.0f;
		cloud *= sin(PI * (height - 5e3) / 5e3) * setting.cloud;
	}

	opticalLength.x += cloud;
}

void ComputeOpticalInsctrIntegral(ScatteringParams setting, float3 start, float3 end, out float2 opticalLength)
{
	float3 sampleStep = (end - start) / float(NUM_SAMPLES_STEP2);
	float3 samplePos = start;

	for (int j = 0; j < NUM_SAMPLES_STEP2; ++j, samplePos += sampleStep) 
	{
		float2 stepDepthLight;
		ComputeOpticalLength(setting, samplePos, stepDepthLight);		
		opticalLength += stepDepthLight;
	}
	
	opticalLength *= length(sampleStep);
}

void ComputeInsctrIntegral(ScatteringParams setting, float3 start, float3 end, float3 V, float3 L, out float2 opticalLength, out float3 insctrMie, out float3 insctrRayleigh)
{
	float3 samplePos = start;
	float3 sampleStep = (end - start) / float(NUM_SAMPLES_STEP);
	float sampleLength = length(sampleStep);

	for (int i = 0; i < NUM_SAMPLES_STEP; ++i, samplePos += sampleStep)
	{
		float2 stepOpticalLength;
		ComputeOpticalLengthWithClound(setting, samplePos, stepOpticalLength);		
		stepOpticalLength *= sampleLength;
		
		float2 sampleLightIntersections = ComputeRaySphereIntersection(samplePos, L, setting.earthCenter, setting.earthAtmTopRadius);	
		float3 sampleLight = samplePos + L * sampleLightIntersections.y;
		
		float2 depthLight = 0.0;
		ComputeOpticalInsctrIntegral(setting, samplePos, sampleLight, depthLight);
		
		opticalLength += stepOpticalLength;

		float3 opticalDepthMie = setting.waveLambdaMie * (depthLight.x + opticalLength.x);
		float3 opticalDepthRayleigh = setting.waveLambdaRayleigh * (depthLight.y + opticalLength.y);
		float3 opticalDepth = exp(-(opticalDepthMie + opticalDepthRayleigh));
		
		insctrMie += opticalDepth * stepOpticalLength.x;
		insctrRayleigh += opticalDepth * stepOpticalLength.y;
	}
}

float4 ComputeUnshadowedInscattering(ScatteringParams setting, float3 eye, float3 viewdir, float3 L)
{
	float3 V = normalize(viewdir);

	float2 outerIntersections = ComputeRaySphereIntersection(eye, V, setting.earthCenter, setting.earthAtmTopRadius);
	clip(outerIntersections.y);
	
	float2 innerIntersections = ComputeRaySphereIntersection(eye, V, setting.earthCenter, setting.earthRadius);
    if (innerIntersections.x > 0)
    {
        float3 mix = normalize(float3(innerIntersections.xy, 0));
        outerIntersections.y = lerp(outerIntersections.y, innerIntersections.x, pow5(mix.y));
    }
	
	float3 start = eye + V * max(0, outerIntersections.x);
	float3 end = eye + V * outerIntersections.y;
	
	setting.waveLambdaMie *= setting.mieCoefficient;
	setting.waveLambdaRayleigh *= setting.rayleighCoefficient;

	float3 insctrMie = 0.0;
	float3 insctrRayleigh = 0.0;
	float2 insctrOpticalLength = 0.0;
	ComputeInsctrIntegral(setting, start, end, V, -L, insctrOpticalLength, insctrMie, insctrRayleigh);
	
	float phaseTheta = dot(V, -L);
	float phaseMie = ComputePhaseMie(phaseTheta, setting.mieG);
	float phaseSun = ComputePhaseMie(phaseTheta, setting.sunSize);
	float phaseRayleigh = ComputePhaseRayleigh(phaseTheta);
	float phaseNight = 1.0 - saturate(insctrOpticalLength.x * EPSILON);

	float3 insctrTotalSun = insctrMie * setting.waveLambdaMie * phaseSun * phaseNight;
	float3 insctrTotalMie = insctrMie * setting.waveLambdaMie * phaseMie;
	float3 insctrTotalRayleigh = insctrRayleigh * setting.waveLambdaRayleigh * phaseRayleigh;

	float3 scattering = (insctrTotalSun + insctrTotalMie + insctrTotalRayleigh);
	
	bool intersectionTest =  innerIntersections < 0.0 && innerIntersections < 0.0;
	return float4(scattering * setting.sunRadiance, phaseNight * intersectionTest);
}