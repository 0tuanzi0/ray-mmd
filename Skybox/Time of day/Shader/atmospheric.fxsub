#define NUMS_SAMPLES_SUN 8
#define NUMS_SAMPLES_CLOUD 8
#define NUMS_SAMPLES_CLOUD2 8

struct ScatteringParams
{
	float sunSize;
	float sunRadiance;

	float mieG;
	float mieHeight;

	float rayleighHeight;

	float3 waveLambda;
	float3 waveLambdaMie;
	float3 waveLambdaRayleigh;

	float earthRadius;
	float earthAtmTopRadius;
	float3 earthCenter;

	float cloud;
	float cloudMie;
	float cloudBias;
	float cloudTop;
	float cloudBottom;
	float3 clouddir;
};

float2 ComputeRaySphereIntersection(float3 position, float3 dir, float3 center, float radius)
{
	float3 origin = position - center;
	float B = dot(origin, dir);
	float C = dot(origin, origin) - radius * radius;
	float D = B * B - C;

	float2 minimaxIntersections;
	if (D < 0.0)
	{
		minimaxIntersections = float2(-1.0, -1.0);
	}
	else
	{
		D = sqrt(D);
		minimaxIntersections = float2(-B - D, -B + D);
	}

	return minimaxIntersections;
}

float ChapmanApproximation(float X, float h, float cosZenith)
{
	float c = sqrt(X + h);
	float c_exp_h = c * exp2(-h);

	if (cosZenith >= 0)
	{
		return c_exp_h / (c * cosZenith + 1);
	}
	else
	{
		float x0 = sqrt(1 - cosZenith * cosZenith) * (X + h);
		float c0 = sqrt(x0);

		return 2 * c0 * exp2(X - x0) - c_exp_h / (1 - c * cosZenith);
	}
}

float GetOpticalDepthSchueler(float h, float H, float earthRadius, float cosZenith)
{
	return H * ChapmanApproximation(earthRadius / H, h / H, cosZenith);
}

float3 Transmittance(ScatteringParams setting, float3 r, float3 V)
{
	float rl = length(r);
	float h = (rl - setting.earthRadius) / setting.rayleighHeight;
	float cosZenith = dot(r / rl, V);
	float ch = GetOpticalDepthSchueler(h, setting.rayleighHeight, setting.earthRadius, cosZenith);
	return exp2(-(setting.waveLambdaMie + setting.waveLambdaRayleigh) * ch);
}

float2 ComputeOpticalDepth(ScatteringParams setting, float3 samplePoint, float3 V, float3 L, float neg)
{
	float rl = length(samplePoint);
	float h = rl - setting.earthRadius;
	float3 r = samplePoint / rl;

	float cos_chi_sun = dot(r, L);
	float cos_chi_ray = dot(r, V * neg);

	float opticalDepthSun = GetOpticalDepthSchueler(h, setting.rayleighHeight, setting.earthRadius, cos_chi_sun);
	float opticalDepthCamera = GetOpticalDepthSchueler(h, setting.rayleighHeight, setting.earthRadius, cos_chi_ray) * neg;

	return float2(opticalDepthSun, opticalDepthCamera);
}

void AerialPerspective(ScatteringParams setting, float3 start, float3 end, float3 V, float3 L, bool infinite, out float3 transmittance, out float3 insctrMie, out float3 insctrRayleigh)
{
	float inf_neg = infinite ? 1 : -1;

	float3 sampleStep = (end - start) / NUMS_SAMPLES_SUN;
	float3 samplePoint = end - sampleStep;
	float3 sampleLambda = setting.waveLambdaMie + setting.waveLambdaRayleigh;

	float sampleLength = length(sampleStep);

	float3 scattering = 0;
	float2 lastOpticalDepth = ComputeOpticalDepth(setting, end, V, L, inf_neg);

	for (int i = 1; i < NUMS_SAMPLES_SUN; i++, samplePoint -= sampleStep)
	{
		float2 opticalDepth = ComputeOpticalDepth(setting, samplePoint, V, L, inf_neg);

		float3 segment_s = exp2(-sampleLambda * (opticalDepth.x + lastOpticalDepth.x) * 0.5f);
		float3 segment_t = exp2(-sampleLambda * (opticalDepth.y - lastOpticalDepth.y));
		
		transmittance = transmittance * segment_t;
		
		scattering = scattering * segment_t;
		scattering += exp2(-(length(samplePoint) - setting.earthRadius) / setting.rayleighHeight) * segment_s * sampleLength;

		lastOpticalDepth = opticalDepth;
	}

	insctrMie = scattering;
	insctrRayleigh = scattering;
}

bool ComputeSkyboxChapman(ScatteringParams setting, float3 eye, float3 V, float3 L, out float3 transmittance, out float3 insctrMie, out float3 insctrRayleigh)
{
	bool neg = true;

	float2 outerIntersections = ComputeRaySphereIntersection(eye, V, setting.earthCenter, setting.earthAtmTopRadius);
	clip(outerIntersections.y);

	float2 innerIntersections = ComputeRaySphereIntersection(eye, V, setting.earthCenter, setting.earthRadius);
	if (innerIntersections.x > 0)
	{
		neg = false;
		outerIntersections.y = innerIntersections.x;
	}

	eye -= setting.earthCenter;

	float3 start = eye + V * max(0, outerIntersections.x);
	float3 end = eye + V * outerIntersections.y;

	AerialPerspective(setting, start, end, V, -L, neg, transmittance, insctrMie, insctrRayleigh);

	bool intersectionTest = innerIntersections.x < 0.0 && innerIntersections.y < 0.0;
	return intersectionTest;
}

float3 ComputeDensity(ScatteringParams setting, float depth)
{
	return exp(-setting.waveLambdaMie * depth) * (1 - exp(-setting.waveLambdaMie * 2 * depth));
}

float ComputeClound(ScatteringParams setting, float3 P)
{
	float cloud = 0.0;
	float height = P.y;

	if (setting.cloudBottom < height && setting.cloudTop > height) 
	{
		float3 P2 = P + setting.clouddir;
		cloud = fbm(P2 * 2e-4, setting.cloudBias);

		cloud = smoothstep(0.4104, 0.604, cloud) * 70.0f;
		cloud *= sin(PI * (height - setting.cloudBottom) / setting.cloudBottom);
		cloud *= setting.cloud;
	}

	return cloud;
}

float ComputeCloudInsctrIntegral(ScatteringParams setting, float3 start, float3 end)
{
	float3 sampleStep = (end - start) / float(NUMS_SAMPLES_CLOUD2);
	float3 samplePos = start + sampleStep;

	float thickness = 0;

	for (int j = 0; j < NUMS_SAMPLES_CLOUD2; ++j, samplePos += sampleStep) 
	{
		float stepDepthLight = ComputeClound(setting, samplePos);
		thickness += stepDepthLight;
	}

	return thickness * length(sampleStep);
}

void ComputeCloudsInsctrIntegral(ScatteringParams setting, float3 start, float3 end, float3 V, float3 L, out float opticalDepth, out float3 insctrMie)
{
	float3 sampleStep = (end - start) / float(NUMS_SAMPLES_CLOUD);
	float3 samplePos = start + sampleStep * 0.5;

	float sampleLength = length(sampleStep);

	float3 opticalDepthMie = 0.0;

	for (int i = 0; i < NUMS_SAMPLES_CLOUD; ++i, samplePos += sampleStep)
	{
		float stepOpticalDensity = ComputeClound(setting, samplePos);
		stepOpticalDensity *= sampleLength;

		if (any(stepOpticalDensity))
		{
			float2 sampleCloudsIntersections = ComputeRaySphereIntersection(samplePos, L, setting.earthCenter, setting.earthRadius + setting.cloudTop);
			float3 sampleClouds = samplePos + L * sampleCloudsIntersections.y;
			
			float stepOpticalLight = ComputeCloudInsctrIntegral(setting, samplePos, sampleClouds);
			
			opticalDepth += stepOpticalDensity;
			opticalDepthMie += stepOpticalDensity * ComputeDensity(setting, stepOpticalLight) * ComputeDensity(setting, opticalDepth);
		}
	}

	insctrMie = opticalDepthMie;
}

float4 ComputeCloudsInscattering(ScatteringParams setting, float3 eye, float3 V, float3 L)
{
	float3 insctrMie = 0.0;
	float3 insctrRayleigh = 0.0;
	float3 insctrOpticalLength = 1;
	bool intersectionTest = ComputeSkyboxChapman(setting, eye, V, L, insctrOpticalLength, insctrMie, insctrRayleigh);

	float2 cloudsOuterIntersections = ComputeRaySphereIntersection(eye, V, setting.earthCenter, setting.earthRadius + setting.cloudTop);
	float2 cloudsInnerIntersections = ComputeRaySphereIntersection(eye, V, setting.earthCenter, setting.earthRadius + setting.cloudBottom);

	if (cloudsInnerIntersections.x > 0)
	{
		cloudsOuterIntersections.y = cloudsInnerIntersections.x;
	}

	float3 cloudsStart = eye + V * max(0, cloudsOuterIntersections.x);
	float3 cloudsEnd = eye + V * cloudsOuterIntersections.y;

	float3 cloudsMie = 0.0;
	float cloudsOpticalLength = 0.0;
	ComputeCloudsInsctrIntegral(setting, cloudsStart, cloudsEnd, V, -L, cloudsOpticalLength, cloudsMie);

	float phaseTheta = dot(V, -L);
	float phaseMie = ComputePhaseMie(phaseTheta, setting.mieG);
	float phaseSun = ComputePhaseMie(phaseTheta, setting.sunSize);
	float phaseCloud = ComputePhaseMie(phaseTheta, setting.cloudMie);
	float phaseRayleigh = ComputePhaseRayleigh(phaseTheta);
	float phaseNight = 1.0 - saturate(insctrOpticalLength.x * EPSILON);

	float3 insctrTotalSun = insctrMie * setting.waveLambdaMie * phaseSun;
	float3 insctrTotalMie = insctrMie * setting.waveLambdaMie * phaseMie;
	float3 insctrTotalRayleigh = insctrRayleigh * setting.waveLambdaRayleigh * phaseRayleigh;

	float3 sky = insctrTotalSun + insctrTotalMie + insctrTotalRayleigh;
	float3 cloud = cloudsMie * (insctrTotalRayleigh + insctrTotalMie);

	float3 scattering = lerp(cloud, sky, exp(-0.0000001 * cloudsOpticalLength));
	scattering = lerp(sky, scattering, V.y * V.y);

	return float4(scattering * setting.sunRadiance, phaseNight * intersectionTest);
}