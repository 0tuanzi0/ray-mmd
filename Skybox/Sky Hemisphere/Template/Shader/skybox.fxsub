#include "shader/math.fxsub"
#include "shader/common.fxsub"

#if USE_CUSTOM_PARAMS == 0
float mTopColorHP :  CONTROLOBJECT<string name="(self)"; string item = "TopH+";>;
float mTopColorSP :  CONTROLOBJECT<string name="(self)"; string item = "TopS+";>;
float mTopColorVP :  CONTROLOBJECT<string name="(self)"; string item = "TopV+";>;
float mTopColorVM :  CONTROLOBJECT<string name="(self)"; string item = "TopV-";>;
float mTopExponentP :  CONTROLOBJECT<string name="(self)"; string item = "TopExponent+";>;
float mTopExponentM :  CONTROLOBJECT<string name="(self)"; string item = "TopExponent-";>;
float mBottomColorHP :  CONTROLOBJECT<string name="(self)"; string item = "BottomH+";>;
float mBottomColorSP :  CONTROLOBJECT<string name="(self)"; string item = "BottomS+";>;
float mBottomColorVP :  CONTROLOBJECT<string name="(self)"; string item = "BottomV+";>;
float mBottomColorVM :  CONTROLOBJECT<string name="(self)"; string item = "BottomV-";>;
float mBottomExponentP :  CONTROLOBJECT<string name="(self)"; string item = "BottomExponent+";>;
float mBottomExponentM :  CONTROLOBJECT<string name="(self)"; string item = "BottomExponent-";>;
float mMediumColorHP :  CONTROLOBJECT<string name="(self)"; string item = "MediumH+";>;
float mMediumColorSP :  CONTROLOBJECT<string name="(self)"; string item = "MediumS+";>;
float mMediumColorVP :  CONTROLOBJECT<string name="(self)"; string item = "MediumV+";>;
float mMediumColorVM :  CONTROLOBJECT<string name="(self)"; string item = "MediumV-";>;

static const float3 mTopColor = hsv2rgb(float3(mTopColorHP, mTopColorSP, lerp(lerp(1, 2, mTopColorVP), 0, mTopColorVM)));
static const float3 mBottomColor = hsv2rgb(float3(mBottomColorHP, mBottomColorSP, lerp(lerp(1, 2, mBottomColorVP), 0, mBottomColorVM)));
static const float3 mMediumColor = hsv2rgb(float3(mMediumColorHP, mMediumColorSP, lerp(lerp(1, 2, mMediumColorVP), 0, mMediumColorVM)));

static const float mTopExponent = lerp(lerp(1, 4, mTopExponentP), 0, mTopExponentM);
static const float mBottomExponent = lerp(lerp(1, 4, mBottomExponentP), 0, mBottomExponentM);
#else
static const float3 mTopColor = hsv2rgb(TopColor);
static const float3 mBottomColor = hsv2rgb(BottomColor);
static const float3 mMediumColor = hsv2rgb(MediumColor);

static const float mTopExponent = TopExponent;
static const float mBottomExponent = BottomExponent;
#endif

void SkyboxVS(
	in float4 Position   : POSITION,
	out float4 oTexcoord : TEXCOORD0,
	out float4 oPosition : POSITION)
{
	oTexcoord = normalize(Position);
	oPosition = mul(Position, matViewProject);
}

float4 SkyboxPS(in float3 viewdir : TEXCOORD0) : COLOR
{
  	float3 V = normalize(viewdir);

  	float3 color = 0;
  	color = lerp(mMediumColor, mTopColor, pow(max(0, V.y), mTopExponent));
  	color = lerp(color, mBottomColor, pow(max(0, -V.y), mBottomExponent));
  	
	return float4(linear2srgb(color), 1);
}

const float4 ClearColor = 0.0;

technique MainTech<string MMDPass = "object";
	string Script =
	"RenderColorTarget=;"
	"ClearSetColor=ClearColor;"
	"Clear=Color;"
	"Pass=DrawSkybox;";
>{
	pass DrawSkybox {
		AlphaBlendEnable = true; AlphaTestEnable = false;\
		ZEnable = false; ZWriteEnable = false;\
		SrcBlend = ONE; DestBlend = SRCALPHA;\
		VertexShader = compile vs_3_0 SkyboxVS();
		PixelShader  = compile ps_3_0 SkyboxPS();
	}
}
technique MainTechSS<string MMDPass = "object_ss";
	string Script =
	"RenderColorTarget=;"
	"ClearSetColor=ClearColor;"
	"Clear=Color;"
	"Pass=DrawSkybox;";
>{
	pass DrawSkybox {
		AlphaBlendEnable = true; AlphaTestEnable = false;\
		ZEnable = false; ZWriteEnable = false;\
		SrcBlend = ONE; DestBlend = SRCALPHA;\
		VertexShader = compile vs_3_0 SkyboxVS();
		PixelShader  = compile ps_3_0 SkyboxPS();
	}
}

technique EdgeTec<string MMDPass = "edge";>{}
technique ShadowTec<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}