#include "../shader/math.fx"
#include "../shader/common.fx"

#ifndef SKYBOX_MAX_SIZE
#   define SKYBOX_MAX_SIZE 1000
#endif

#ifndef SKYDOME_ENABLE
#   define SKYDOME_ENABLE 0
#endif

bool ExistRay : CONTROLOBJECT<string name = "ray.x";>;

#if SKYBOX_HDR_ENABLE
    float mScale : CONTROLOBJECT < string name="skybox_hdr.pmx"; string item = "Scale+"; >;
#else
    float mScale : CONTROLOBJECT < string name="skybox.pmx"; string item = "Scale+"; >;
#endif

float EnvRotateX : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvRotateX"; >;
float EnvRotateY : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvRotateY"; >;
float EnvRotateZ : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvRotateZ"; >;

static float rotateX = EnvRotateX * PI_2;
static float rotateY = EnvRotateY * PI_2;
static float rotateZ = EnvRotateZ * PI_2;
static float3x3 rotate = makeRotate(rotateX, rotateY, rotateZ);

texture decal : MATERIALTEXTURE;
sampler decalMap = sampler_state
{
    texture = <decal>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = NONE;
    ADDRESSU  = CLAMP;
    ADDRESSV  = CLAMP;
};

void SkyboxVS(
    in float4 Position : POSITION,
    out float4 oNormal   : TEXCOORD0,
    out float4 oPosition : SV_Position)
{
#if SKYDOME_ENABLE
    oNormal = normalize(Position);
    oNormal.y = oNormal.y < -0.05 ? -0.05 : oNormal.y;
    oNormal.y += 0.04999;
    oPosition = mul(float4(oNormal.xyz * lerp(SKYBOX_MIN_SIZE, SKYBOX_MAX_SIZE, mScale), 1) , matViewProject);
    oNormal.y -= 0.04999;
#else
    oNormal = normalize(Position);
    oPosition = mul(float4(oNormal.xyz * lerp(SKYBOX_MIN_SIZE, SKYBOX_MAX_SIZE, mScale), 1), matViewProject);
#endif
}

float4 SkyboxPS(in float4 normal : TEXCOORD0) : COLOR
{
    float3 N = normalize(mul(rotate, normal)).xyz;   
    if (ExistRay)
    {
#if SKYBOX_GAMMA_CORRECTION
        return srgb2linear(tex2D(decalMap, computeSphereCoord(N)));
#elif SKYBOX_HDR_ENABLE  
        float4 rgbm = tex2D(decalMap, computeSphereCoord(N));
        return float4(DecodeRGBM(rgbm), 1);
#else
        return tex2D(decalMap, computeSphereCoord(N));
#endif
    }
    else
    {
#if SKYBOX_HDR_ENABLE
        float4 rgbm = tex2D(decalMap, computeSphereCoord(N));
        return float4(linear2srgb(DecodeRGBM(rgbm)), 1);
#else
        return tex2D(decalMap, computeSphereCoord(N));
#endif
    }
}

#define OBJECT_TEC(name, mmdpass) \
    technique name < string MMDPass = mmdpass; \
    string Script = \
        "RenderColorTarget0=;" \
        "RenderDepthStencilTarget=;" \
        "Pass=DrawObject;" \
    ; \
    > { \
        pass DrawObject { \
            AlphaTestEnable = FALSE; AlphaBlendEnable = FALSE; \
            VertexShader = compile vs_3_0 SkyboxVS(); \
            PixelShader  = compile ps_3_0 SkyboxPS(); \
        } \
    }

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTec1, "object_ss")

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTec < string MMDPass = "shadow"; > {}
technique ZplotTec < string MMDPass = "zplot"; > {}