#include "../ray.conf"
#include "../ray_advanced.conf"
#include "../shader/math.fxsub"
#include "../shader/common.fxsub"
#include "../shader/gbuffer.fxsub"
#include "../shader/gbuffer_sampler.fxsub"
#include "../shader/lighting.fxsub"

float3  LightDirection  : DIRECTION < string Object = "Light"; >;
float3  LightSpecular   : SPECULAR  < string Object = "Light"; >;

bool ExistRay : CONTROLOBJECT<string name = "ray.x";>;

texture DiffuseMap: MATERIALTEXTURE;
sampler DiffuseMapSamp = sampler_state
{
    texture = <DiffuseMap>;
    MINFILTER = ANISOTROPIC;
    MAGFILTER = ANISOTROPIC;
    MIPFILTER = POINT;
    MAXANISOTROPY = 16;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
};

float4 GetTextureColor(float4 albedo, float2 uv)
{
    if (use_texture)
    {
        float4 TexColor = tex2D(DiffuseMapSamp, uv);
        TexColor.rgb = lerp(1, TexColor * TextureMulValue + TextureAddValue, TextureMulValue.a + TextureAddValue.a).rgb;
        albedo *= TexColor;
    }

    return srgb2linear(albedo);
}

void DrawObjectVS(
    in float4 Position : POSITION,
    in float3 Normal   : NORMAL,
    in float4 Texcoord : TEXCOORD0,
    out float4 oTexcoord  : TEXCOORD0,
    out float3 oNormal    : TEXCOORD1,
    out float3 oViewdir   : TEXCOORD2,
    out float4 oTexcoord2 : TEXCOORD3,
    out float4 oPosition  : SV_Position)
{
    oNormal = Normal;
    oTexcoord = Texcoord;
    oViewdir = CameraPosition - Position.xyz;
    oTexcoord2 = oPosition = mul(Position, matViewProject);
}

float4 DrawObjectPS(float4 texcoord : TEXCOORD0, float3 normal : TEXCOORD1, float3 viewdir : TEXCOORD2, float4 screenPos : TEXCOORD3) : SV_Target
{
#if EXIST_RAY
    float2 coord = screenPos.xy / screenPos.w;
    coord = PosToCoord(coord);
    coord += ViewportOffset;
    
    float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
    float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
    float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
    float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));
    
    MaterialParam material;
    DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, material);
    
    #if DISCARD_ALPHA_ENABLE
        float alpha = MaterialDiffuse.a;
    #if DISCARD_ALPHA_MAP_ENABLE
        #if ALPHA_MAP_ENABLE
            alpha *= tex2D(AlphaMapSamp, texcoord.xy).a;
        #else
            if (use_texture) alpha *= tex2D(DiffuseMapSamp, texcoord.xy).a;
        #endif
    #endif
        clip(alpha - DiscardAlphaThreshold);
        if (material.alpha != 0.0) clip(material.alpha - DiscardAlphaThreshold);
        clip(sum(material.albedo + material.specular) - 1e-5);
    #endif
        return 0;
#else
    if (ExistRay)
    {
#if DISCARD_ALPHA_ENABLE
        float alpha = MaterialDiffuse.a;
#if DISCARD_ALPHA_MAP_ENABLE
        if (use_texture) alpha *= tex2D(DiffuseMapSamp, texcoord.xy).a;
#endif
        clip(alpha - DiscardAlphaThreshold);
#endif
        return 0;
    }
    else
    {
        float4 albedo = GetTextureColor(MaterialDiffuse, texcoord.xy);
        
        float3 L = normalize(-LightDirection);
        float3 V = normalize(viewdir);
        float3 N = normalize(normal);

        float MaterialSmoothness = ShininessToSmoothness(MaterialPower);

        MaterialParam material = (MaterialParam)0;
        material.normal = N;
        material.smoothness = MaterialSmoothness;
        material.albedo = albedo.rgb;
        material.specular = 0.04;
        material.alpha = 1;

        float4 lighting = albedo;
        lighting.rgb *= DiffuseBRDF(N, L, V, material);
        lighting.rgb += SpecularBRDF_GGX(N, L, V, MaterialSmoothness, 0.04, 1.0);
        lighting.rgb *= dot(N, L) * LightSpecular;

        return linear2srgb(lighting);
    }
#endif
}

#define OBJECT_TEC(name, mmdpass) \
    technique name < string MMDPass = mmdpass;\
    > { \
        pass DrawObject { \
            AlphaTestEnable = FALSE; AlphaBlendEnable = FALSE; \
            VertexShader = compile vs_3_0 DrawObjectVS(); \
            PixelShader  = compile ps_3_0 DrawObjectPS(); \
        } \
    }

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}