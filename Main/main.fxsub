#include "../ray.conf"
#include "../shader/math.fx"
#include "../shader/common.fx"
#include "../shader/gbuffer.fx"
#include "../shader/gbuffer_sampler.fx"
#include "../shader/lighting.fx"

bool ExistRay : CONTROLOBJECT<string name = "ray.x";>;

float mDirectLightP : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "DirectLight+"; >;
float mDirectLightM : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "DirectLight-"; >;

shared texture2D ShadowmapMap : RENDERCOLORTARGET;
sampler ShadowmapSamp = sampler_state {
    texture = <ShadowmapMap>;
    MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = LINEAR;
    AddressU  = CLAMP;  AddressV = CLAMP;
};

texture ObjectTexture: MATERIALTEXTURE;
sampler ObjTexSampler = sampler_state
{
    texture = <ObjectTexture>;
    MINFILTER = ANISOTROPIC;
    MAGFILTER = ANISOTROPIC;
    MIPFILTER = LINEAR;
    MAXANISOTROPY = 16;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
};

float4 GetTextureColor(float4 albedo, float2 uv)
{
    if (use_texture)
    {
        float4 TexColor = tex2D(ObjTexSampler, uv);
        TexColor.rgb = lerp(1, TexColor * TextureMulValue + TextureAddValue, TextureMulValue.a + TextureAddValue.a).rgb;
        TexColor.rgb = TexColor.rgb;
        albedo *= TexColor;
    }

    return srgb2linear(albedo);
}

float3 ShadingMaterial(float3 V, float3 L, MaterialParam material)
{
    float3 lighting = 0;
    
    float3 N = mul(material.normal, (float3x3)matViewInverse);
    
    if (material.lightModel == LIGHTINGMODEL_NORMAL || material.lightModel == LIGHTINGMODEL_EMISSIVE)
        lighting = DiffuseBRDF(N, L, V, material.smoothness) * LightSpecular;
    else if (material.lightModel == LIGHTINGMODEL_TRANSMITTANCE)
        lighting = TranslucencyBRDF(N, L, material.transmittance) * LightSpecular;

    lighting *= material.albedo;
    lighting += SpecularBRDF(N, L, V, material.smoothness, material.specular) * LightSpecular;
    lighting *= (lerp(1, 10, mDirectLightP) - mDirectLightM);

    return lighting;
}

float3 ShadingMaterial(float3 V, float3 L, float2 coord, MaterialParam material)
{
    float3 lighting = ShadingMaterial(V, L, material);
#if SHADOW_QUALITY > 0
    lighting *= tex2D(ShadowmapSamp, coord).r;
#endif
    return lighting;
}

void DrawObjectVS(
    in float4 Position : POSITION,
    in float3 Normal   : NORMAL,
    in float2 Texcoord : TEXCOORD0,
    out float4 oTexcoord  : TEXCOORD0,
    out float3 oNormal    : TEXCOORD1,
    out float3 oViewdir   : TEXCOORD2,
    out float4 oTexcoord2 : TEXCOORD3,
    out float4 oPosition  : SV_Position)
{
    oTexcoord = Texcoord.xyxy;
    oViewdir = CameraPosition - mul(Position, matWorld).xyz;
    oNormal = mul(Normal, (float3x3)matWorld);
    oPosition = mul(Position, matWorldViewProject);
    oTexcoord2 = oPosition;
}

float4 DrawObjectPS(
    float4 texcoord : TEXCOORD0,
    float3 normal   : TEXCOORD1,
    float3 viewdir  : TEXCOORD2,
    float4 texcoord2 : TEXCOORD3) : SV_Target
{   
    float4 albedo = GetTextureColor(MaterialDiffuse, texcoord.xy);
    if (ExistRay)
    {
        float2 coord = texcoord2.xy / texcoord2.w;
        coord = PosToCoord(coord);
        coord += ViewportOffset;

        float4 MRT1 = tex2D(Gbuffer1Map, coord);
        float4 MRT2 = tex2D(Gbuffer2Map, coord);
        float4 MRT3 = tex2D(Gbuffer3Map, coord);
                
        MaterialParam material;        
        DecodeGbuffer(MRT1, MRT2, MRT3, material);    

        float3 V = normalize(viewdir);
        float3 L = normalize(-LightDirection);

        float3 lighting = ShadingMaterial(V, L, coord, material);

#if ALHPA_ENABLE > 0
        float4 MRT5 = tex2D(Gbuffer5Map, coord);
        float4 MRT6 = tex2D(Gbuffer6Map, coord);
        float4 MRT7 = tex2D(Gbuffer7Map, coord);
        
        float alphaDiffuse = 0;
        MaterialParam materialAlpha;
        DecodeGbufferWithAlpha(MRT5, MRT6, MRT7, materialAlpha, alphaDiffuse);
        
        if (alphaDiffuse < 1 && !any(material.albedo + max(0, material.specular - 0.041)))
        {
            clip(-1);
        }
        
        return float4(lighting, 1);
#else
        return float4(lighting, albedo.a);
#endif  
    }
    else
    {        
        float3 L = normalize(-LightDirection);
        float3 V = normalize(viewdir);
        float3 N = normalize(normal);

        float MaterialSmoothness = ShininessToSmoothness(MaterialPower);

        float3 f0 = albedo.rgb * MaterialSpecular;
        float3 specular = SpecularBRDF(N, L, V, MaterialSmoothness, f0);

        float3 diffuse;

    #if defined(ENABLE_SSS_SKIN)
        float3 transmittance = SkinTransmittance(translucency);
        diffuse = TranslucencyBRDF(N, L, V, MaterialSmoothness, transmittance);
    #elif defined(ENABLE_SSS)
        transmittance *= transmittance;
        diffuse = TranslucencyBRDF(N, L, V, MaterialSmoothness, transmittance);
    #else
        diffuse = DiffuseBRDF(N, L, V, MaterialSmoothness);
    #endif

        float4 lighting = albedo;
        lighting.rgb *= diffuse * LightSpecular;
        lighting.rgb += specular * LightSpecular;

        return linear2srgb(lighting);
    }
}

#if ALHPA_ENABLE > 0
#define OBJECT_TEC(name, mmdpass) \
    technique name < string MMDPass = mmdpass;\
    > { \
        pass DrawObject { \
            AlphaTestEnable = FALSE; AlphaBlendEnable = FALSE; \
            VertexShader = compile vs_3_0 DrawObjectVS(); \
            PixelShader  = compile ps_3_0 DrawObjectPS(); \
        } \
    }
#else
#define OBJECT_TEC(name, mmdpass) \
    technique name < string MMDPass = mmdpass;\
    > { \
        pass DrawObject { \
            VertexShader = compile vs_3_0 DrawObjectVS(); \
            PixelShader  = compile ps_3_0 DrawObjectPS(); \
        } \
    }
#endif

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}