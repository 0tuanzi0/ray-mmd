#include "../ray.conf"
#include "../shader/math.fx"
#include "../shader/common.fx"
#include "../shader/gbuffer.fx"
#include "../shader/gbuffer_sampler.fx"
#include "../shader/lighting.fx"

#if ALBEDO_MAP_ENABLE && ALBEDO_MAP_IN_TEXTURE != 1
    texture2D AlbedoMap<string ResourceName = ALBEDO_MAP_FILE;>; 
    sampler AlbedoMapSamp = sampler_state
    {
        texture = AlbedoMap;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if NORMAL_MAP_ENABLE && NORMAL_MAP_IN_SPHEREMAP != 1
    texture2D NormalMap<string ResourceName = NORMAL_MAP_FILE;>; 
    sampler NormalMapSamp = sampler_state
    {
        texture = NormalMap;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if SMOOTHNESS_MAP_ENABLE && SMOOTHNESS_MAP_ENABLE != 1
    texture2D SmoothnessMap<string ResourceName = SMOOTHNESS_MAP_FILE;>; 
    sampler SmoothnessMapSamp = sampler_state
    {
        texture = SmoothnessMap;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if METALNESS_MAP_ENABLE && METALNESS_MAP_IN_TONEMAP != 1
    texture2D MetalnessMap<string ResourceName = METALNESS_MAP_FILE;>; 
    sampler MetalnessMapSamp = sampler_state
    {
        texture = MetalnessMap;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if SSS_MAP_ENABLE
    texture2D TransmittanceMap<string ResourceName = SSS_MAP_FILE;>; 
    sampler TransmittanceMapSamp = sampler_state
    {
        texture = TransmittanceMap;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if MELANIN_MAP_ENABLE
    texture2D MelaninMap<string ResourceName = MELANIN_MAP_FILE;>; 
    sampler MelaninMapSamp = sampler_state
    {
        texture = MelaninMap;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if EMMISIVE_MAP_ENABLE && EMMISIVE_IN_TEXTURE != 0
    texture2D EmmisiveMap<string ResourceName = EMMISIVE_MAP_FILE;>; 
    sampler EmmisiveMapSamp = sampler_state
    {
        texture = EmmisiveMap;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

texture DiffuseMap: MATERIALTEXTURE;
sampler DiffuseMapSamp = sampler_state
{
    texture = <DiffuseMap>;
    MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
};

texture SphereMap : MATERIALSPHEREMAP;
sampler SphereMapSamp = sampler_state {
    texture = <SphereMap>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
};

texture ToneMap : MATERIALTOONTEXTURE;
sampler ToneMapSamp = sampler_state {
    texture = <ToneMap>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
};

struct VS_OUTPUT
{
    float4 Position : POSITION;
    float3 Normal   : TEXCOORD0;
    float2 Texcoord : TEXCOORD1;
    float  Distance : TEXCOORD2;
    float3 Viewdir  : TEXCOORD3; 
};

float3 ColorSynthesis(float3 diffuse, float m)
{
    float3 melanin = diffuse * luminance(diffuse);
    return diffuse * lerp(1.0, melanin, m);
}

float4 GetTextureColor(float2 uv, bool use_texture)
{
#if USE_CUSTOM_MATERIAL
    #if EMMISIVE_ENABLE
        #if EMMISIVE_IN_TEXTURE
            #if EMMISIVE_APPLY_COLOR
                return srgb2linear(float4(emmisive.rgb, 1) * tex2D(DiffuseMapSamp, uv * emmisiveMapLoopNum));
            #else
                return srgb2linear(tex2D(DiffuseMapSamp, uv * emmisiveMapLoopNum));
            #endif
        #elif EMMISIVE_MAP_ENABLE
            #if EMMISIVE_APPLY_COLOR
                return srgb2linear(float4(emmisive.rgb, 1) * tex2D(EmmisiveMap, uv * emmisiveMapLoopNum));
            #else
                return srgb2linear(tex2D(EmmisiveMap, uv * emmisiveMapLoopNum));
            #endif
        #else
            return float4(emmisive, 1);
        #endif
    #elif  ALBEDO_MAP_ENABLE
        float4 diffuse = MaterialDiffuse;
        #if ALBEDO_MAP_IN_TEXTURE
            if (use_texture)
            {
                #if ALBEDO_MAP_APPLY_COLOR
                    return albedo * srgb2linear(albedo * tex2D(DiffuseMapSamp, uv * albedoMapLoopNum));
                #else
                    return diffuse * srgb2linear(tex2D(DiffuseMapSamp, uv * albedoMapLoopNum));
                #endif
            }
            else
            {
                return srgb2linear(diffuse);
            }
        #else
            #if ALBEDO_MAP_APPLY_COLOR
                return albedo * srgb2linear(albedo * tex2D(AlbedoMapSamp, uv * albedoMapLoopNum));
            #else
                return srgb2linear(tex2D(AlbedoMapSamp, uv * albedoMapLoopNum));
            #endif
        #endif
    #else
        return srgb2linear(albedo);
    #endif
#else
    float4 diffuse = MaterialDiffuse;
    if (use_texture)
    {
        float4 TexColor = tex2D(DiffuseMapSamp, uv * albedoMapLoopNum);
        TexColor.rgb = lerp(1, TexColor * TextureMulValue + TextureAddValue, TextureMulValue.a + TextureAddValue.a).rgb;
        TexColor.rgb = TexColor.rgb;
        diffuse *= TexColor;
    }
    
    return srgb2linear(diffuse);
#endif
}

float3 GetNormal(float3 N, float3 viewdir, float2 coord)
{
#if USE_CUSTOM_MATERIAL
    #if NORMAL_MAP_ENABLE
        #if NORMAL_MAP_IN_SPHEREMAP
            float3x3 tangentFrame = computeTangentBinormalNormal(N, viewdir, coord);
            float3 tangentNormal = normalize(tex2D(SphereMapSamp, coord * normalMapLoopNum).rgb * 2 - 1);
            tangentNormal = lerp(float3(0,0,1), tangentNormal, normalMapScale); 
            float3 highNormal = normalize(mul(tangentNormal, tangentFrame));
            return highNormal;
        #else    
            float3x3 tangentFrame = computeTangentBinormalNormal(N, viewdir, coord);
            float3 tangentNormal = normalize(tex2D(NormalMapSamp, coord * normalMapLoopNum).rgb * 2 - 1);
            tangentNormal = lerp(float3(0,0,1), tangentNormal, normalMapScale); 
            float3 highNormal = normalize(mul(tangentNormal, tangentFrame));
            return highNormal;
        #endif
    #else
        return N;
    #endif
#else
    return N;
#endif
}

float GetSmoothness(float2 coord)
{
#if USE_CUSTOM_MATERIAL
    #if SMOOTHNESS_MAP_ENABLE
        sampler smoothnessMapSamper;
        #if SMOOTHNESS_MAP_IN_TONEMAP
            smoothnessMapSamper = ToneMapSamp;
        #else
            smoothnessMapSamper = SmoothnessMapSamp;
        #endif
        
        float smoothness = 0;
        #if SMOOTHNESS_MAP_SWIZZLE_R
            smoothness = tex2D(smoothnessMapSamper, coord * smoothnessMapLoopNum).r;
        #elif SMOOTHNESS_MAP_SWIZZLE_G
            smoothness = tex2D(smoothnessMapSamper, coord * smoothnessMapLoopNum).g;
        #elif SMOOTHNESS_MAP_SWIZZLE_B
            smoothness = tex2D(smoothnessMapSamper, coord * smoothnessMapLoopNum).b;
        #elif SMOOTHNESS_MAP_SWIZZLE_A
            smoothness = tex2D(smoothnessMapSamper, coord * smoothnessMapLoopNum).a;
        #else
            smoothness = tex2D(smoothnessMapSamper, coord * smoothnessMapLoopNum).r;
        #endif
        
        #if SMOOTHNESS_MAP_IS_ROUGHNESS
            smoothness = RoughnessToSmoothness(smoothness);
        #endif
        
        return smoothness;
    #else
        #if SMOOTHNESS_MAP_IS_ROUGHNESS
            smoothness = RoughnessToSmoothness(smoothness);
        #endif
        
        return smoothness;
    #endif
#else
    return ShininessToSmoothness(MaterialPower);
#endif
}

float GetMetalness(float2 coord)
{
#if USE_CUSTOM_MATERIAL
    #if METALNESS_MAP_ENABLE
        #if METALNESS_MAP_IN_TONEMAP
            sampler metalnessMapSamper = ToneMapSamp;
        #else
            sampler metalnessMapSamper = MetalnessMapSamp;
        #endif
        
        #if METALNESS_MAP_SWIZZLE_R
            return tex2D(metalnessMapSamper, coord * metalnessMapLoopNum).r;
        #elif METALNESS_MAP_SWIZZLE_G
            return tex2D(metalnessMapSamper, coord * metalnessMapLoopNum).g;
        #elif METALNESS_MAP_SWIZZLE_B
            return tex2D(metalnessMapSamper, coord * metalnessMapLoopNum).b;
        #elif METALNESS_MAP_SWIZZLE_A
            return tex2D(metalnessMapSamper, coord * metalnessMapLoopNum).a;
        #else
            return tex2D(metalnessMapSamper, coord * metalnessMapLoopNum).r;
        #endif
    #else
        return metalness;
    #endif
#else
    return 0.0f;
#endif
}

float3 SkinTransmittance(float translucency)
{
    return exp((1 - saturate(translucency)) * float3(-8, -40, -64));
}

float4 GetTransmittance(float2 coord)
{
#if USE_CUSTOM_MATERIAL
    #if SSS_ENABLE
        #if SSS_MAP_ENABLE
            return srgb2linear(tex2D(TransmittanceMapSamp, coord * transmittanceMapLoopNum));
        #else
            return transmittance;
        #endif
    #else
        return 0.0f;
    #endif
#else
    return 0.0;
#endif
}

float GetMelanin(float2 coord)
{
#if USE_CUSTOM_MATERIAL
    #if MELANIN_MAP_ENABLE
        #if MELANIN_MAP_SWIZZLE_R
            return tex2D(MelaninMapSamp, coord * metalnessMapLoopNum).r;
        #elif MELANIN_MAP_SWIZZLE_G
            return tex2D(MelaninMapSamp, coord * metalnessMapLoopNum).g;
        #elif MELANIN_MAP_SWIZZLE_B
            return tex2D(MelaninMapSamp, coord * metalnessMapLoopNum).b;
        #elif MELANIN_MAP_SWIZZLE_A
            return tex2D(MelaninMapSamp, coord * metalnessMapLoopNum).a;
        #else
            return tex2D(MelaninMapSamp, coord * metalnessMapLoopNum).r;
        #endif
    #else
        return melanin;
    #endif
#else
    return 0.0;
#endif
}

VS_OUTPUT MaterialVS(float4 Position : POSITION, float3 Normal : NORMAL, float2 Texcoord: TEXCOORD0)
{
    VS_OUTPUT Out;
    Out.Position = mul(Position, matWorldViewProject);
    Out.Normal = normalize(mul(Normal, (float3x3)matWorldView));
    Out.Texcoord = Texcoord;
    Out.Distance = Out.Position.w;
    Out.Viewdir = mul(CameraPosition - mul(Position, matWorld).xyz, (float3x3)matView);
    return Out;
}

GbufferParam MaterialPS(VS_OUTPUT IN, uniform bool useTexture, uniform bool useSphereMap)
{
    float4 albedo = GetTextureColor(IN.Texcoord, useTexture);
    albedo.rgb = ColorSynthesis(albedo.rgb, GetMelanin(IN.Texcoord));

    clip(albedo.a - AlphaThreshold);
    
    float MaterialMetalness = GetMetalness(IN.Texcoord);

    MaterialParam material;
    material.index = 0;
    material.normal = GetNormal(normalize(IN.Normal), normalize(-IN.Viewdir), IN.Texcoord);
    material.smoothness = GetSmoothness(IN.Texcoord);
    material.albedo = albedo.rgb * (1.0 - MaterialMetalness);
    material.specular = lerp(0.04, albedo.rgb, MaterialMetalness);
    material.transmittance = GetTransmittance(IN.Texcoord) * (1.0 - MaterialMetalness);
    
#if SSS_ENABLE
    material.lightModel = LIGHTINGMODEL_TRANSMITTANCE;
#   if defined(SSS_SKIN_ENABLE)
        material.index = SUBSURFACESCATTERING_SKIN;
#   elif defined(USE_CUSTOM_MATERIAL)
        material.index = SUBSURFACESCATTERING_MARBLE;
#   endif
#elif EMMISIVE_ENABLE
    material.lightModel = LIGHTINGMODEL_EMISSIVE;
#else
    material.lightModel = LIGHTINGMODEL_NORMAL;
#endif

    return EncodeGbuffer(material, IN.Distance);
}

#define OBJECT_TEC(name, mmdpass, tex, sphere) \
    technique name < string MMDPass = mmdpass; bool UseTexture = tex; bool UseSphereMap = sphere; \
    string Script = \
        "RenderColorTarget0=;" \
        "RenderColorTarget1=Gbuffer2RT;" \
        "RenderColorTarget2=Gbuffer3RT;" \
        "RenderColorTarget3=Gbuffer4RT;" \
        "RenderDepthStencilTarget=;" \
        "Pass=DrawObject;" \
        "RenderColorTarget1=;" \
        "RenderColorTarget2=;" \
    ; \
    > { \
        pass DrawObject { \
            AlphaTestEnable = FALSE; AlphaBlendEnable = FALSE; \
            VertexShader = compile vs_3_0 MaterialVS(); \
            PixelShader  = compile ps_3_0 MaterialPS(tex, sphere); \
        } \
    }

OBJECT_TEC(MainTec0, "object", false, false)
OBJECT_TEC(MainTec1, "object", true, false)
OBJECT_TEC(MainTec2, "object", false, true)
OBJECT_TEC(MainTec3, "object", true, true)
OBJECT_TEC(MainTecBS0, "object_ss", false, false)
OBJECT_TEC(MainTecBS1, "object_ss", true, false)
OBJECT_TEC(MainTecBS2, "object_ss", false, true)
OBJECT_TEC(MainTecBS3, "object_ss", true, true)

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}