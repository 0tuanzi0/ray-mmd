float time : TIME<bool SyncInEditMode=true;>;

float2 ViewportSize : VIEWPORTPIXELSIZE;
static float2 ViewportOffset  = (float2(0.5,0.5) / ViewportSize);
static float2 ViewportOffset2 = (float2(1.0,1.0) / ViewportSize);
static float  ViewportAspect  = ViewportSize.x / ViewportSize.y;

texture ScnMap : RENDERCOLORTARGET <
	float2 ViewPortRatio = {1.0,1.0};
	string Format = "A2B10G10R10";
>;
sampler ScnSamp = sampler_state {
	texture = <ScnMap>;
	MinFilter = POINT; MagFilter = POINT; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

texture Spectrum1Map<string ResourceName = WAVE_1_MAP_FILE;>; 
sampler Spectrum1MapSamp = sampler_state
{
	texture = <Spectrum1Map>;
	MinFilter = POINT; MagFilter = POINT; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

texture Spectrum2Map<string ResourceName = WAVE_2_MAP_FILE;>; 
sampler Spectrum2MapSamp = sampler_state
{
	texture = <Spectrum2Map>;
	MinFilter = POINT; MagFilter = POINT; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

texture NoiseMap<string ResourceName = "noise.png";>; 
sampler NoiseMapSamp = sampler_state
{
	texture = NoiseMap;
	MINFILTER = LINEAR; MAGFILTER = LINEAR; MIPFILTER = LINEAR;
	ADDRESSU = WRAP; ADDRESSV = WRAP;
};

#if USE_CUSTOM_PARAMS
static float mWaveLines = 7;
static float mWaveBloom = waveBloom;
static float mWaveHeight = waveHeight;
static float mWaveFade = waveFade;
static float mWaveBlockSize = waveBlockSize;

static float2 mSize = size;
static float2 mTranslate = translate;

static float3 mWaveColorLow = waveColorLow;
static float3 mWaveColorHigh = waveColorHigh;
static float3 mWaveColorBg = waveBlockColorBg;
#else
float mPositionXP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "PosX+";>;
float mPositionYP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "PosY+";>;
float mPositionXM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "PosX-";>;
float mPositionYM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "PosY-";>;
float mSizeX : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "SizeW-";>;
float mSizeY : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "SizeH-";>;

float mColorLowH : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "ColorLowH+";>;
float mColorLowS : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "ColorLowS+";>;
float mColorLowP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "ColorLowV+";>;
float mColorLowM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "ColorLowV-";>;
float mColorHighH : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "ColorHighH+";>;
float mColorHighS : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "ColorHighS+";>;
float mColorHighP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "ColorHighV+";>;
float mColorHighM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "ColorHighV-";>;

float mWaveBloomP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "WaveBloom+";>;
float mWaveBloomM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "WaveBloom-";>;
float mWaveHeightP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "WaveHeight+";>;
float mWaveHeightM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "WaveHeight-";>;
float mWaveFadeP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "WaveFade+";>;
float mWaveFadeM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "WaveFade-";>;
float mBlockSizeP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "BlockSize+";>;
float mBlockSizeM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "BlockSize-";>;

float mBlockColorH : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "BlockColorH+";>;
float mBlockColorS : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "BlockColorS+";>;
float mBlockColorP : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "BlockColorV+";>;
float mBlockColorM : CONTROLOBJECT<string name="WaveLinesFightingController.pmx"; string item = "BlockColorV-";>;

static float mWaveLines = 7;
static float mWaveBloom = lerp(lerp(10, 6, mWaveBloomP), 1, mWaveBloomM);
static float mWaveHeight = lerp(lerp(1, 2, mWaveHeightP), 0, mWaveHeightM);
static float mWaveFade = lerp(lerp(0.8, 2.0, mWaveFadeP), 0.1, mWaveFadeM);
static float mWaveBlockSize = lerp(lerp(0.02, 0.2, mBlockSizeP), 0.0, mBlockSizeM);;

static float2 mSize = 1.0 - float2(mSizeX, mSizeY);
static float2 mTranslate = float2(mPositionXP, mPositionYP) - float2(mPositionXM, mPositionYM);

static float3 mWaveColorLow = float3(mColorLowH, mColorLowS, lerp(lerp(1, 2, mColorLowP), 0, mColorLowM));
static float3 mWaveColorHigh = float3(mColorHighH, mColorHighS, lerp(lerp(1, 2, mColorHighP), 0, mColorHighM));
static float3 mWaveColorBg = float3(mBlockColorH, mBlockColorS, lerp(lerp(1, 2, mBlockColorP), 0, mBlockColorM));
#endif

float3 ACESFilmLinear(float3 x)
{
	const float A = 2.51f;
	const float B = 0.03f;
	const float C = 2.43f;
	const float D = 0.59f;
	const float E = 0.14f;
	return (x * (A * x + B)) / (x * (C * x + D) + E);
}

float2 GetFramesPerSecond(float time, float size = 256)
{
	float frame = time / 8.5 * (size - 1);

	float y = floor(frame / size);
	float x = frame - y * size;

	return float2(x, y) / size;
}

float3 rgb2hsv(float3 c)
{
	float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	float4 p = lerp(float4(c.bg, K.wz), float4(c.gb, K.xy), step(c.b, c.g));
	float4 q = lerp(float4(p.xyw, c.r), float4(c.r, p.yzx), step(p.x, c.r));

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

float3 hsv2rgb(float3 c)
{
	float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * lerp(K.xxx, saturate(p - K.xxx), c.y);
}

void SoundSpectrumVS(
	in float4 Position : POSITION,
	in float4 Texcoord : TEXCOORD0,
	out float4 oTexcoord  : TEXCOORD0,
	out float4 oPosition  : POSITION)
{
	oTexcoord = Texcoord;
	oTexcoord.zw = Texcoord.xy * ViewportSize;
	oTexcoord.xy += ViewportOffset.xy;
	oPosition = Position;
}

float3 GenWaveBg(float2 coord, float3 blockColor, float size = 0.02)
{
	float s1 = fmod(coord.x, 2.0 * size);
	float s2 = fmod(coord.y, 2.0 * size);

	s1 = step(size, s1);
	s2 = step(size, s2);

#if USE_RGB_SPACE
	return lerp(0.0, blockColor * coord.y, s1 * s2);
#else
	return lerp(0.0, hsv2rgb(blockColor) * coord.y, s1 * s2);
#endif
}

float3 GenWave(float2 coord, float4 freqs1, float4 freqs2)
{
    float freqs[8] = { freqs1, freqs2.abgr };

    float n = floor(abs(coord.x) * mWaveLines);
	float fft1  = freqs[n];
	float fft2  = freqs[max(0, n - 1 * sign(coord.x))];

	float fft = lerp(fft2, fft1, coord.x * mWaveLines - floor(coord.x * mWaveLines)) * mWaveHeight;
	float wave = 1 - saturate(fft);
	
	float2 noise = tex2Dlod(NoiseMapSamp, float4(coord.x, fft, 0, 0)).rg;
	fft *= noise.x * noise.y;
	wave *= noise.x;

#if USE_RGB_SPACE
    float3 color = lerp(mWaveColorHigh, mWaveColorLow, abs(coord.x));
#else
	float3 color = lerp(hsv2rgb(mWaveColorHigh), hsv2rgb(mWaveColorLow), abs(coord.x));
#endif

    color *= abs(1.0 / (coord.y * 150.0)) * mWaveBloom;
    color *= (1.0 + (fft * (10.0 / wave)));

	return clamp(color, 0, 20);
}

float4 SoundSpectrumPS(in float2 coord : TEXCOORD0) : COLOR 
{
	float3 color = 0;
	float2 index = GetFramesPerSecond(time);

	float4 freqs1 = tex2Dlod(Spectrum1MapSamp, float4(index, 0, 0));
	float4 freqs2 = tex2Dlod(Spectrum2MapSamp, float4(index, 0, 0));

	float2 wave = smoothstep(mTranslate, mTranslate + mSize, coord) * 2 - 1;

	float3 bg = GenWaveBg(wave * 0.5 + 0.5, mWaveColorBg, mWaveBlockSize) * 2;
	color = (1 + bg) * GenWave(wave, freqs1, freqs2);
	color *= pow(saturate(1 - length(wave)), mWaveFade);

	float3 screen = tex2Dlod(ScnSamp, float4(coord, 0, 0)).xyz;
	return float4(screen + color, 1);
}

float Script : STANDARDSGLOBAL <
	string ScriptOutput = "color";
	string ScriptClass  = "scene";
	string ScriptOrder  = "postprocess";
> = 0.8;

const float4 ClearColor = float4(0,0,0,0);
const float ClearDepth  = 1.0;

technique MainTech<
	string Script = 
	"RenderColorTarget0=ScnMap;"
	"ClearSetColor=ClearColor;"
	"ClearSetDepth=ClearDepth;"
	"Clear=Color;"
	"Clear=Depth;"
	"ScriptExternal=Color;"

	"RenderColorTarget=;"
	"Pass=SoundSpectrum;"
;>{
	pass SoundSpectrum < string Script= "Draw=Buffer;"; > {
		AlphaBlendEnable = false; AlphaTestEnable = false;
		ZEnable = False; ZWriteEnable = False;
		VertexShader = compile vs_3_0 SoundSpectrumVS();
		PixelShader  = compile ps_3_0 SoundSpectrumPS();
	}
}