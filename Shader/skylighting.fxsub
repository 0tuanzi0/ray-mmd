#include "../../ray.conf"
#include "../../ray_advanced.conf"
#include "../../shader/math.fxsub"
#include "../../shader/common.fxsub"
#include "../../shader/gbuffer.fxsub"
#include "../../shader/gbuffer_sampler.fxsub"
#include "../../shader/ibl.fxsub"

float mEnvRotateX : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvRotateX"; >;
float mEnvRotateY : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvRotateY"; >;
float mEnvRotateZ : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvRotateZ"; >;
float mEnvDiffLightP : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvDiffLight+";>;
float mEnvDiffLightM : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvDiffLight-";>;
float mEnvSpecLightP : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvSpecLight+";>;
float mEnvSpecLightM : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvSpecLight-";>;
float mEnvSSSLightP : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvSSSLight+";>;
float mEnvSSSLightM : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvSSSLight-";>;

float mDiffuseColRP : CONTROLOBJECT < string name="(self)"; string item = "DiffuseR+"; >;
float mDiffuseColGP : CONTROLOBJECT < string name="(self)"; string item = "DiffuseG+"; >;
float mDiffuseColBP : CONTROLOBJECT < string name="(self)"; string item = "DiffuseB+"; >;
float mDiffuseColRM : CONTROLOBJECT < string name="(self)"; string item = "DiffuseR-"; >;
float mDiffuseColGM : CONTROLOBJECT < string name="(self)"; string item = "DiffuseG-"; >;
float mDiffuseColBM : CONTROLOBJECT < string name="(self)"; string item = "DiffuseB-"; >;
float mDiffuseCol  :  CONTROLOBJECT < string name="(self)"; string item = "DiffuseGray+"; >;

float mSpecularColRP : CONTROLOBJECT < string name="(self)"; string item = "SpecularR+"; >;
float mSpecularColGP : CONTROLOBJECT < string name="(self)"; string item = "SpecularG+"; >;
float mSpecularColBP : CONTROLOBJECT < string name="(self)"; string item = "SpecularB+"; >;
float mSpecularColRM : CONTROLOBJECT < string name="(self)"; string item = "SpecularR-"; >;
float mSpecularColGM : CONTROLOBJECT < string name="(self)"; string item = "SpecularG-"; >;
float mSpecularColBM : CONTROLOBJECT < string name="(self)"; string item = "SpecularB-"; >;
float mSpecularCol  :  CONTROLOBJECT < string name="(self)"; string item = "SpecularGray+"; >;

static float4 mBalanceDiffuse = float4(float3(mDiffuseColRP, mDiffuseColGP, mDiffuseColBP) - float3(mDiffuseColRM, mDiffuseColGM, mDiffuseColBM), mDiffuseCol);
static float4 mBalanceSpecular = float4(float3(mSpecularColRP, mSpecularColGP, mSpecularColBP) - float3(mSpecularColRM, mSpecularColGM, mSpecularColBM), mSpecularCol);

static float mEnvIntensitySSS  = lerp(lerp(mEnvLightIntensityMin, mEnvLightIntensityMax, mEnvSSSLightP),  0, mEnvSSSLightM);
static float mEnvIntensitySpec = lerp(lerp(mEnvLightIntensityMin, mEnvLightIntensityMax, mEnvSpecLightP), 0, mEnvSpecLightM);
static float mEnvIntensityDiff = lerp(lerp(mEnvLightIntensityMin, mEnvLightIntensityMax, mEnvDiffLightP), 0, mEnvDiffLightM);

static float3x3 matTransform = CreateRotate(float3(mEnvRotateX, mEnvRotateY, mEnvRotateZ) * PI_2);

texture IBLDiffuseTexture<string ResourceName = IBLDIFF_MAP_FILE; int Miplevels = 0;>; 
sampler IBLDiffuseSampler = sampler_state {
	texture = <IBLDiffuseTexture>;
	MINFILTER = LINEAR; MAGFILTER = LINEAR; MIPFILTER = NONE;
	ADDRESSU = CLAMP; ADDRESSV = CLAMP;
};

texture IBLSpecularTexture<string ResourceName = IBLSPEC_MAP_FILE; int Miplevels = IBL_MIPMAP_LEVEL;>; 
sampler IBLSpecularSampler = sampler_state {
	texture = <IBLSpecularTexture>;
	MINFILTER = LINEAR; MAGFILTER = LINEAR; MIPFILTER = LINEAR;
	ADDRESSU = CLAMP; ADDRESSV = CLAMP;
};

float3 DecodeHDR(float4 rgbx)
{
#if IBL_HDR_ENABLE
	#if IBL_RGBT_RANGE
		return DecodeRGBT(rgbx, IBL_RGBT_RANGE);
	#elif IBL_RGBM_RANGE
		return DecodeRGBM(rgbx, IBL_RGBM_RANGE);
	#else
		return DecodeRGBM(rgbx, 6);
	#endif
#else
	return rgbx.rgb;
#endif
}

float4 ImageBasedLightClearCost(MaterialParam material, float3 FlatNormal, float3 V)
{
	float mipLayer = EnvironmentMip(IBL_MIPMAP_LEVEL - 1, material.customDataA);
	float3 N = mul(FlatNormal, (float3x3)matViewInverse);
	float3 R = mul(matTransform, EnvironmentReflect(N, V));
	float3 prefilteredSpeculr = DecodeHDR(tex2Dlod(IBLSpecularSampler, float4(ComputeSphereCoord(R), 0, mipLayer)));
	return float4(prefilteredSpeculr, 1.0) * EnvironmentSpecularUnreal4(N, V, material.customDataA);
}

float3 ImageBasedLightClothScattering(float nh, float nl, float vh, float nv, float roughness, float3 specular, float NormalizationFactor)
{
	float m = roughness * roughness;
	float m2 = m * m;
	float A = 4;
	float spec = (nh - nh * m2) * nh + m2;
	spec /= (1 + A * m2) * (1 + 4 * m2 * m2 / (spec * spec)) * NormalizationFactor;
	
	float G = 4 * (nl + nv - nl * nv);
	spec /= G;
	
	float3 f0 = max(0.02, specular);
	float3 fresnel = lerp(f0, 1.0, pow5(1 - vh));
	
	return fresnel * spec * nl;
}

float4 ImageBasedLightCloth(MaterialParam material, float3 N, float3 V, float3 R, float roughness)
{
	float3 L = R;

	float3 H = normalize(V + L);

	float nh = saturate(dot(N, H));
	float nl = saturate(dot(N, L));
	float vh = saturate(dot(V, H));
	float nv = abs(dot(N, V)) + 1e-5h;
	
	return float4(ImageBasedLightClothScattering(nh, nl, vh, nv, roughness, material.customDataB, PI), material.customDataA);
}

float3 ImageBasedLightSubsurface(MaterialParam material, float3 N, float mipLayer, float3 fresnel, float3 prefilteredDiffuse)
{
	float3 prefilteredTransmittance = DecodeHDR(tex2Dlod(IBLDiffuseSampler, float4(ComputeSphereCoord(-N), 0, 0)));
	
	float3 dependentSplit = 0.5;
	float3 scattering = prefilteredDiffuse + prefilteredTransmittance;
	scattering *= material.customDataB * dependentSplit * mEnvIntensitySSS;
	scattering += prefilteredDiffuse * mEnvIntensityDiff;
	
	return scattering;
}

void ShadingMaterial(MaterialParam material, float3 FlatNormal, float3 worldView, float finalSmoothness, out float3 diffuse, out float3 specular)
{
	float3 worldNormal = mul(material.normal, (float3x3)matViewInverse);
	float3 worldReflect = EnvironmentReflect(worldNormal, worldView);
	
	float3 V = mul(matTransform, worldView);
	float3 N = mul(matTransform, worldNormal);
	float3 R = mul(matTransform, worldReflect);
	
	float roughness = max(SmoothnessToRoughness(material.smoothness), 0.001);
	N = ComputeDiffuseDominantDir(N, V, roughness);
	R = ComputeSpecularDominantDir(N, R, roughness);
	
	float mipLayer = EnvironmentMip(IBL_MIPMAP_LEVEL - 1, material.smoothness);
	float3 fresnel = EnvironmentSpecularUnreal4(worldNormal, worldView, finalSmoothness, material.specular);
	
	float3 prefilteredDiffuse = DecodeHDR(tex2Dlod(IBLDiffuseSampler, float4(ComputeSphereCoord(N), 0, 0)));
	float3 prefilteredSpeculr = DecodeHDR(tex2Dlod(IBLSpecularSampler, float4(ComputeSphereCoord(R), 0, mipLayer)));

	prefilteredDiffuse = ColorBalance(prefilteredDiffuse, mBalanceDiffuse);
	prefilteredSpeculr = ColorBalance(prefilteredSpeculr, mBalanceSpecular);
   
	diffuse = prefilteredDiffuse * mEnvIntensityDiff;
	specular = prefilteredSpeculr * fresnel;
	
#if LIGHTMODEL_BRDF >= 1
	[branch]
	if (material.lightModel == SHADINGMODELID_CLEAR_COAT)
	{
		float4 specular2 = ImageBasedLightClearCost(material, FlatNormal, worldView);
		specular *= (1 - specular2.a);
		specular += specular2.rgb;
	}
	else if (material.lightModel == SHADINGMODELID_SKIN || 
			 material.lightModel == SHADINGMODELID_SUBSURFACE ||
			 material.lightModel == SHADINGMODELID_GLASS)
	{
		diffuse = ImageBasedLightSubsurface(material, N, mipLayer, fresnel, prefilteredDiffuse);
	}
	else if (material.lightModel == SHADINGMODELID_CLOTH)
	{
		float4 specular2 = ImageBasedLightCloth(material, worldNormal, worldView, worldReflect, roughness);
		specular = lerp(specular, prefilteredSpeculr * specular2.rgb, specular2.a);
	}
#else
	if (material.lightModel == SHADINGMODELID_SKIN || material.lightModel == SHADINGMODELID_SUBSURFACE)
	{
		diffuse = ImageBasedLightSubsurface(material, N, mipLayer, fresnel, prefilteredDiffuse);
	}
#endif

	specular *= mEnvIntensitySpec;
	specular *= step(0, sum(material.specular) - 1e-5);
}

#if AA_GBUFFER_FILTER_QUALITY
float3 ComputeAvgNormal(sampler NormalMap, float2 coord, float2 offset)
{
	float3 avgNormal = 0;
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord, 0, 0)));
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord + float2(-1,  0) * offset, 0, 0)));
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord + float2( 1,  0) * offset, 0, 0)));
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord + float2( 0,  1) * offset, 0, 0)));
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord + float2( 0, -1) * offset, 0, 0)));
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord + float2(-1, -1) * offset, 0, 0)));
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord + float2( 1,  1) * offset, 0, 0)));
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord + float2(-1,  1) * offset, 0, 0)));
	avgNormal += DecodeGBufferNormal(tex2Dlod(NormalMap, float4(coord + float2( 1, -1) * offset, 0, 0)));
	return avgNormal / 9;
}

float AdjustRoughness(float roughness, float3 normal)
{
	float len = length(normal);
	if (len < 1.0)
	{
		float len2 = len * len;
		float kappa = (3 * len - len * len2) / (1 - len2);
		float variance = 1.0 / (2.0 * kappa);
		return sqrt(roughness * roughness + variance);
	}
	else
	{
		return roughness;
	}
}

#endif

void EnvLightingVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord : TEXCOORD0,
	out float3 oViewdir  : TEXCOORD1,
	out float4 oPosition : POSITION)
{
	oViewdir = CameraPosition - Position.xyz;
	oTexcoord = oPosition = mul(Position, matWorldViewProject);
}

void EnvLightingPS(
	in float4 texcoord : TEXCOORD0,
	in float3 viewdir  : TEXCOORD1,
	in float4 screenPosition : SV_Position,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1)
{
#if IBL_ENABLE
	float2 coord = texcoord.xy / texcoord.w;
	coord = PosToCoord(coord);
	coord += ViewportOffset;

	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	MaterialParam materialAlpha;
	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);
	
	float3 sum1 = materialAlpha.albedo + materialAlpha.specular;
	clip(sum(sum1) - 1e-5);
	
	float4 MRT1 = tex2Dlod(Gbuffer1Map, float4(coord, 0, 0));
	float4 MRT2 = tex2Dlod(Gbuffer2Map, float4(coord, 0, 0));
	float4 MRT3 = tex2Dlod(Gbuffer3Map, float4(coord, 0, 0));
	float4 MRT4 = tex2Dlod(Gbuffer4Map, float4(coord, 0, 0));

	MaterialParam material;
	DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);
	
	float finalSmoothness = material.smoothness;
	
#if AA_GBUFFER_FILTER_QUALITY > 0
	float roughness = SmoothnessToRoughness(material.smoothness);
	float3 avgNormal = ComputeAvgNormal(Gbuffer2Map, coord, ViewportOffset2); 
	finalSmoothness = RoughnessToSmoothness(AdjustRoughness(roughness, avgNormal));    
#endif

	float3 V = normalize(viewdir);
	
	float3 diffuse, specular;
	ShadingMaterial(material, materialAlpha.normal, V, finalSmoothness, diffuse, specular);
	
	float3 diffuse2, specular2;
	ShadingMaterial(materialAlpha, materialAlpha.normal, V, materialAlpha.smoothness, diffuse2, specular2);
	
	float fakeSSAO = any(materialAlpha.alpha) ? (1 - materialAlpha.alpha * 0.5) : 1;
	
	oColor0 = EncodeYcbcr(screenPosition, diffuse * fakeSSAO , specular * fakeSSAO);
	oColor1 = EncodeYcbcr(screenPosition, diffuse2, specular2);
#else
	oColor0 = EncodeYcbcr(screenPosition, 0, 0);
	oColor1 = EncodeYcbcr(screenPosition, 0, 0);
#endif
}

const float4 BackColor = float4(0,0,0,0);
const float4 IBLColor  = float4(0,0.5,0,0.5);

shared texture EnvLightAlphaMap : RENDERCOLORTARGET;

#define OBJECT_TEC(name, mmdpass) \
	technique name < string MMDPass = mmdpass;\
	string Script = \
		"ClearSetColor=BackColor;"\
		"RenderColorTarget0=LightAlphaMap;"\
		"Clear=Color;"\
		"RenderColorTarget0=LightSpecMap;"\
		"Clear=Color;"\
		"RenderColorTarget0=;" \
		"RenderColorTarget1=EnvLightAlphaMap;" \
		"ClearSetColor=IBLColor;"\
		"Clear=Color;"\
		"Pass=DrawObject;" \
	;> { \
		pass DrawObject { \
			AlphaBlendEnable = false; AlphaTestEnable = false;\
			CullMode = CCW;\
			VertexShader = compile vs_3_0 EnvLightingVS(); \
			PixelShader  = compile ps_3_0 EnvLightingPS(); \
		} \
	}

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}