#include "../../ray.conf"
#include "../../ray_advanced.conf"
#include "../../shader/math.fxsub"
#include "../../shader/common.fxsub"
#include "../../shader/gbuffer.fxsub"
#include "../../shader/gbuffer_sampler.fxsub"
#include "../../shader/lighting.fxsub"

float mEnvRotateX : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvRotateX"; >;
float mEnvRotateY : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvRotateY"; >;
float mEnvRotateZ : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvRotateZ"; >;
float mEnvDiffLightP : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvDiffLight+";>;
float mEnvDiffLightM : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvDiffLight-";>;
float mEnvSpecLightP : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvSpecLight+";>;
float mEnvSpecLightM : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvSpecLight-";>;
float mEnvSSSLightP : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvSSSLight+";>;
float mEnvSSSLightM : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvSSSLight-";>;
float mColBalanceRP :  CONTROLOBJECT < string name="(self)"; string item = "BalanceR+"; >;
float mColBalanceGP :  CONTROLOBJECT < string name="(self)"; string item = "BalanceG+"; >;
float mColBalanceBP :  CONTROLOBJECT < string name="(self)"; string item = "BalanceB+"; >;
float mColBalanceRM :  CONTROLOBJECT < string name="(self)"; string item = "BalanceR-"; >;
float mColBalanceGM :  CONTROLOBJECT < string name="(self)"; string item = "BalanceG-"; >;
float mColBalanceBM :  CONTROLOBJECT < string name="(self)"; string item = "BalanceB-"; >;
float mColBalance  :  CONTROLOBJECT < string name="(self)"; string item = "BalanceGray+"; >;
static float3x3 matTransform = CreateRotate(float3(mEnvRotateX, mEnvRotateY, mEnvRotateZ) * PI_2);

texture IBLDiffuseTexture<string ResourceName = IBLDIFF_MAP_FILE;>; 
sampler IBLDiffuseSampler = sampler_state {
    texture = <IBLDiffuseTexture>;
    MINFILTER = LINEAR; MAGFILTER = LINEAR; MIPFILTER = NONE;
    ADDRESSU = CLAMP; ADDRESSV = CLAMP;
};

texture IBLSpecularTexture<string ResourceName = IBLSPEC_MAP_FILE; int Miplevels = IBL_MIPMAP_LEVEL;>; 
sampler IBLSpecularSampler = sampler_state {
    texture = <IBLSpecularTexture>;
    MINFILTER = LINEAR; MAGFILTER = LINEAR; MIPFILTER = LINEAR;    
    ADDRESSU = CLAMP; ADDRESSV = CLAMP;
};

float3 ColorBalance(float3 color)
{
    float3 lum = luminance(color);
    color = lerp(color, lum, mColBalance);
    color *= float3(1 + float3(mColBalanceRP, mColBalanceGP, mColBalanceBP) - float3(mColBalanceRM, mColBalanceGM, mColBalanceBM));
    return color;
}

float3 DecodeHDR(float4 rgbx)
{
#if IBL_HDR_ENABLE
    #if IBL_RGBT_RANGE
        return DecodeRGBT(rgbx, IBL_RGBT_RANGE);
    #elif IBL_RGBM_RANGE
        return DecodeRGBM(rgbx, IBL_RGBM_RANGE);
    #else
        return DecodeRGBM(rgbx, 6);
    #endif
#else
    return rgbx.rgb;
#endif
}

float4 ImageBasedLightClearCost(MaterialParam material, float3 N, float3 V)
{
    float mipLayer = EnvironmentMip(IBL_MIPMAP_LEVEL - 1, material.customData);
    float3 R = mul(matTransform, EnvironmentReflect(N, V));
    float4 prefilteredSpeculr = tex2Dlod(IBLSpecularSampler, float4(ComputeSphereCoord(R), 0, mipLayer));    
    return float4(DecodeHDR(prefilteredSpeculr), 1.0) * EnvironmentSpecularUnreal4(N, V, material.customData);
}

float4 ImageBasedLightHair(MaterialParam material, float3 N, float3 V, float3 R)
{
    float mipLayer = EnvironmentMip(IBL_MIPMAP_LEVEL - 1, material.customData);
    float3 FakeNormal = -normalize(V - N * dot(V, N));
    float4 prefilteredSpeculr = tex2Dlod(IBLSpecularSampler, float4(ComputeSphereCoord(FakeNormal), 0, mipLayer));
    return float4(DecodeHDR(prefilteredSpeculr), 1.0) * EnvironmentSpecularUnreal4(N, V, material.customData);
}

void ShadingMaterial(MaterialParam material, float3 FlatNormal, float3 V, out float3 diffuse, out float3 specular)
{
    float3 worldView = V;
    float3 worldNormal = mul(material.normal, (float3x3)matViewInverse);
    float3 worldReflect = EnvironmentReflect(worldNormal, worldView);
    
    float mipLayer = EnvironmentMip(IBL_MIPMAP_LEVEL - 1, material.smoothness);

    float3 R = mul(matTransform, worldReflect);
    float3 N = mul(matTransform, worldNormal);

    float4 prefilteredDiffuse = tex2Dlod(IBLDiffuseSampler, float4(ComputeSphereCoord(N), 0, 0));
    float4 prefilteredSpeculr = tex2Dlod(IBLSpecularSampler, float4(ComputeSphereCoord(R), 0, mipLayer));
    float4 prefilteredTransmittance = tex2Dlod(IBLDiffuseSampler, float4(ComputeSphereCoord(-N), 0, 0));

    prefilteredDiffuse.rgb = DecodeHDR(prefilteredDiffuse);
    prefilteredSpeculr.rgb = DecodeHDR(prefilteredSpeculr);
    prefilteredTransmittance.rgb = DecodeHDR(prefilteredTransmittance);

    prefilteredDiffuse.rgb = ColorBalance(prefilteredDiffuse.rgb);
    prefilteredSpeculr.rgb = ColorBalance(prefilteredSpeculr.rgb);
    prefilteredTransmittance.rgb = ColorBalance(prefilteredTransmittance.rgb);

    float3 dependentSplit = 0.5;
    float3 scattering = (prefilteredDiffuse.rgb + prefilteredTransmittance.rgb);
    scattering *= material.transmittance * dependentSplit;
    scattering *= (1 + mEnvSSSLightP * 5 - mEnvSSSLightM);
    
    diffuse = prefilteredDiffuse.rgb;
    diffuse *= (1 + mEnvDiffLightP * 5 - mEnvDiffLightM);
    diffuse += scattering;
       
    specular = prefilteredSpeculr.rgb * HorizonOcclusion(worldNormal, worldReflect);
    specular *= EnvironmentSpecularUnreal4(worldNormal, worldView, material.smoothness, material.specular);
    
    if (material.lightModel == SHADINGMODELID_CLEAR_COAT)
    {
        float4 specular2 = ImageBasedLightClearCost(material, mul(FlatNormal, (float3x3)matViewInverse), worldView);
        specular *= (1 - specular2.a);
        specular += specular2.rgb;
    }
    else if (material.lightModel == SHADINGMODELID_HAIR)
    {
        float4 specular2 = ImageBasedLightHair(material, worldNormal, worldView, R);
        specular *= (1 - specular2.a);
        specular += specular2.rgb;
    }
    
    specular *= step(0, material.specular - 1e-5);
    specular *= (1 + mEnvSpecLightP * 5 - mEnvSpecLightM);
}

void EnvLightingVS(
    in float4 Position : POSITION,
    in float2 Texcoord : TEXCOORD0,
    out float4 oTexcoord : TEXCOORD0,
    out float3 oViewdir  : TEXCOORD1,
    out float4 oPosition : SV_Position)
{
    oViewdir = CameraPosition - mul(Position, matWorld).xyz;
    oTexcoord = oPosition = mul(Position, matWorldViewProject);
}

void EnvLightingPS(
    float4 texcoord : TEXCOORD0,
    float3 viewdir  : TEXCOORD1,
    float4 screenPosition : SV_Position,
    out float4 oColor0 : COLOR0,
    out float4 oColor1 : COLOR1)
{
    float2 coord = texcoord.xy / texcoord.w;
    coord = PosToCoord(coord);
    coord += ViewportOffset;

    float4 MRT1 = tex2Dlod(Gbuffer1Map, float4(coord, 0, 0));
    float4 MRT2 = tex2Dlod(Gbuffer2Map, float4(coord, 0, 0));
    float4 MRT3 = tex2Dlod(Gbuffer3Map, float4(coord, 0, 0));
    float4 MRT4 = tex2Dlod(Gbuffer4Map, float4(coord, 0, 0));

    MaterialParam material;    
    DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);

    float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
    float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
    float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
    float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

    MaterialParam materialAlpha;    
    DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);
    
#if AA_QUALITY > 1
    float roughness = SmoothnessToRoughness(material.smoothness);
    float3 avgNormal = ComputeAvgNormal(Gbuffer2Map, coord, ViewportOffset2); 
    float finalSmoothness = RoughnessToSmoothness(AdjustRoughness(roughness, avgNormal));    
    material.smoothness = finalSmoothness;
#endif
    
    float3 V = normalize(viewdir);
    
    float3 diffuse, specular;
    ShadingMaterial(material, materialAlpha.normal, V, diffuse, specular);
    
    float3 diffuse2, specular2;
    ShadingMaterial(materialAlpha, materialAlpha.normal, V, diffuse2, specular2);
    
#if IBL_ENABLE
    oColor0 = EncodeYcbcr(screenPosition, diffuse, specular);
    oColor1 = EncodeYcbcr(screenPosition, diffuse2, specular2);
#else
    oColor0 = EncodeYcbcr(screenPosition, 0, 0);
    oColor1 = EncodeYcbcr(screenPosition, 0, 0);
#endif
}

const float4 BackColor = float4(0,0,0,0);

shared texture EnvLightAlphaMap : RENDERCOLORTARGET;

#define OBJECT_TEC(name, mmdpass) \
    technique name < string MMDPass = mmdpass;\
    string Script = \
        "ClearSetColor=BackColor;"\
        "RenderColorTarget0=LightAlphaMap;"\
        "Clear=Color;"\
        "RenderColorTarget0=;" \
        "RenderColorTarget1=EnvLightAlphaMap;" \
        "Pass=DrawObject;" \
    ;> { \
        pass DrawObject { \
            AlphaBlendEnable = false; AlphaTestEnable = false;\
            VertexShader = compile vs_3_0 EnvLightingVS(); \
            PixelShader  = compile ps_3_0 EnvLightingPS(); \
        } \
    }

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}