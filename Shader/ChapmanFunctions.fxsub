float ChapmanApproximation(float X, float h, float cosZenith)
{
	float c = sqrt(X + h);
	float c_exp_h = c * exp(-h);

	if (cosZenith >= 0)
	{
		return c_exp_h / (c * cosZenith + 1);
	}
	else
	{
		float x0 = sqrt(1 - cosZenith * cosZenith) * (X + h);
		float c0 = sqrt(x0);

		return 2 * c0 * exp(X - x0) - c_exp_h / (1 - c * cosZenith);
	}
}

float GetOpticalDepthSchueler(float h, float H, float earthRadius, float cosZenith)
{
	return H * ChapmanApproximation(earthRadius / H, h / H, cosZenith);
}

float2 ComputeOpticalDepth(float rayleighHeight, float earthRadius, float3 samplePoint, float3 V, float3 L, float neg)
{
	float rl = length(samplePoint);
	float h = rl - earthRadius;
	float3 r = samplePoint / rl;

	float cos_chi_sun = dot(r, -L);
	float cos_chi_ray = dot(r, V * neg);

	float opticalDepthSun = GetOpticalDepthSchueler(h, rayleighHeight, earthRadius, cos_chi_sun);
	float opticalDepthCamera = GetOpticalDepthSchueler(h, rayleighHeight, earthRadius, cos_chi_ray) * neg;

	return float2(opticalDepthSun, opticalDepthCamera);
}

float3 Transmittance(float3 waveLambdaMie, float3 waveLambdaRayleigh, float rayleighHeight, float earthRadius, float3 P, float3 V)
{
	float rl = length(P);
	float h = (rl - earthRadius) / rayleighHeight;
	float cosZenith = dot(P / rl, V);
	float ch = GetOpticalDepthSchueler(h, rayleighHeight, earthRadius, cosZenith);
	return exp(-(waveLambdaMie + waveLambdaRayleigh) * ch);
}