float3 ACESFilmLinear(float3 x)
{
	const float A = 2.51f;
	const float B = 0.03f;
	const float C = 2.43f;
	const float D = 0.59f;
	const float E = 0.14f;
	return (x * (A * x + B)) / (x * (C * x + D) + E);
}

float4 TonemapFilmic_Hable(float4 x) 
{
	float A = 0.22;
	float B = 0.30;
	float C = 0.10;
	float D = 0.20;
	float E = 0.01;
	float F = 0.30;
	return ((x*(A*x+C*B)+D*E) / (x*(A*x+B)+D*F)) - E / F;
}

float3 TonemapFilmic_Hejl2015(float3 hdr, float whitePt) 
{
	float4 vh = float4(hdr, whitePt);
	float4 va = 1.425 * vh + 0.05;
	float4 vf = (vh * va + 0.004) / (vh * (va + 0.55) + 0.0491) - 0.0821;
	return vf.rgb / vf.www;
}

float3 TonemapFilmicALU(float3 color)
{
	color = max(0, color - 0.004f);
	color = (color * (6.2f * color + 0.5f)) / (color * (6.2f * color + 1.7f)+ 0.06f);
	return color;
}

float3 LumaBasedReinhardToneMapping(float3 color)
{
	float luma = luminance(color);
	float toneMappedLuma = luma / (1. + luma);
	color *= toneMappedLuma / luma;
	return color;
}

float3 ACESToneMapping(float3 color)
{
#if HDR_ENABLE && HDR_TONEMAP_OPERATOR == 1
	float3 curr = ACESFilmLinear(color);
	return saturate(curr);
#elif HDR_ENABLE && HDR_TONEMAP_OPERATOR == 2
	float3 curr = TonemapFilmicALU(color);
	return saturate(curr);
#elif HDR_ENABLE && HDR_TONEMAP_OPERATOR == 3
	float3 curr = LumaBasedReinhardToneMapping(color);
	return lerp(curr, color, mTonemapping);
#elif HDR_ENABLE && HDR_TONEMAP_OPERATOR == 4
	float4 curr = TonemapFilmic_Hable(float4(color * 2, 8.0));
	curr = curr / curr.w;
	return saturate(curr);
#elif HDR_ENABLE && HDR_TONEMAP_OPERATOR == 5
	float3 curr = TonemapFilmic_Hejl2015(color, 8.0);
	return saturate(curr);
#else
	return saturate(color);
#endif
}

float3 noise3(float2 seed)
{
	return frac(sin(dot(seed.xy, float2(34.483, 89.637))) * float3(29156.4765, 38273.5639, 47843.7546));
}

float3 ColorBanding(float2 uv)
{
	float3 noise = noise3(uv) + noise3(uv + 0.5789) - 0.5;
	return noise / 255.0;
}

float4 ACESOutputDevice(float3 color, float2 uv)
{
#if HDR_ENABLE && HDR_TONEMAP_OPERATOR == 2
	color += ColorBanding(uv * (time + PI));
	return float4(color, 1);
#else
	color = linear2srgb(color);
	color += ColorBanding(uv * (time + PI));
	return float4(color, 1);
#endif
}

float3 WhiteBalance(float3 color, float kelvin)
{
	float temp = kelvin / 100;
	float temp60 = max(0, temp - 60);
	float red = temp <= 66 ? 255 : 329.698727446 * pow(temp60, -0.1332047592);
	float green = temp <= 66 ? 99.4708025861 * log(temp) - 161.1195681661 : 288.1221695283 * pow(temp60, -0.0755148492);
	float blue = temp >= 66 ? 255 : (temp <= 19 ? 0 : 138.5177312231 * log(temp - 10) - 305.0447927307);
	float3 balance = saturate(float3(red, green, blue) / 255);
	return color * balance;
}