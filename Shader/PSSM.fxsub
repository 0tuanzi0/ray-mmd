#include "../ray.conf"
#include "../ray_advanced.conf"
#include "../shader/common.fxsub"
#include "../shader/ShadowMapCascaded.fxsub"

#if SUN_SHADOW_QUALITY == 1
#	define SHADOW_MAP_SIZE 1024
#elif SUN_SHADOW_QUALITY == 2
#	define SHADOW_MAP_SIZE 2048
#elif SUN_SHADOW_QUALITY == 3
#	define SHADOW_MAP_SIZE 4096
#elif SUN_SHADOW_QUALITY == 4
#	define SHADOW_MAP_SIZE 8192
#elif SUN_SHADOW_QUALITY == 5
#	define SHADOW_MAP_SIZE 16384
#else
#	define SHADOW_MAP_SIZE 1024
#endif

#define SHADOW_MAP_OFFSET (1.0 / SHADOW_MAP_SIZE)

static float4x4 matLightProject = CreateOrthoProject(2, 2, mPSSMDepthZMin, mPSSMDepthZMax);
static float4x4 matLightView = CreateLightViewMatrix(SunDirection, -SunDirection, mLightDistance);
static float4x4 matLightViewProject = mul(matLightView, matLightProject);
static float4x4 matLightViewFromCameraView = mul(matViewInverse, matLightView);
static float4x4 lightParam = CreateLightProjParameters(matLightViewFromCameraView, SHADOW_MAP_SIZE);

#if CASTER_ALPHA_MAP_ENABLE
texture DiffuseMap: MATERIALTEXTURE;
sampler DiffuseSamp = sampler_state
{
	texture = <DiffuseMap>;
	MINFILTER = POINT; MAGFILTER = POINT; MIPFILTER = POINT;
	ADDRESSU = WRAP; ADDRESSV = WRAP;
};
#endif

void CascadeShadowMapVS(
	in float4 Position : POSITION,
	in float3 Normal   : NORMAL,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1,
	out float4 oPosition : POSITION,
	uniform int3 offset)
{
	float cosAngle = 1 - saturate(dot(Normal, -SunDirection));
	float distanceSqr = sqrt(distance(Position, CameraPosition));
	float distanceBias = cosAngle * distanceSqr * 0.005;

	oTexcoord0 = float4(Texcoord, offset.xy);

	oTexcoord1 = mul(Position + float4(Normal * distanceBias, 0), matLightViewProject);
	oTexcoord1.xy = oTexcoord1.xy * lightParam[offset.z].xy + lightParam[offset.z].zw;
	oTexcoord1.xy = oTexcoord1.xy * 0.5 + offset.xy * 0.5f;

	oPosition = oTexcoord1;
	oPosition.z /= mPSSMDepthZMax;
}

float4 CascadeShadowMapPS(
	in float4 coord0 : TEXCOORD0,
	in float4 coord1 : TEXCOORD1) : COLOR
{
	float2 clipUV = (coord1.xy - SHADOW_MAP_OFFSET) * coord0.zw;
	clip(clipUV.x);
	clip(clipUV.y);

#if CASTER_ALPHA_ENABLE
	float alpha = MaterialDiffuse.a;
#if CASTER_ALPHA_MAP_ENABLE
	if (use_texture) alpha *= tex2D(DiffuseSamp, coord0.xy).a;
#endif
	clip(alpha - CasterAlphaThreshold);
#endif
	return coord1.z;
}

technique DepthTech<string MMDPass = "object_ss";
>{
	pass CascadeShadowMap0 {
		AlphaBlendEnable = false; AlphaTestEnable = false;
		VertexShader = compile vs_3_0 CascadeShadowMapVS(int3(-1, 1, 0));
		PixelShader  = compile ps_3_0 CascadeShadowMapPS();
	}
	pass CascadeShadowMap1 {
		AlphaBlendEnable = false; AlphaTestEnable = false;
		VertexShader = compile vs_3_0 CascadeShadowMapVS(int3( 1, 1, 1));
		PixelShader  = compile ps_3_0 CascadeShadowMapPS();
	}
	pass CascadeShadowMap2 {
		AlphaBlendEnable = false; AlphaTestEnable = false;
		VertexShader = compile vs_3_0 CascadeShadowMapVS(int3(-1,-1, 2));
		PixelShader  = compile ps_3_0 CascadeShadowMapPS();
	}
	pass CascadeShadowMap3 {
		AlphaBlendEnable = false; AlphaTestEnable = false;
		VertexShader = compile vs_3_0 CascadeShadowMapVS(int3( 1,-1, 3));
		PixelShader  = compile ps_3_0 CascadeShadowMapPS();
	}
}

technique DepthTec0<string MMDPass = "object";>{}
technique EdgeTec<string MMDPass = "edge";>{}
technique ShadowTec<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}