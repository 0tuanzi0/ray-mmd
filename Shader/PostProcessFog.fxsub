float mFogMieHP : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "FogMieH+";>;
float mFogMieSP : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "FogMieS+";>;
float mFogMieVM : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "FogMieV-";>;
float mFogMiePhaseP : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "FogMiePhase+";>;
float mFogMiePhaseM : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "FogMiePhase-";>;
float mFogMieTurbidityP : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "FogMieTurbidity+";>;
float mFogMieTurbidityM : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "FogMieTurbidity-";>;
float mFogRayleightHP : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "FogRayleighH+";>;
float mFogRayleightSP : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "FogRayleighS+";>;
float mFogRayleightVM : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "FogRayleighV-";>;

float mFogRangeP : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "FogRange+";>;
float mFogRangeM : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "FogRange-";>;
float mFogDensityP : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "FogDensity+";>;
float mFogDensityM : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "FogDensity-";>;
float mFogIntensityP : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "FogIntensity+";>;
float mFogIntensityM : CONTROLOBJECT<string name="ray_controller.pmx"; string item = "FogIntensity-";>;

static const float3 mFogRangeParams = float3(1.0, 1e-5, 10.0f);
static const float3 mFogDensityParams = float3(10, 0, 100);
static const float3 mFogIntensityParams = float3(1.0, 0.0, 100.0f);
static const float3 mFogMiePhaseParams = float3(0.76, 0.1, 0.998);
static const float3 mFogMieTurbidityParams = float3(100, 1, 1000);
static const float3 mFogWaveLength = float3(450e-9, 450e-9, 450e-9);

static const float mFogMiePhase = lerp(lerp(mFogMiePhaseParams.x, mFogMiePhaseParams.z, mFogMiePhaseP), mFogMiePhaseParams.y, mFogMiePhaseM);
static const float mFogMieTurbidity = lerp(lerp(mFogMieTurbidityParams.x, mFogMieTurbidityParams.z, mFogMieTurbidityP), mFogMieTurbidityParams.y, mFogMieTurbidityM);
static const float mFogRange = lerp(lerp(mFogRangeParams.x, mFogRangeParams.z, mFogRangeP), mFogRangeParams.y, mFogRangeM);
static const float mFogDensity = lerp(lerp(mFogDensityParams.x, mFogDensityParams.z, mFogDensityP), mFogDensityParams.y, mFogDensityM);
static const float mFogIntensity = lerp(lerp(mFogIntensityParams.x, mFogIntensityParams.z, mFogIntensityP), mFogIntensityParams.y, mFogIntensityM);

static const float3 FogMieColor = float3(mFogMieHP, mFogMieSP, 1 - mFogMieVM);
static const float3 FogRayleightColor = float3(mFogRayleightHP, mFogRayleightSP, 1 - mFogRayleightVM);

#if FOG_WITH_GODRAY
texture FogMap : RENDERCOLORTARGET<float2 ViewportRatio={0.5, 0.5}; string Format="A16B16G16R16F";>;
sampler FogMapSamp = sampler_state {
	texture = <FogMap>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
texture FogBlurMap : RENDERCOLORTARGET<float2 ViewportRatio={0.5, 0.5}; string Format="A16B16G16R16F";>;
sampler FogBlurMapSamp = sampler_state {
	texture = <FogBlurMap>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
#endif

void ComputeSkyFogApproximation(float3 V, float3 L, float3 waveLambdaMie, float3 waveLambdaRayleigh, float mieG, float fogRange, float distance, out float3 inscattering, out float3 extinction)
{
	float3 sunUp = float3(0, 1, 0);
	float3 sunDirection = normalize(L);

	float zenithAngle = saturate(dot(V, sunUp));

	float3 inscatteringMie = waveLambdaMie;
	float3 inscatteringRayleigh = waveLambdaRayleigh;

	float cosTheta = dot(V, sunDirection);

	float3 betaMie = inscatteringMie * ComputePhaseMie(cosTheta, mieG);
	float3 betaRayleigh = inscatteringRayleigh * ComputePhaseRayleigh(cosTheta);

	extinction = exp(-(inscatteringMie + inscatteringRayleigh) * distance);
	extinction = pow(extinction, fogRange);

	inscattering = (betaMie + betaRayleigh) / (inscatteringMie + inscatteringRayleigh);
	inscattering *= (1 - extinction);
}

void AtmosphericFogVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD0,
	out float2 oTexcoord0 : TEXCOORD0,
	out float3 oTexcoord1 : TEXCOORD1,
	out float3 oTexcoord2 : TEXCOORD2,
	out float3 oTexcoord3 : TEXCOORD3,
	out float4 oPosition : POSITION)
{
	oPosition = Position;
	oTexcoord0 = Texcoord + ViewportOffset;
	oTexcoord1 = -mul(Position, matProjectInverse).xyz;
	oTexcoord2 = ComputeWaveLengthMie(mFogWaveLength, hsv2rgb(FogMieColor), mFogMieTurbidity, 4) * mFogDensity;
	oTexcoord3 = ComputeWaveLengthRayleigh(mFogWaveLength) * hsv2rgb(FogRayleightColor) * mFogDensity;
}

float4 AtmosphericFogPS(
	in float2 coord : TEXCOORD0, 
	in float3 viewdir : TEXCOORD1,
	in float3 mieLambda : TEXCOORD2,
	in float3 rayleight : TEXCOORD3,
	uniform sampler source) : COLOR
{
	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	MaterialParam material;
	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, material);

#if FOG_ATMOSPHERIC_QUALITY == 2
	clip(sum(material.albedo + material.specular) - 1e-5);
#endif

	float3 V = normalize(viewdir);
	float3 L = mul(SunDirection, (float3x3)matView);

	float3 extinction = 0;
	float3 inscattering = 0;
	ComputeSkyFogApproximation(V, L, mieLambda, rayleight, mFogMiePhase, mFogRange, material.linearDepth, inscattering, extinction);

	float3 color = tex2Dlod(source, float4(coord, 0, 0)).rgb;

	return float4(lerp(inscattering * mFogIntensity, color, extinction), 0);
}