#if SSAO_QUALITY == 1
#   define SSAO_SAMPLER_COUNT 8
#   define SSAO_BLUR_RADIUS 8
#elif SSAO_QUALITY == 2
#   define SSAO_SAMPLER_COUNT 12
#   define SSAO_BLUR_RADIUS 8
#elif SSAO_QUALITY >= 3
#   define SSAO_SAMPLER_COUNT 16
#   define SSAO_BLUR_RADIUS 8
#else
#   define SSAO_SAMPLER_COUNT 8
#   define SSAO_BLUR_RADIUS 8
#endif

shared texture SSAOMap : RENDERCOLORTARGET <
    float2 ViewPortRatio = {1.0, 1.0};
    int Miplevels = 1;
    bool AntiAlias = false;
    string Format = "L8";
>;
texture SSAOMapTemp : RENDERCOLORTARGET <
    float2 ViewPortRatio = {1.0, 1.0};
    int Miplevels = 1;
    bool AntiAlias = false;
    string Format = "L8";
>;
sampler SSAOMapSamp = sampler_state {
    texture = <SSAOMap>;
    MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
    AddressU  = CLAMP;  AddressV = CLAMP;
};
sampler SSAOMapSampTemp = sampler_state {
    texture = <SSAOMapTemp>;
    MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
    AddressU  = CLAMP;  AddressV = CLAMP;
};

float linearizeDepth(float2 uv)
{
    return tex2D(DepthMapSamp, uv).g;
}

float3 GetPosition(float2 uv)
{
    float depth = abs(linearizeDepth(uv));
    return ReconstructPos(uv, matProjectInverse, depth);
}

float3 GetNormal(float2 uv)
{
    float4 MRT2 = tex2D(Gbuffer2Map, uv);
    float4 MRT6 = tex2D(Gbuffer6Map, uv);
    
    float linearDepth = tex2D(Gbuffer4Map, uv).r;
    float linearDepth2 = tex2D(Gbuffer8Map, uv).r;
    float4 MRT = linearDepth2 > 1.0 ? (linearDepth < linearDepth2 ? MRT2 : MRT6) : MRT2;
    return DecodeGBufferNormal(MRT);
}

float2 tapLocation(int index, float noise)
{
    float alpha = PI_2 * 7 / SSAO_SAMPLER_COUNT;
    float angle = (index + noise) * alpha;
    float radius = (1 + mSSAORadiusM - mSSAORadiusP) * 16;
    float2 radiusStep = ((ViewportSize.x / radius) / ViewportSize) * ((0.5 + index) / SSAO_SAMPLER_COUNT);
    return float2(cos(angle), sin(angle)) * radiusStep;
}

float4 SSAO(in float4 coord : TEXCOORD0, in float3 viewdir : TEXCOORD1) : COLOR
{
    float depth = linearizeDepth(coord.xy);
    float3 viewNormal = GetNormal(coord.xy);
    float3 viewPosition = -viewdir * depth;
       
    float sampleWeight = 0.0f;
    float sampleAmbient = 0.0f;
    float sampleNoise = GetJitterOffset2(coord.zw);
    float sampleRadius2 = mSSAOSpaceRadius * mSSAOSpaceRadius * mLightAttenuationBlub;
    float sampleScale = saturate((mSSAOBiasFalloff * 0.5) / viewPosition.z);
    
#if SSAO_QUALITY < 4
    [unroll]
    for (int j = 0; j < SSAO_SAMPLER_COUNT; j++)
    {
        float2 sampleOffset = coord.xy + tapLocation(j, sampleNoise) * sampleScale;
        float3 samplePosition = GetPosition(sampleOffset);
        float3 sampleDirection = samplePosition - viewPosition;

        float sampleLength2 = dot(sampleDirection, sampleDirection);
        float sampleAngle = dot(sampleDirection, viewNormal);
        
        float f = max(sampleRadius2 - sampleLength2, 0.0f);
        float falloff = f * f * f;

        float bias = viewPosition.z * mSSAOBiasFar;
        bias += saturate(1 - viewPosition.z / mSSAOBiasFalloff) * mSSAOBiasNear;
        
        float occlustion  = max(0.0, falloff * (sampleAngle - bias) * rsqrt(sampleLength2));

        sampleWeight += falloff;
        sampleAmbient += occlustion;
    }

    float ao = saturate(1 - sampleAmbient / sampleWeight);
    return pow(ao,  (mSSAOIntensityMin + ao) * (1 - mSSAOM) + ao * ao * mSSAOP * mSSAOIntensityMax);
#else
    static const float2 kernel[16] = {
        float2( -0.14, -0.02 ),
        float2( -0.04, 0.24 ),
        float2( 0.36, 0.08 ),
        float2(-0.46, -0.08),
        float2( 0.26, -0.4 ),
        float2(-0.127, -0.347),
        float2( -0.44, -0.34 ),
        float2( -0.52, 0.4 ),
        float2(-0.226, 0.589),
        float2( 0.3, 0.68 ),
        float2( 0.7, 0.356),
        float2( 0.47, -0.287),
        float2( 0.84, -0.32 ),
        float2( 0.4, -0.74),
        float2(-0.338, -0.684),
        float2(-0.622, -0.415)
    };
        
    float2 sampleSinCos = float2(sin(sampleNoise * PI_2), cos(sampleNoise * PI_2));
    float2 sampleDiskRadius = ((ViewportSize.x / ((1 + mSSAORadiusM - mSSAORadiusP) * 16)) / ViewportSize);
    
    float2x2 sampleRotMat = { sampleSinCos.y, sampleSinCos.x, -sampleSinCos.x, sampleSinCos.y };
    
    float sampleScale = saturate((mSSAOBiasFalloff * 0.5) / viewPosition.z);
    
    float2 rotateKernel[16];
    
    [unroll]
    for (int i = 0; i < 16; i++)
    {
        rotateKernel[i] = mul(kernel[i].xy, sampleRotMat) * sampleDiskRadius;
    }
    
    [unroll]
    for (int i = 0; i < 16; i++)
    {
        float2 sampleOffset = coord.xy + rotateKernel[i];
        float3 samplePosition = GetPosition(sampleOffset);
        float3 sampleDirection = samplePosition - viewPosition;

        float sampleLength2 = dot(sampleDirection, sampleDirection);
        float sampleAngle = dot(sampleDirection, viewNormal);
        
        float f = max(sampleRadius2 - sampleLength2, 0.0f);
        float falloff = f * f * f;

        float bias = viewPosition.z * mSSAOBiasNear;
        bias += saturate(1 - viewPosition.z / mSSAOBiasFalloff) * mSSAOBiasFar;
        
        float occlustion  = max(0.0, falloff * (sampleAngle - bias) * rsqrt(sampleLength2));

        sampleWeight += falloff;
        sampleAmbient += occlustion;
    }

    float ao = saturate(1 - sampleAmbient / sampleWeight);
    return pow(ao,  (mSSAOIntensityMin + ao) * (1 - mSSAOM) + ao * ao * mSSAOP * mSSAOIntensityMax);
#endif
}

float4 SSAOBlur(in float2 coord : TEXCOORD0, uniform sampler source, uniform float2 offset) : COLOR
{
    float center_d = abs(linearizeDepth(coord));

    float total_c = tex2D(source, coord).r;
    float total_w = 1.0f;
    
    float2 offset1 = coord + offset;
    float2 offset2 = coord - offset;
    
    float angle = dot(mul(GetNormal(coord), (float3x3)matView), float3(0,0,-1));
    float falloff = saturate(center_d / mSSAOBlurFalloff);
    float sharpness = lerp(mSSAOBlurSharpnessMax * angle, mSSAOBlurSharpnessMin, falloff);
    
    [unroll]
    for (int r = 1; r < SSAO_BLUR_RADIUS; r++)
    {
        float depth1 = abs(linearizeDepth(offset1));
        float depth2 = abs(linearizeDepth(offset2));
        
        float bilateralWeight1 = BilateralWeight(r, depth1, center_d, SSAO_BLUR_RADIUS, sharpness);
        float bilateralWeight2 = BilateralWeight(r, depth2, center_d, SSAO_BLUR_RADIUS, sharpness);

        total_c += tex2D(source, offset1).r * bilateralWeight1;
        total_c += tex2D(source, offset2).r * bilateralWeight2;
        
        total_w += bilateralWeight1;
        total_w += bilateralWeight2;
        
        offset1 += offset;
        offset2 -= offset;
    }

    return total_c / total_w;
}