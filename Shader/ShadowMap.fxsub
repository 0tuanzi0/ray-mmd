#define SHADOW_BLUR_COUNT 6
#define SHADOW_SAMPLES_COUNT 24

static float4x4 matLightProject = CreateOrthoProject(2.0, 2.0, 0, mLightZMax);
static float4x4 matLightView = CreateLightViewMatrix(SunDirection, -SunDirection, mLightDistance);
static float4x4 matLightViewProject = mul(matLightView, matLightProject);
static float4x4 matLightViewFromCameraView = mul(matViewInverse, matLightView);
static float4x4 matLightProjectFromCameraView = mul(matViewInverse, matLightViewProject);
static float4x4 lightParam = CreateLightProjParameters(matLightViewFromCameraView, SHADOW_MAP_SIZE);

static const float2 JitterOffsets[SHADOW_SAMPLES_COUNT] = {
	{0.029463f,0.029463f},
	{0.000000f,0.083333f},
	{-0.088388f,0.088388f},
	{-0.166667f,0.000000f},
	{-0.147314f,-0.147314f},
	{0.000000f,-0.250000f},
	{0.206239f,-0.206239f},
	{0.333333f,0.000000f},
	{0.265165f,0.265165f},
	{0.000000f,0.416667f},
	{-0.324091f,0.324091f},
	{-0.500000f,0.000000f},
	{-0.383016f,-0.383016f},
	{0.000000f,-0.583333f},
	{0.441942f,-0.441942f},
	{0.666667f,0.000000f},
	{0.500867f,0.500867f},
	{0.000000f,0.750000f},
	{-0.559793f,0.559793f},
	{-0.833333f,0.000000f},
	{-0.618718f,-0.618718f},
	{0.000000f,-0.916667f},
	{0.677644f,-0.677644f},
	{1.000000f,0.000000f}
};

float ShadowPCF(float2 coord, float size, float jitter, float receiverDepth)
{
	float shadow = 0.0;
	float basis = jitter / SHADOW_MAP_SIZE * size;

	[unroll]
	for (int i = 0; i < SHADOW_SAMPLES_COUNT; i++) 
	{
		float2 pos = coord + basis * JitterOffsets[i];
		shadow += saturate(exp(-20 * (receiverDepth - tex2Dlod(PSSMsamp, float4(pos, 0, 0)).r)));
	}

	return saturate(shadow * (1.0 / SHADOW_SAMPLES_COUNT));
}

float4 ShadowMapGenPS(
	in float4 coord : TEXCOORD0,
	in float3 viewdir : TEXCOORD1) : COLOR
{
	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord.xy, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord.xy, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord.xy, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord.xy, 0, 0));

	MaterialParam material;
	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, material);

	float linearDepth = abs(tex2Dlod(DepthMapSamp, float4(coord.xy, 0, 0)).r);

	float3 view = normalize(viewdir);
	float3 viewPosition = view * linearDepth / view.z;
	float4 proj = mul(float4(viewPosition, 1), matLightProjectFromCameraView);

	float4 LightPPos01 = proj.xyxy * float4(lightParam[0].xy, lightParam[1].xy);
	float4 LightPPos23 = proj.xyxy * float4(lightParam[2].xy, lightParam[3].xy);

	LightPPos01 += float4(lightParam[0].zw, lightParam[1].zw);
	LightPPos23 += float4(lightParam[2].zw, lightParam[3].zw);

	LightPPos01 *= float4(0.25, -0.25, 0.25, -0.25);
	LightPPos23 *= float4(0.25, -0.25, 0.25, -0.25);

	float4 lightPPos0 = CalcCascadePPos(LightPPos01.xy, float2(0, 0), 0, SHADOW_MAP_SIZE);
	float4 lightPPos1 = CalcCascadePPos(LightPPos01.zw, float2(1, 0), 1, SHADOW_MAP_SIZE);
	float4 lightPPos2 = CalcCascadePPos(LightPPos23.xy, float2(0, 1), 2, SHADOW_MAP_SIZE);
	float4 lightPPos3 = CalcCascadePPos(LightPPos23.zw, float2(1, 1), 3, SHADOW_MAP_SIZE);

	float4 texCoord0 = lightPPos3;
	float4 texCoord1 = 0;
	if (lightPPos2.w > 0.0) { texCoord1 = texCoord0; texCoord0 = lightPPos2; }
	if (lightPPos1.w > 0.0) { texCoord1 = texCoord0; texCoord0 = lightPPos1; }
	if (lightPPos0.w > 0.0) { texCoord1 = texCoord0; texCoord0 = lightPPos0; }

	float casterDepth0 = tex2Dlod(PSSMsamp, float4(texCoord0.xy, 0, 0)).r;
	float casterDepth1 = tex2Dlod(PSSMsamp, float4(texCoord1.xy, 0, 0)).r;
	float casterDepth = lerp(lerp(1, casterDepth1, texCoord1.w), casterDepth0, texCoord0.w);
	float receiverDepth = proj.z;

	float depthSlope = ShadowSlopeScaledBias(proj.z / mLightZMax) * mLightZMax;
	receiverDepth -= (linearDepth + depthSlope) * 0.003 + max(0, linearDepth - 100) * 0.007;

	clip(casterDepth1 + casterDepth0 - 1e-5);

	float shadow = ShadowPCF(texCoord0.xy, 3.0, GetJitterOffset(coord.zw), receiverDepth);

	if (step(0, sum(material.albedo + material.specular) - 1e-5))
		shadow = shadow;
	else if (abs(material.linearDepth - linearDepth) < 10)
		shadow = 1;

	return shadow;
}

#if SHADOW_BLUR_COUNT
float4 ShadowMapBlurPS(float2 coord : TEXCOORD0, uniform sampler source, uniform float2 offset) : COLOR
{
	float2 offset1 = coord + offset;
	float2 offset2 = coord - offset;

	float totalWeight = 1;
	float totalColor = tex2Dlod(source, float4(coord, 0, 0)).r;

	float center_d = tex2Dlod(DepthMapSamp, float4(coord, 0, 0)).r;

	[unroll]
	for(int r = 1; r < SHADOW_BLUR_COUNT; r++)
	{
		float shadow1 = tex2Dlod(source, float4(offset1, 0, 0)).r;
		float shadow2 = tex2Dlod(source, float4(offset2, 0, 0)).r;

		float depth1 = tex2Dlod(DepthMapSamp, float4(offset1, 0, 0)).r;
		float depth2 = tex2Dlod(DepthMapSamp, float4(offset2, 0, 0)).r;

		float bilateralWeight1 = BilateralWeight(r, depth1, center_d, SHADOW_BLUR_COUNT, 10);
		float bilateralWeight2 = BilateralWeight(r, depth2, center_d, SHADOW_BLUR_COUNT, 10);

		totalColor += shadow1 * bilateralWeight1;
		totalColor += shadow2 * bilateralWeight2;

		totalWeight += bilateralWeight1;
		totalWeight += bilateralWeight2;

		offset1 += offset;
		offset2 -= offset;
	}

	return totalColor / totalWeight;
}
#endif