const float BloomScale = 512;

static float2 BloomOffset1 = ViewportOffset2 * 2;
static float2 BloomOffset2 = ViewportOffset2 * 4;
static float2 BloomOffset3 = ViewportOffset2 * 8;
static float2 BloomOffset4 = ViewportOffset2 * 16;
static float2 BloomOffset5 = ViewportOffset2 * 32;

static float BloomScale1 = ((ViewportSize.x * 0.5) / BloomScale);
static float BloomScale2 = ((ViewportSize.x * 0.25) / (BloomScale * 0.5));
static float BloomScale3 = ((ViewportSize.x * 0.125) / (BloomScale * 0.25));
static float BloomScale4 = ((ViewportSize.x * 0.0625) / (BloomScale * 0.125));
static float BloomScale5 = ((ViewportSize.x * 0.03125) / (BloomScale * 0.0625));

static float2 BloomOffsetX1 = float2(ViewportOffset2.x * 2, 0.0)  * BloomScale1;
static float2 BloomOffsetX2 = float2(ViewportOffset2.x * 4, 0.0)  * BloomScale2;
static float2 BloomOffsetX3 = float2(ViewportOffset2.x * 8, 0.0)  * BloomScale3;
static float2 BloomOffsetX4 = float2(ViewportOffset2.x * 16, 0.0) * BloomScale4;
static float2 BloomOffsetX5 = float2(ViewportOffset2.x * 32, 0.0) * BloomScale5;

static float2 BloomOffsetY1 = float2(0.0, ViewportOffset2.y * 2)  * BloomScale1;
static float2 BloomOffsetY2 = float2(0.0, ViewportOffset2.y * 4)  * BloomScale2;
static float2 BloomOffsetY3 = float2(0.0, ViewportOffset2.y * 8)  * BloomScale3;
static float2 BloomOffsetY4 = float2(0.0, ViewportOffset2.y * 16) * BloomScale4;
static float2 BloomOffsetY5 = float2(0.0, ViewportOffset2.y * 32) * BloomScale5;

static float3 mBloomColorAll = hsv2rgb(float3(mBloomColorAllHP, mBloomColorAllSP, lerp(lerp(mBloomIntensityMin, mBloomIntensityMax, mBloomColorAllVP), 0, mBloomColorAllVM)));
static float3 mBloomColor1st = hsv2rgb(float3(mBloomColor1stHP, mBloomColor1stSP, lerp(lerp(mBloomIntensityMin, mBloomIntensityMax, mBloomColor1stVP), 0, mBloomColor1stVM)));
static float3 mBloomColor2nd = hsv2rgb(float3(mBloomColor2ndHP, mBloomColor2ndSP, lerp(lerp(mBloomIntensityMin, mBloomIntensityMax, mBloomColor2ndVP), 0, mBloomColor2ndVM)));
static float3 mBloomColor3rd = hsv2rgb(float3(mBloomColor3rdHP, mBloomColor3rdSP, lerp(lerp(mBloomIntensityMin, mBloomIntensityMax, mBloomColor3rdVP), 0, mBloomColor3rdVM)));
static float3 mBloomColor4th = hsv2rgb(float3(mBloomColor4thHP, mBloomColor4thSP, lerp(lerp(mBloomIntensityMin, mBloomIntensityMax, mBloomColor4thVP), 0, mBloomColor4thVM)));
static float3 mBloomColor5th = hsv2rgb(float3(mBloomColor5thHP, mBloomColor5thSP, lerp(lerp(mBloomIntensityMin, mBloomIntensityMax, mBloomColor5thVP), 0, mBloomColor5thVM)));

texture DownsampleMap1st : RENDERCOLORTARGET<float2 ViewportRatio={1.0, 1.0}; string Format="A16B16G16R16F";>;
texture DownsampleMap2nd : RENDERCOLORTARGET<float2 ViewportRatio={0.5, 0.5}; string Format="A16B16G16R16F";>;
texture DownsampleMap3rd : RENDERCOLORTARGET<float2 ViewportRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;

sampler DownsampleSamp1st = sampler_state {
	texture = <DownsampleMap1st>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};
sampler DownsampleSamp2nd = sampler_state {
	texture = <DownsampleMap2nd>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};
sampler DownsampleSamp3rd = sampler_state {
	texture = <DownsampleMap3rd>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

texture BloomMap1st : RENDERCOLORTARGET<float2 ViewportRatio={0.50, 0.50}; string Format="A16B16G16R16F";>;
texture BloomMap2nd : RENDERCOLORTARGET<float2 ViewportRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture BloomMap3rd : RENDERCOLORTARGET<float2 ViewportRatio={0.125, 0.125}; string Format="A16B16G16R16F";>;
texture BloomMap4th : RENDERCOLORTARGET<float2 ViewportRatio={0.0625, 0.0625}; string Format="A16B16G16R16F";>;
texture BloomMap5th : RENDERCOLORTARGET<float2 ViewportRatio={0.03125, 0.03125}; string Format="A16B16G16R16F";>;
texture BloomMap1stTemp : RENDERCOLORTARGET<float2 ViewportRatio={0.50, 0.50}; string Format="A16B16G16R16F";>;
texture BloomMap2ndTemp : RENDERCOLORTARGET<float2 ViewportRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture BloomMap3rdTemp : RENDERCOLORTARGET<float2 ViewportRatio={0.125, 0.125}; string Format="A16B16G16R16F";>;
texture BloomMap4thTemp : RENDERCOLORTARGET<float2 ViewportRatio={0.0625, 0.0625}; string Format="A16B16G16R16F";>;
texture BloomMap5thTemp : RENDERCOLORTARGET<float2 ViewportRatio={0.03125, 0.03125}; string Format="A16B16G16R16F";>;

sampler BloomSamp1stTemp = sampler_state {
	texture = <BloomMap1stTemp>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp1st = sampler_state {
	texture = <BloomMap1st>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp2ndTemp = sampler_state {
	texture = <BloomMap2ndTemp>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp2nd = sampler_state {
	texture = <BloomMap2nd>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp3rdTemp = sampler_state {
	texture = <BloomMap3rdTemp>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp3rd = sampler_state {
	texture = <BloomMap3rd>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp4thTemp = sampler_state {
	texture = <BloomMap4thTemp>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp4th = sampler_state {
	texture = <BloomMap4th>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp5thTemp = sampler_state {
	texture = <BloomMap5thTemp>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp5th = sampler_state {
	texture = <BloomMap5th>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};

void HDRDownsampleVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD,
	out float2 oTexcoord1 : TEXCOORD0,
	out float2 oTexcoord2 : TEXCOORD1,
	out float2 oTexcoord3 : TEXCOORD2,
	out float2 oTexcoord4 : TEXCOORD3,
	out float4 oPosition : POSITION,
	uniform float2 step)
{
	oPosition = Position;
	oTexcoord1 = Texcoord + step * 0.5;
	oTexcoord2 = oTexcoord1 + float2(step.x, 0);
	oTexcoord3 = oTexcoord1 + float2(step.x, step.y);
	oTexcoord4 = oTexcoord1 + float2(0, step.y);
}

float4 HDRDownsample4XPS(
	in float2 coord1 : TEXCOORD0,
	in float2 coord2 : TEXCOORD1,
	in float2 coord3 : TEXCOORD2,
	in float2 coord4 : TEXCOORD3,
	uniform sampler source) : COLOR
{
	float4 color = tex2Dlod(source, float4(coord1, 0, 0));
	color += tex2Dlod(source, float4(coord2, 0, 0));
	color += tex2Dlod(source, float4(coord3, 0, 0));
	color += tex2Dlod(source, float4(coord4, 0, 0));
	return color * 0.25;
}

float4 HDRDownsamplePS(in float2 coord : TEXCOORD0, uniform sampler source) : COLOR
{
	return tex2Dlod(source, float4(coord, 0, 0));
}

void GlareDetectionVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD,
	out float4 oTexcoord1 : TEXCOORD0,
	out float4 oTexcoord2 : TEXCOORD1,
	out float4 oTexcoord3 : TEXCOORD2,
	out float4 oPosition : POSITION)
{
	float4 offset0 = float4(-1,0,1,0) * ViewportOffset2.xyxy;
	float4 offset1 = float4(0,-1,0,1) * ViewportOffset2.xyxy;

	oPosition = Position;
	oTexcoord1 = Texcoord.xyxy + ViewportOffset.xyxy;
	oTexcoord2 = oTexcoord1.xyxy + offset0;
	oTexcoord3 = oTexcoord1.xyxy + offset1;

	oTexcoord1.zw = mExposure;
#if HDR_EYE_ADAPTATION == 1
	float aveLum = tex2Dlod(EyeLumAveMapSamp, float4(0.5,0.5,0,0)).r;
	oTexcoord1.zw *= ComputeExposureISO(aveLum, 12.5);
#elif HDR_EYE_ADAPTATION == 2
	float aveLum = tex2Dlod(EyeLumAveMapSamp, float4(0.5,0.5,0,0)).r;
	oTexcoord1.zw *= ComputeExposureISO(aveLum, 18.0);
#endif
}

float4 GlareDetectionPS(
	in float4 coord1 : TEXCOORD0,
	in float4 coord2 : TEXCOORD1,
	in float4 coord3 : TEXCOORD2,
	uniform sampler source) : COLOR
{
#if HDR_BLOOM_MODE > 0
	float3 color = tex2Dlod(source, float4(coord1.xy, 0, 0)).rgb;
	color = min(color, tex2Dlod(source, float4(coord2.xy, 0, 0)).rgb);
	color = min(color, tex2Dlod(source, float4(coord2.zw, 0, 0)).rgb);
	color = min(color, tex2Dlod(source, float4(coord3.xy, 0, 0)).rgb);
	color = min(color, tex2Dlod(source, float4(coord3.zw, 0, 0)).rgb);
	color = clamp(color, 0, 65535);

#if HDR_BLOOM_MODE == 1
	float3 bloom = max(0, color - mBloomThreshold);
#elif HDR_BLOOM_MODE == 2
	float3 bloom = saturate(color - mBloomThreshold);
#elif HDR_BLOOM_MODE == 3
	float lum = luminance(color) * coord1.z;
	float3 bloom = saturate(color * (lum - mBloomThreshold) * 0.5);
#elif HDR_BLOOM_MODE == 4
	float lum = luminance(color) * coord1.z;
	float3 bloom = clamp(color * saturate((lum - mBloomThreshold) * 0.5), 0, 10);
#endif

	bloom *= mBloomColorAll;
#else
	float3 bloom = 0;
#endif

	float4 MRT3 = tex2Dlod(Gbuffer3Map, float4(coord1.xy, 0, 0));
	float4 MRT4 = tex2Dlod(Gbuffer4Map, float4(coord1.xy, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord1.xy, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord1.xy, 0, 0));

	float3 emissive0 = DecodeGBufferEmissive(MRT3, MRT4);
	float3 emissive1 = DecodeGBufferEmissive(MRT7, MRT8);

	bloom += max(0.0, lerp(emissive0, emissive1, MRT8.a) - 1.0);

	return float4(bloom, 0);
}

float4 BloomBlurPS(in float2 coord : TEXCOORD0, uniform sampler source, uniform float2 offset) : COLOR
{
	static const float weights[15] = { 153, 816, 3060, 8568, 18564, 31824, 43758, 48620, 43758, 31824, 18564, 8568, 3060, 816, 153 };
	static const float weightSum = 262106.0;

	float4 color = 0;
	float2 coords = coord - offset * 7.0;

	[unroll]
	for (int i = 0; i < 15; ++i)
	{
		color += tex2Dlod(source, float4(coords, 0, 0)) * (weights[i] / weightSum);
		coords += offset;
	}

	return color;
}

float4 GlareLightCompVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD,
	out float2 oTexcoord0 : TEXCOORD0,
	out float3 oTexcoord1 : TEXCOORD1,
	out float3 oTexcoord2 : TEXCOORD2,
	out float3 oTexcoord3 : TEXCOORD3,
	out float3 oTexcoord4 : TEXCOORD4,
	out float3 oTexcoord5 : TEXCOORD5) : POSITION
{
	float g1 = GaussianDistribution(0, mBloomRadius);
	float g2 = GaussianDistribution(1, mBloomRadius);
	float g3 = GaussianDistribution(2, mBloomRadius);
	float g4 = GaussianDistribution(3, mBloomRadius);
	float g5 = GaussianDistribution(4, mBloomRadius);
	float weight = g1 + g2 + g3 + g4 + g5;

	oTexcoord0 = Texcoord;
	oTexcoord1 = g1 / weight * mBloomColor1st;
	oTexcoord2 = g2 / weight * mBloomColor2nd;
	oTexcoord3 = g3 / weight * mBloomColor3rd;
	oTexcoord4 = g4 / weight * mBloomColor4th;
	oTexcoord5 = g5 / weight * mBloomColor5th;

	return Position;
}

float4 GlareLightCompPS(
	in float2 coord1 : TEXCOORD0, 
	in float3 coord2 : TEXCOORD1,
	in float3 coord3 : TEXCOORD2,
	in float3 coord4 : TEXCOORD3,
	in float3 coord5 : TEXCOORD4,
	in float3 coord6 : TEXCOORD5) : COLOR
{
	float3 bloom1 = tex2Dlod(BloomSamp1st, float4(coord1 + 0.5 / (ViewportSize * 0.5), 0, 0)).rgb;
	float3 bloom2 = tex2Dlod(BloomSamp2nd, float4(coord1 + 0.5 / (ViewportSize * 0.25), 0, 0)).rgb;
	float3 bloom3 = tex2Dlod(BloomSamp3rd, float4(coord1 + 0.5 / (ViewportSize * 0.125), 0, 0)).rgb;
	float3 bloom4 = tex2Dlod(BloomSamp4th, float4(coord1 + 0.5 / (ViewportSize * 0.0625), 0, 0)).rgb;
	float3 bloom5 = tex2Dlod(BloomSamp5th, float4(coord1 + 0.5 / (ViewportSize * 0.03125), 0, 0)).rgb;

	float3 bloom = 0.0f;
	bloom += bloom1 * coord2;
	bloom += bloom2 * coord3;
	bloom += bloom3 * coord4;
	bloom += bloom4 * coord5;
	bloom += bloom5 * coord6;

#if HDR_STAR_MODE > 0
	float4 star = max(tex2Dlod(StreakSamp1st, float4(coord1, 0, 0)), tex2Dlod(StreakSamp2nd, float4(coord1, 0, 0)));
#if HDR_STAR_MODE > 2
	star = max(star, max(tex2Dlod(StreakSamp3rd, float4(coord1, 0, 0)), tex2Dlod(StreakSamp4th, float4(coord1, 0, 0))));
#endif
	bloom += star.rgb;
#endif

	return float4(bloom, 0);
}