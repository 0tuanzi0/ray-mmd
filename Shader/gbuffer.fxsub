#define SHADINGMODELID_DEFAULT      0
#define SHADINGMODELID_SKIN         1
#define SHADINGMODELID_EMISSIVE     2
#define SHADINGMODELID_HAIR         3
#define SHADINGMODELID_GLASS        4
#define SHADINGMODELID_CLOTH        5
#define SHADINGMODELID_CLEAR_COAT   6
#define SHADINGMODELID_SUBSURFACE   7
#define SHADINGMODELID_MASK         8

#define MAX_FRACTIONAL_8_BIT        (255.0f / 256.0f)
#define TWO_BITS_EXTRACTION_FACTOR  (3.0f + MAX_FRACTIONAL_8_BIT)

struct MaterialParam
{
	float3 normal;
	float3 albedo;
	float3 specular;
	float3 emissive;
	float emissiveIntensity;
	float smoothness;
	float alpha;
	float customDataA;
	float3 customDataB;
	float linearDepth;
	int lightModel;
};

struct GbufferParam
{
	float4 buffer1 : COLOR0;
	float4 buffer2 : COLOR1;
	float4 buffer3 : COLOR2;
	float4 buffer4 : COLOR3;
};

float3 EncodeNormal(float3 normal)
{
	float p = sqrt(-normal.z * 8 + 8);
	float2 enc = normal.xy / p + 0.5f;
	float2 enc255 = enc * 255;
	float2 residual = floor(frac(enc255) * 16);
	return float3(floor(enc255), residual.x * 16 + residual.y) / 255;
}

float3 DecodeNormal(float3 enc)
{
	float nz = floor(enc.z * 255) / 16;
	enc.xy += float2(floor(nz) / 16, frac(nz)) / 255;
	float2 fenc = enc.xy * 4 - 2;
	float f = dot(fenc, fenc);
	float g = sqrt(1 - f / 4);
	float3 normal;
	normal.xy = fenc * g;
	normal.z = f / 2 - 1;
	return normalize(normal);
}

void DecodeGbuffer(float4 buffer1, float4 buffer2, float4 buffer3, float4 buffer4, out MaterialParam material)
{
	material.albedo = buffer1.xyz;
	material.smoothness = buffer1.w;

	material.normal = DecodeNormal(buffer2.xyz);
	material.emissive = 0;
	material.emissiveIntensity = 0;
	
	material.customDataA = buffer2.w;
	material.customDataB = 0;
	
	material.linearDepth = buffer4.x;
	material.alpha = buffer4.w;
	
	material.lightModel = (int)floor(buffer3.w * TWO_BITS_EXTRACTION_FACTOR);
	if (material.lightModel == SHADINGMODELID_SKIN)
	{
		material.lightModel = floor(buffer2.w * TWO_BITS_EXTRACTION_FACTOR) < 1.0 ? SHADINGMODELID_SUBSURFACE : SHADINGMODELID_SKIN;
	}
	
	if (buffer4.z <= 1e-5)
	{
		material.lightModel = (int)floor(abs(buffer4.z));
	}
	
	if (material.lightModel == SHADINGMODELID_SKIN || 
		material.lightModel == SHADINGMODELID_SUBSURFACE ||
		material.lightModel == SHADINGMODELID_GLASS ||
		material.lightModel == SHADINGMODELID_CLOTH)
	{
		material.specular = buffer3.xxx;
		material.customDataB = ycbcr2rgb(float3(frac(buffer3.w * TWO_BITS_EXTRACTION_FACTOR), buffer3.yz));
	}
	else if (material.lightModel == SHADINGMODELID_EMISSIVE)
	{
		material.specular = buffer3.xxx;
		material.emissive = ycbcr2rgb(float3(frac(buffer3.w * TWO_BITS_EXTRACTION_FACTOR), buffer3.yz));
		material.emissiveIntensity = buffer4.y;
	}
	else
	{
		material.specular = ycbcr2rgb(buffer3.xyz);
	}
}

float3 DecodeGBufferNormal(float4 buffer2)
{
	return DecodeNormal(buffer2.rgb);
}

int DecodeLightModel(float4 buffer4)
{
	int lightModel = (int)floor(abs(buffer4.z));
	return lightModel;
}

float3 DecodeGBufferEmissive(float4 buffer3, float4 buffer4)
{
	int lightModel = DecodeLightModel(buffer4);
	float3 emissive = max(0, ycbcr2rgb(float3(frac(buffer3.w * TWO_BITS_EXTRACTION_FACTOR), buffer3.yz)) * buffer4.y);
	return emissive * any(lightModel == SHADINGMODELID_EMISSIVE);
}

float3 ReconstructPos(float2 Tex, float4x4 matProjectInverse, float depth)
{
	float3 v = mul(float4(CoordToPos(Tex), 0, 1), matProjectInverse).xyz;
	return v * depth / v.z;
}