#include "../ray.conf"
#include "../shader/math.fx"
#include "../shader/common.fx"
#include "../shader/gbuffer.fx"
#include "../shader/gbuffer_sampler.fx"
#include "../shader/lighting.fx"

float mR : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "R+"; >;
float mG : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "G+"; >;
float mB : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "B+"; >;
float mWidthP : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "Width+"; >;
float mHeightP : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "Height+"; >;
float mRangeP : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "Range+"; >;
float mIntensityM : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "Intensity-"; >;

float3 mPosition : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "Position"; >;
float3 mDirection : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "Direction"; >;

float3 mRightTop : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "RightTop"; >;
float3 mRightBottom : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "RightBottom"; >;

float mBlubP : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "Blub"; >;

static float LightRange = (1 + mRangeP * RECTANGLELIGHT_MAX_RADIUS);
static float LightWidth = (1 + mWidthP * RECTANGLELIGHT_MAX_WIDTH);
static float LightHeight = (1 + mHeightP * RECTANGLELIGHT_MAX_HEIGHT);
static float LightIntensity = (1 - mIntensityM) * RECTANGLELIGHT_MAX_INTENSITY;

void RectangleLightingVS(
    in float4 Position : POSITION,
    in float3 Normal   : NORMAL,
    in float2 Texcoord : TEXCOORD0,
    out float4 oTexcoord  : TEXCOORD0,
    out float3 oNormal    : TEXCOORD1,
    out float3 oViewdir   : TEXCOORD2,
    out float4 oPosition  : SV_Position)
{
    oTexcoord = Texcoord.xyxy + ViewportOffset.xyxy;
    oViewdir = mul(CameraPosition - Position.xyz, (float3x3)matView);
    oNormal = normalize(Normal);   
    oPosition = float4(CoordToPos(Texcoord), 0, 1);
}

float3 GetPosition(float2 uv)
{
    float depth = tex2D(Gbuffer4Map, uv).r;
    return ReconstructPos(uv, matProjectInverse, depth);
}

float3 RectangleLight(float3 R, float3 L, float3 Lt, float3 Lb, float3 Ln, float2 Lwh)
{
    float RdotN = dot(Ln, R) + 1e-6;
    float intersectLen = dot(Ln, L) / RdotN;
    float3 I = R * intersectLen - L;

    float2 lightPos2D = float2(dot(I, Lt), dot(I, Lb));
    float2 lightClamp2D = clamp(lightPos2D, -Lwh, Lwh);
    
    return L + Lt * lightClamp2D.x + Lb * lightClamp2D.y;
}

int RectangleLightDiffuse(float3 L, float3 lightDirection)
{
   return step(0, dot(L, lightDirection));
}

float4 RectangleLightingPS(
    float4 texcoord : TEXCOORD0,
    float3 normal   : TEXCOORD1,
    float3 viewdir  : TEXCOORD2,
    float4 texcoord2 : TEXCOORD3,
    float4 screenPosition : SV_Position,
    uint isFrontFace : SV_IsFrontFace) : SV_Target
{
    float4 MRT0 = tex2D(Gbuffer1Map, texcoord.xy);
    float4 MRT1 = tex2D(Gbuffer2Map, texcoord.xy);
    float4 MRT2 = tex2D(Gbuffer3Map, texcoord.xy);

    MaterialParam material;
    DecodeGbuffer(MRT0, MRT1, MRT2, material);
    
    float3 LightPosition = mul(float4(mPosition, 1), matView).xyz;
    float3 LightDirection = normalize(mul(mDirection - mPosition, (float3x3)matView));
    float3 LightRight = normalize(mul((mRightTop + mRightBottom) / 2 - mPosition, (float3x3)matView));
    float3 LightUp = normalize(cross(LightDirection, LightRight));
    
    float3 P = GetPosition(texcoord.xy);
    float3 V = normalize(viewdir);
    float3 R = reflect(V, material.normal);
    
    float3 distance = RectangleDirection(P, LightPosition, LightRight, LightUp, LightDirection, float2(LightWidth, LightHeight));
    float3 L = normalize(distance);
    
    float4 lighting = 0.0f;
    
    if (material.lightModel == LIGHTINGMODEL_NORMAL || material.lightModel == LIGHTINGMODEL_EMISSIVE)
        lighting.rgb = DiffuseBRDF(material.normal, L, V, material.smoothness);
    else if (material.lightModel == LIGHTINGMODEL_TRANSMITTANCE)
        lighting.rgb = TranslucencyBRDF(material.normal, L, material.transmittance);
        
    L = RectangleLight(R, LightPosition - P, LightRight, LightUp, LightDirection, float2(LightWidth, LightHeight));
    L = normalize(L);
    
    lighting.rgb += SpecularBRDF(material.normal, L, V, material.smoothness, material.specular);
    lighting.rgb *= float3(mR, mG, mB) * LightIntensity;
    lighting *= GetPhysicalLightAttenuation(distance, LightRange, 1 - mBlubP);
    lighting *= RectangleLightDiffuse(normalize(distance), -LightDirection);

    return lighting;
}

#define OBJECT_TEC(name, mmdpass) \
    technique name < string MMDPass = mmdpass;\
    > { \
        pass DrawObject { \
            ZEnable = false; ZWriteEnable = false;\
            AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;\
            SrcBlend = ONE; DestBlend = ONE;\
            VertexShader = compile vs_3_0 RectangleLightingVS(); \
            PixelShader  = compile ps_3_0 RectangleLightingPS(); \
        } \
    }


OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}